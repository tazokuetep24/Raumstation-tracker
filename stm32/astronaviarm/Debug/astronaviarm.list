
astronaviarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f64  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800a118  0800a118  0001a118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a594  0800a594  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a594  0800a594  0001a594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a59c  0800a59c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a59c  0800a59c  0001a59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5a0  0800a5a0  0001a5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a5a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          00000900  200001d8  200001d8  000201d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000ad8  20000ad8  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   000106c0  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002625  00000000  00000000  0003090b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cf0  00000000  00000000  00032f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a0e  00000000  00000000  00033c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025885  00000000  00000000  0003462e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fbe0  00000000  00000000  00059eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dd139  00000000  00000000  00069a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004dbc  00000000  00000000  00146bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0014b988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a0fc 	.word	0x0800a0fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	0800a0fc 	.word	0x0800a0fc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001016:	f000 ff71 	bl	8001efc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800101a:	f000 f889 	bl	8001130 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800101e:	f000 f997 	bl	8001350 <MX_GPIO_Init>
	MX_ETH_Init();
 8001022:	f000 f8ef 	bl	8001204 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8001026:	f000 f93b 	bl	80012a0 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 800102a:	f000 f963 	bl	80012f4 <MX_USB_OTG_FS_PCD_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3, az_elv, 16);
 800102e:	2210      	movs	r2, #16
 8001030:	4937      	ldr	r1, [pc, #220]	; (8001110 <main+0x100>)
 8001032:	4838      	ldr	r0, [pc, #224]	; (8001114 <main+0x104>)
 8001034:	f002 fd3f 	bl	8003ab6 <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	double my_az = 0.0;
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double my_elv = 0.0;
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	f04f 0300 	mov.w	r3, #0
 800104c:	e9c7 2302 	strd	r2, r3, [r7, #8]

		//	  HAL_Delay(2000);
		//	  rotateXY(30, 30);
		//	  break;

		if(pos_recieved){
 8001050:	4b31      	ldr	r3, [pc, #196]	; (8001118 <main+0x108>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d02b      	beq.n	80010b0 <main+0xa0>
			rotateXY(az, elv);
 8001058:	4b30      	ldr	r3, [pc, #192]	; (800111c <main+0x10c>)
 800105a:	ed93 7b00 	vldr	d7, [r3]
 800105e:	4b30      	ldr	r3, [pc, #192]	; (8001120 <main+0x110>)
 8001060:	ed93 6b00 	vldr	d6, [r3]
 8001064:	eeb0 1a46 	vmov.f32	s2, s12
 8001068:	eef0 1a66 	vmov.f32	s3, s13
 800106c:	eeb0 0a47 	vmov.f32	s0, s14
 8001070:	eef0 0a67 	vmov.f32	s1, s15
 8001074:	f000 fa98 	bl	80015a8 <rotateXY>
			ignore = 0;
 8001078:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <main+0x114>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
			my_az += az;
 800107e:	4b27      	ldr	r3, [pc, #156]	; (800111c <main+0x10c>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001088:	f7ff f910 	bl	80002ac <__adddf3>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	e9c7 2304 	strd	r2, r3, [r7, #16]
			my_elv += elv;
 8001094:	4b22      	ldr	r3, [pc, #136]	; (8001120 <main+0x110>)
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800109e:	f7ff f905 	bl	80002ac <__adddf3>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	e9c7 2302 	strd	r2, r3, [r7, #8]
			pos_recieved = 0;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <main+0x108>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
		}
		/* Return to strat position is asked */
		if (go_back){
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <main+0x118>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d01e      	beq.n	80010f6 <main+0xe6>
			rotateXY(-my_az, -my_elv);
 80010b8:	693c      	ldr	r4, [r7, #16]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	ed97 1b00 	vldr	d1, [r7]
 80010d0:	ec45 4b10 	vmov	d0, r4, r5
 80010d4:	f000 fa68 	bl	80015a8 <rotateXY>
			pos_recieved = 0;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <main+0x108>)
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
			my_az = 0.0;
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	f04f 0300 	mov.w	r3, #0
 80010e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
			my_elv = 0.0;
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}

		/* User Aborted Tracking */
		if (stop){
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <main+0x11c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0a8      	beq.n	8001050 <main+0x40>
			stop = 1;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <main+0x11c>)
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]
			break; /* Optional */
 8001104:	bf00      	nop
 8001106:	2300      	movs	r3, #0
		}
	}
	/* USER CODE END 3 */
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bdb0      	pop	{r4, r5, r7, pc}
 8001110:	20000978 	.word	0x20000978
 8001114:	2000041c 	.word	0x2000041c
 8001118:	20000970 	.word	0x20000970
 800111c:	20000958 	.word	0x20000958
 8001120:	20000960 	.word	0x20000960
 8001124:	20000004 	.word	0x20000004
 8001128:	2000096c 	.word	0x2000096c
 800112c:	20000968 	.word	0x20000968

08001130 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	; 0x50
 8001134:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2230      	movs	r2, #48	; 0x30
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f004 fefd 	bl	8005f3e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	4b28      	ldr	r3, [pc, #160]	; (80011fc <SystemClock_Config+0xcc>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	4a27      	ldr	r2, [pc, #156]	; (80011fc <SystemClock_Config+0xcc>)
 800115e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <SystemClock_Config+0xcc>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	4b22      	ldr	r3, [pc, #136]	; (8001200 <SystemClock_Config+0xd0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a21      	ldr	r2, [pc, #132]	; (8001200 <SystemClock_Config+0xd0>)
 800117a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <SystemClock_Config+0xd0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800118c:	2301      	movs	r3, #1
 800118e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001190:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001196:	2302      	movs	r3, #2
 8001198:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80011a0:	2304      	movs	r3, #4
 80011a2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80011a4:	23a8      	movs	r3, #168	; 0xa8
 80011a6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80011ac:	2307      	movs	r3, #7
 80011ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b0:	f107 0320 	add.w	r3, r7, #32
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 ff0b 	bl	8002fd0 <HAL_RCC_OscConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80011c0:	f000 f9ed 	bl	800159e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c4:	230f      	movs	r3, #15
 80011c6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c8:	2302      	movs	r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011da:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2105      	movs	r1, #5
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 f96c 	bl	80034c0 <HAL_RCC_ClockConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80011ee:	f000 f9d6 	bl	800159e <Error_Handler>
	}
}
 80011f2:	bf00      	nop
 80011f4:	3750      	adds	r7, #80	; 0x50
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800
 8001200:	40007000 	.word	0x40007000

08001204 <MX_ETH_Init>:
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_ETH_Init+0x84>)
 800120a:	4a20      	ldr	r2, [pc, #128]	; (800128c <MX_ETH_Init+0x88>)
 800120c:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <MX_ETH_Init+0x8c>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <MX_ETH_Init+0x8c>)
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_ETH_Init+0x8c>)
 800121c:	22e1      	movs	r2, #225	; 0xe1
 800121e:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <MX_ETH_Init+0x8c>)
 8001222:	2200      	movs	r2, #0
 8001224:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_ETH_Init+0x8c>)
 8001228:	2200      	movs	r2, #0
 800122a:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <MX_ETH_Init+0x8c>)
 800122e:	2200      	movs	r2, #0
 8001230:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_ETH_Init+0x84>)
 8001234:	4a16      	ldr	r2, [pc, #88]	; (8001290 <MX_ETH_Init+0x8c>)
 8001236:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <MX_ETH_Init+0x84>)
 800123a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800123e:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_ETH_Init+0x84>)
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <MX_ETH_Init+0x90>)
 8001244:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_ETH_Init+0x84>)
 8001248:	4a13      	ldr	r2, [pc, #76]	; (8001298 <MX_ETH_Init+0x94>)
 800124a:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_ETH_Init+0x84>)
 800124e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001252:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK)
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <MX_ETH_Init+0x84>)
 8001256:	f001 f88b 	bl	8002370 <HAL_ETH_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ETH_Init+0x60>
	{
		Error_Handler();
 8001260:	f000 f99d 	bl	800159e <Error_Handler>
	}

	memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001264:	2238      	movs	r2, #56	; 0x38
 8001266:	2100      	movs	r1, #0
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <MX_ETH_Init+0x98>)
 800126a:	f004 fe68 	bl	8005f3e <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_ETH_Init+0x98>)
 8001270:	2221      	movs	r2, #33	; 0x21
 8001272:	601a      	str	r2, [r3, #0]
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_ETH_Init+0x98>)
 8001276:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800127a:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <MX_ETH_Init+0x98>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000036c 	.word	0x2000036c
 800128c:	40028000 	.word	0x40028000
 8001290:	20000948 	.word	0x20000948
 8001294:	200002cc 	.word	0x200002cc
 8001298:	2000022c 	.word	0x2000022c
 800129c:	200001f4 	.word	0x200001f4

080012a0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_USART3_UART_Init+0x4c>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <MX_USART3_UART_Init+0x50>)
 80012a8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <MX_USART3_UART_Init+0x4c>)
 80012ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_USART3_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_USART3_UART_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MX_USART3_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_USART3_UART_Init+0x4c>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <MX_USART3_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_USART3_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_USART3_UART_Init+0x4c>)
 80012d8:	f002 fb12 	bl	8003900 <HAL_UART_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 80012e2:	f000 f95c 	bl	800159e <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000041c 	.word	0x2000041c
 80012f0:	40004800 	.word	0x40004800

080012f4 <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012fe:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001302:	2204      	movs	r2, #4
 8001304:	711a      	strb	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001308:	2202      	movs	r2, #2
 800130a:	71da      	strb	r2, [r3, #7]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800130e:	2200      	movs	r2, #0
 8001310:	719a      	strb	r2, [r3, #6]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001314:	2202      	movs	r2, #2
 8001316:	725a      	strb	r2, [r3, #9]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800131a:	2201      	movs	r2, #1
 800131c:	729a      	strb	r2, [r3, #10]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	72da      	strb	r2, [r3, #11]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	731a      	strb	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800132c:	2201      	movs	r2, #1
 800132e:	739a      	strb	r2, [r3, #14]
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	73da      	strb	r2, [r3, #15]
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001338:	f001 fd3a 	bl	8002db0 <HAL_PCD_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USB_OTG_FS_PCD_Init+0x52>
	{
		Error_Handler();
 8001342:	f000 f92c 	bl	800159e <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000464 	.word	0x20000464

08001350 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08e      	sub	sp, #56	; 0x38
 8001354:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
 800136a:	4b7a      	ldr	r3, [pc, #488]	; (8001554 <MX_GPIO_Init+0x204>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a79      	ldr	r2, [pc, #484]	; (8001554 <MX_GPIO_Init+0x204>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b77      	ldr	r3, [pc, #476]	; (8001554 <MX_GPIO_Init+0x204>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	623b      	str	r3, [r7, #32]
 8001380:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	4b73      	ldr	r3, [pc, #460]	; (8001554 <MX_GPIO_Init+0x204>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a72      	ldr	r2, [pc, #456]	; (8001554 <MX_GPIO_Init+0x204>)
 800138c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b70      	ldr	r3, [pc, #448]	; (8001554 <MX_GPIO_Init+0x204>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	4b6c      	ldr	r3, [pc, #432]	; (8001554 <MX_GPIO_Init+0x204>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a6b      	ldr	r2, [pc, #428]	; (8001554 <MX_GPIO_Init+0x204>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b69      	ldr	r3, [pc, #420]	; (8001554 <MX_GPIO_Init+0x204>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	4b65      	ldr	r3, [pc, #404]	; (8001554 <MX_GPIO_Init+0x204>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a64      	ldr	r2, [pc, #400]	; (8001554 <MX_GPIO_Init+0x204>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b62      	ldr	r3, [pc, #392]	; (8001554 <MX_GPIO_Init+0x204>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b5e      	ldr	r3, [pc, #376]	; (8001554 <MX_GPIO_Init+0x204>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a5d      	ldr	r2, [pc, #372]	; (8001554 <MX_GPIO_Init+0x204>)
 80013e0:	f043 0320 	orr.w	r3, r3, #32
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b5b      	ldr	r3, [pc, #364]	; (8001554 <MX_GPIO_Init+0x204>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0320 	and.w	r3, r3, #32
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b57      	ldr	r3, [pc, #348]	; (8001554 <MX_GPIO_Init+0x204>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a56      	ldr	r2, [pc, #344]	; (8001554 <MX_GPIO_Init+0x204>)
 80013fc:	f043 0310 	orr.w	r3, r3, #16
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b54      	ldr	r3, [pc, #336]	; (8001554 <MX_GPIO_Init+0x204>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b50      	ldr	r3, [pc, #320]	; (8001554 <MX_GPIO_Init+0x204>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a4f      	ldr	r2, [pc, #316]	; (8001554 <MX_GPIO_Init+0x204>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b4d      	ldr	r3, [pc, #308]	; (8001554 <MX_GPIO_Init+0x204>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b49      	ldr	r3, [pc, #292]	; (8001554 <MX_GPIO_Init+0x204>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a48      	ldr	r2, [pc, #288]	; (8001554 <MX_GPIO_Init+0x204>)
 8001434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b46      	ldr	r3, [pc, #280]	; (8001554 <MX_GPIO_Init+0x204>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f244 0181 	movw	r1, #16513	; 0x4081
 800144c:	4842      	ldr	r0, [pc, #264]	; (8001558 <MX_GPIO_Init+0x208>)
 800144e:	f001 fc63 	bl	8002d18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001458:	4840      	ldr	r0, [pc, #256]	; (800155c <MX_GPIO_Init+0x20c>)
 800145a:	f001 fc5d 	bl	8002d18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 8001464:	483e      	ldr	r0, [pc, #248]	; (8001560 <MX_GPIO_Init+0x210>)
 8001466:	f001 fc57 	bl	8002d18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2140      	movs	r1, #64	; 0x40
 800146e:	483d      	ldr	r0, [pc, #244]	; (8001564 <MX_GPIO_Init+0x214>)
 8001470:	f001 fc52 	bl	8002d18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800147a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	4837      	ldr	r0, [pc, #220]	; (8001568 <MX_GPIO_Init+0x218>)
 800148c:	f001 fa98 	bl	80029c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001490:	f244 0381 	movw	r3, #16513	; 0x4081
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	4619      	mov	r1, r3
 80014a8:	482b      	ldr	r0, [pc, #172]	; (8001558 <MX_GPIO_Init+0x208>)
 80014aa:	f001 fa89 	bl	80029c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PF12 PF15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 80014ae:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c4:	4619      	mov	r1, r3
 80014c6:	4825      	ldr	r0, [pc, #148]	; (800155c <MX_GPIO_Init+0x20c>)
 80014c8:	f001 fa7a 	bl	80029c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE9 PE11 PE13 */
	GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80014cc:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e2:	4619      	mov	r1, r3
 80014e4:	481e      	ldr	r0, [pc, #120]	; (8001560 <MX_GPIO_Init+0x210>)
 80014e6:	f001 fa6b 	bl	80029c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80014ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	481a      	ldr	r0, [pc, #104]	; (800156c <MX_GPIO_Init+0x21c>)
 8001502:	f001 fa5d 	bl	80029c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001506:	2340      	movs	r3, #64	; 0x40
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151a:	4619      	mov	r1, r3
 800151c:	4811      	ldr	r0, [pc, #68]	; (8001564 <MX_GPIO_Init+0x214>)
 800151e:	f001 fa4f 	bl	80029c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	2300      	movs	r3, #0
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	480b      	ldr	r0, [pc, #44]	; (8001564 <MX_GPIO_Init+0x214>)
 8001536:	f001 fa43 	bl	80029c0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2028      	movs	r0, #40	; 0x28
 8001540:	f000 fe4d 	bl	80021de <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001544:	2028      	movs	r0, #40	; 0x28
 8001546:	f000 fe66 	bl	8002216 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800154a:	bf00      	nop
 800154c:	3738      	adds	r7, #56	; 0x38
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40020400 	.word	0x40020400
 800155c:	40021400 	.word	0x40021400
 8001560:	40021000 	.word	0x40021000
 8001564:	40021800 	.word	0x40021800
 8001568:	40020800 	.word	0x40020800
 800156c:	40020c00 	.word	0x40020c00

08001570 <HAL_UART_RxCpltCallback>:

/**
 * @brief USART3 Interrupt Handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	/* Call recievePosition*/
	recievePosition();
 8001578:	f000 fbc6 	bl	8001d08 <recievePosition>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief EXTI Handler
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
	/* Call transmitError*/
	transmitError(GPIO_Pin);
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	4618      	mov	r0, r3
 8001592:	f000 fc2f 	bl	8001df4 <transmitError>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a2:	b672      	cpsid	i
}
 80015a4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015a6:	e7fe      	b.n	80015a6 <Error_Handler+0x8>

080015a8 <rotateXY>:
 * and elevation angle specifies vertical rotation (upward if > 0, downward if <= 0).
 *
 * @param azimuth The desired azimuth angle in degrees for X motor rotation.
 * @param elevation The desired elevation angle in degrees for Y motor rotation.
 */
void rotateXY(const double azimuth, const double elevation) {
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	ed87 0b02 	vstr	d0, [r7, #8]
 80015b2:	ed87 1b00 	vstr	d1, [r7]
    // Set X motor direction based on azimuth sign
    if (azimuth > 0) {
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015c2:	f7ff fab9 	bl	8000b38 <__aeabi_dcmpgt>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <rotateXY+0x32>
        HAL_GPIO_WritePin(xDirPort, xDirPin, GPIO_PIN_SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015d2:	486d      	ldr	r0, [pc, #436]	; (8001788 <rotateXY+0x1e0>)
 80015d4:	f001 fba0 	bl	8002d18 <HAL_GPIO_WritePin>
 80015d8:	e005      	b.n	80015e6 <rotateXY+0x3e>
    } else {
        HAL_GPIO_WritePin(xDirPort, xDirPin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015e0:	4869      	ldr	r0, [pc, #420]	; (8001788 <rotateXY+0x1e0>)
 80015e2:	f001 fb99 	bl	8002d18 <HAL_GPIO_WritePin>
    }

    // Set Y motor direction based on elevation sign
    if (elevation > 0) {
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015f2:	f7ff faa1 	bl	8000b38 <__aeabi_dcmpgt>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <rotateXY+0x62>
        HAL_GPIO_WritePin(yDirPort, yDirPin, GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001602:	4861      	ldr	r0, [pc, #388]	; (8001788 <rotateXY+0x1e0>)
 8001604:	f001 fb88 	bl	8002d18 <HAL_GPIO_WritePin>
 8001608:	e005      	b.n	8001616 <rotateXY+0x6e>
    } else {
        HAL_GPIO_WritePin(yDirPort, yDirPin, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001610:	485d      	ldr	r0, [pc, #372]	; (8001788 <rotateXY+0x1e0>)
 8001612:	f001 fb81 	bl	8002d18 <HAL_GPIO_WritePin>
    }

    // Calculate the number of steps required for each motor's rotation
    int stepsX = round((abs(azimuth) / 1.8) * 4);
 8001616:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800161a:	f7ff faad 	bl	8000b78 <__aeabi_d2iz>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	bfb8      	it	lt
 8001624:	425b      	neglt	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff8c 	bl	8000544 <__aeabi_i2d>
 800162c:	a354      	add	r3, pc, #336	; (adr r3, 8001780 <rotateXY+0x1d8>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7ff f91b 	bl	800086c <__aeabi_ddiv>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	4b52      	ldr	r3, [pc, #328]	; (800178c <rotateXY+0x1e4>)
 8001644:	f7fe ffe8 	bl	8000618 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	ec43 2b17 	vmov	d7, r2, r3
 8001650:	eeb0 0a47 	vmov.f32	s0, s14
 8001654:	eef0 0a67 	vmov.f32	s1, s15
 8001658:	f008 fd08 	bl	800a06c <round>
 800165c:	ec53 2b10 	vmov	r2, r3, d0
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f7ff fa88 	bl	8000b78 <__aeabi_d2iz>
 8001668:	4603      	mov	r3, r0
 800166a:	61bb      	str	r3, [r7, #24]
    int stepsY = round((abs(elevation) / 1.8) * 3);
 800166c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001670:	f7ff fa82 	bl	8000b78 <__aeabi_d2iz>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	bfb8      	it	lt
 800167a:	425b      	neglt	r3, r3
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff61 	bl	8000544 <__aeabi_i2d>
 8001682:	a33f      	add	r3, pc, #252	; (adr r3, 8001780 <rotateXY+0x1d8>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7ff f8f0 	bl	800086c <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <rotateXY+0x1e8>)
 800169a:	f7fe ffbd 	bl	8000618 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	ec43 2b17 	vmov	d7, r2, r3
 80016a6:	eeb0 0a47 	vmov.f32	s0, s14
 80016aa:	eef0 0a67 	vmov.f32	s1, s15
 80016ae:	f008 fcdd 	bl	800a06c <round>
 80016b2:	ec53 2b10 	vmov	r2, r3, d0
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f7ff fa5d 	bl	8000b78 <__aeabi_d2iz>
 80016be:	4603      	mov	r3, r0
 80016c0:	617b      	str	r3, [r7, #20]

    // Determine the maximum number of steps between X and Y rotations
    int maxSteps = fmax(stepsX, stepsY);
 80016c2:	69b8      	ldr	r0, [r7, #24]
 80016c4:	f7fe ff3e 	bl	8000544 <__aeabi_i2d>
 80016c8:	4604      	mov	r4, r0
 80016ca:	460d      	mov	r5, r1
 80016cc:	6978      	ldr	r0, [r7, #20]
 80016ce:	f7fe ff39 	bl	8000544 <__aeabi_i2d>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	ec43 2b11 	vmov	d1, r2, r3
 80016da:	ec45 4b10 	vmov	d0, r4, r5
 80016de:	f008 fc73 	bl	8009fc8 <fmax>
 80016e2:	ec53 2b10 	vmov	r2, r3, d0
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f7ff fa45 	bl	8000b78 <__aeabi_d2iz>
 80016ee:	4603      	mov	r3, r0
 80016f0:	613b      	str	r3, [r7, #16]

    // Iterate through the maximum number of steps, controlling both motors
    for (int step = 0; step < maxSteps; step++) {
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	e036      	b.n	8001766 <rotateXY+0x1be>
        if (stop) {
 80016f8:	4b26      	ldr	r3, [pc, #152]	; (8001794 <rotateXY+0x1ec>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d137      	bne.n	8001770 <rotateXY+0x1c8>
            break;  // Break out of the loop if the motor should stop
        }

        // Move in the X direction if there are remaining steps in azimuth
        if (step < stepsX) {
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	429a      	cmp	r2, r3
 8001706:	da11      	bge.n	800172c <rotateXY+0x184>
            HAL_GPIO_WritePin(xStepPort, xStepPin, GPIO_PIN_SET);
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800170e:	4822      	ldr	r0, [pc, #136]	; (8001798 <rotateXY+0x1f0>)
 8001710:	f001 fb02 	bl	8002d18 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001714:	2001      	movs	r0, #1
 8001716:	f000 fc63 	bl	8001fe0 <HAL_Delay>
            HAL_GPIO_WritePin(xStepPort, xStepPin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001720:	481d      	ldr	r0, [pc, #116]	; (8001798 <rotateXY+0x1f0>)
 8001722:	f001 faf9 	bl	8002d18 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001726:	2001      	movs	r0, #1
 8001728:	f000 fc5a 	bl	8001fe0 <HAL_Delay>
        }

        // Move in the Y direction if there are remaining steps in elevation
        if (step < stepsY) {
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	429a      	cmp	r2, r3
 8001732:	da15      	bge.n	8001760 <rotateXY+0x1b8>
            if (stop) {
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <rotateXY+0x1ec>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d11b      	bne.n	8001774 <rotateXY+0x1cc>
                break;  // Break out of the loop if the motor should stop
            }
            HAL_GPIO_WritePin(yStepPort, yStepPin, GPIO_PIN_SET);
 800173c:	2201      	movs	r2, #1
 800173e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001742:	4811      	ldr	r0, [pc, #68]	; (8001788 <rotateXY+0x1e0>)
 8001744:	f001 fae8 	bl	8002d18 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001748:	2001      	movs	r0, #1
 800174a:	f000 fc49 	bl	8001fe0 <HAL_Delay>
            HAL_GPIO_WritePin(yStepPort, yStepPin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <rotateXY+0x1e0>)
 8001756:	f001 fadf 	bl	8002d18 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 800175a:	2001      	movs	r0, #1
 800175c:	f000 fc40 	bl	8001fe0 <HAL_Delay>
    for (int step = 0; step < maxSteps; step++) {
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	3301      	adds	r3, #1
 8001764:	61fb      	str	r3, [r7, #28]
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	429a      	cmp	r2, r3
 800176c:	dbc4      	blt.n	80016f8 <rotateXY+0x150>
        }
    }
}
 800176e:	e002      	b.n	8001776 <rotateXY+0x1ce>
            break;  // Break out of the loop if the motor should stop
 8001770:	bf00      	nop
 8001772:	e000      	b.n	8001776 <rotateXY+0x1ce>
                break;  // Break out of the loop if the motor should stop
 8001774:	bf00      	nop
}
 8001776:	bf00      	nop
 8001778:	3720      	adds	r7, #32
 800177a:	46bd      	mov	sp, r7
 800177c:	bdb0      	pop	{r4, r5, r7, pc}
 800177e:	bf00      	nop
 8001780:	cccccccd 	.word	0xcccccccd
 8001784:	3ffccccc 	.word	0x3ffccccc
 8001788:	40021000 	.word	0x40021000
 800178c:	40100000 	.word	0x40100000
 8001790:	40080000 	.word	0x40080000
 8001794:	20000968 	.word	0x20000968
 8001798:	40021400 	.word	0x40021400

0800179c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <HAL_MspInit+0x4c>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	4a0f      	ldr	r2, [pc, #60]	; (80017e8 <HAL_MspInit+0x4c>)
 80017ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b0:	6453      	str	r3, [r2, #68]	; 0x44
 80017b2:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <HAL_MspInit+0x4c>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_MspInit+0x4c>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <HAL_MspInit+0x4c>)
 80017c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017cc:	6413      	str	r3, [r2, #64]	; 0x40
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_MspInit+0x4c>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800

080017ec <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08e      	sub	sp, #56	; 0x38
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a55      	ldr	r2, [pc, #340]	; (8001960 <HAL_ETH_MspInit+0x174>)
 800180a:	4293      	cmp	r3, r2
 800180c:	f040 80a4 	bne.w	8001958 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
 8001814:	4b53      	ldr	r3, [pc, #332]	; (8001964 <HAL_ETH_MspInit+0x178>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	4a52      	ldr	r2, [pc, #328]	; (8001964 <HAL_ETH_MspInit+0x178>)
 800181a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800181e:	6313      	str	r3, [r2, #48]	; 0x30
 8001820:	4b50      	ldr	r3, [pc, #320]	; (8001964 <HAL_ETH_MspInit+0x178>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001828:	623b      	str	r3, [r7, #32]
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
 8001830:	4b4c      	ldr	r3, [pc, #304]	; (8001964 <HAL_ETH_MspInit+0x178>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	4a4b      	ldr	r2, [pc, #300]	; (8001964 <HAL_ETH_MspInit+0x178>)
 8001836:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800183a:	6313      	str	r3, [r2, #48]	; 0x30
 800183c:	4b49      	ldr	r3, [pc, #292]	; (8001964 <HAL_ETH_MspInit+0x178>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
 800184c:	4b45      	ldr	r3, [pc, #276]	; (8001964 <HAL_ETH_MspInit+0x178>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	4a44      	ldr	r2, [pc, #272]	; (8001964 <HAL_ETH_MspInit+0x178>)
 8001852:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001856:	6313      	str	r3, [r2, #48]	; 0x30
 8001858:	4b42      	ldr	r3, [pc, #264]	; (8001964 <HAL_ETH_MspInit+0x178>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001860:	61bb      	str	r3, [r7, #24]
 8001862:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <HAL_ETH_MspInit+0x178>)
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186c:	4a3d      	ldr	r2, [pc, #244]	; (8001964 <HAL_ETH_MspInit+0x178>)
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	6313      	str	r3, [r2, #48]	; 0x30
 8001874:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <HAL_ETH_MspInit+0x178>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	4b37      	ldr	r3, [pc, #220]	; (8001964 <HAL_ETH_MspInit+0x178>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	4a36      	ldr	r2, [pc, #216]	; (8001964 <HAL_ETH_MspInit+0x178>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6313      	str	r3, [r2, #48]	; 0x30
 8001890:	4b34      	ldr	r3, [pc, #208]	; (8001964 <HAL_ETH_MspInit+0x178>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	4b30      	ldr	r3, [pc, #192]	; (8001964 <HAL_ETH_MspInit+0x178>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	4a2f      	ldr	r2, [pc, #188]	; (8001964 <HAL_ETH_MspInit+0x178>)
 80018a6:	f043 0302 	orr.w	r3, r3, #2
 80018aa:	6313      	str	r3, [r2, #48]	; 0x30
 80018ac:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <HAL_ETH_MspInit+0x178>)
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	4b29      	ldr	r3, [pc, #164]	; (8001964 <HAL_ETH_MspInit+0x178>)
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	4a28      	ldr	r2, [pc, #160]	; (8001964 <HAL_ETH_MspInit+0x178>)
 80018c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c6:	6313      	str	r3, [r2, #48]	; 0x30
 80018c8:	4b26      	ldr	r3, [pc, #152]	; (8001964 <HAL_ETH_MspInit+0x178>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018d4:	2332      	movs	r3, #50	; 0x32
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e0:	2303      	movs	r3, #3
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018e4:	230b      	movs	r3, #11
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ec:	4619      	mov	r1, r3
 80018ee:	481e      	ldr	r0, [pc, #120]	; (8001968 <HAL_ETH_MspInit+0x17c>)
 80018f0:	f001 f866 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018f4:	2386      	movs	r3, #134	; 0x86
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001904:	230b      	movs	r3, #11
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190c:	4619      	mov	r1, r3
 800190e:	4817      	ldr	r0, [pc, #92]	; (800196c <HAL_ETH_MspInit+0x180>)
 8001910:	f001 f856 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001922:	2303      	movs	r3, #3
 8001924:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001926:	230b      	movs	r3, #11
 8001928:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192e:	4619      	mov	r1, r3
 8001930:	480f      	ldr	r0, [pc, #60]	; (8001970 <HAL_ETH_MspInit+0x184>)
 8001932:	f001 f845 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001936:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001948:	230b      	movs	r3, #11
 800194a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800194c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001950:	4619      	mov	r1, r3
 8001952:	4808      	ldr	r0, [pc, #32]	; (8001974 <HAL_ETH_MspInit+0x188>)
 8001954:	f001 f834 	bl	80029c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001958:	bf00      	nop
 800195a:	3738      	adds	r7, #56	; 0x38
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40028000 	.word	0x40028000
 8001964:	40023800 	.word	0x40023800
 8001968:	40020800 	.word	0x40020800
 800196c:	40020000 	.word	0x40020000
 8001970:	40020400 	.word	0x40020400
 8001974:	40021800 	.word	0x40021800

08001978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a1d      	ldr	r2, [pc, #116]	; (8001a0c <HAL_UART_MspInit+0x94>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d134      	bne.n	8001a04 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <HAL_UART_MspInit+0x98>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a1b      	ldr	r2, [pc, #108]	; (8001a10 <HAL_UART_MspInit+0x98>)
 80019a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_UART_MspInit+0x98>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_UART_MspInit+0x98>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <HAL_UART_MspInit+0x98>)
 80019c0:	f043 0308 	orr.w	r3, r3, #8
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_UART_MspInit+0x98>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80019d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019e4:	2307      	movs	r3, #7
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4619      	mov	r1, r3
 80019ee:	4809      	ldr	r0, [pc, #36]	; (8001a14 <HAL_UART_MspInit+0x9c>)
 80019f0:	f000 ffe6 	bl	80029c0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	2027      	movs	r0, #39	; 0x27
 80019fa:	f000 fbf0 	bl	80021de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019fe:	2027      	movs	r0, #39	; 0x27
 8001a00:	f000 fc09 	bl	8002216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a04:	bf00      	nop
 8001a06:	3728      	adds	r7, #40	; 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40004800 	.word	0x40004800
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020c00 	.word	0x40020c00

08001a18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a38:	d13f      	bne.n	8001aba <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <HAL_PCD_MspInit+0xac>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a20      	ldr	r2, [pc, #128]	; (8001ac4 <HAL_PCD_MspInit+0xac>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <HAL_PCD_MspInit+0xac>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a56:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a64:	2303      	movs	r3, #3
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a68:	230a      	movs	r3, #10
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4619      	mov	r1, r3
 8001a72:	4815      	ldr	r0, [pc, #84]	; (8001ac8 <HAL_PCD_MspInit+0xb0>)
 8001a74:	f000 ffa4 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480e      	ldr	r0, [pc, #56]	; (8001ac8 <HAL_PCD_MspInit+0xb0>)
 8001a8e:	f000 ff97 	bl	80029c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_PCD_MspInit+0xac>)
 8001a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a96:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <HAL_PCD_MspInit+0xac>)
 8001a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a9c:	6353      	str	r3, [r2, #52]	; 0x34
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_PCD_MspInit+0xac>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <HAL_PCD_MspInit+0xac>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_PCD_MspInit+0xac>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001aba:	bf00      	nop
 8001abc:	3728      	adds	r7, #40	; 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020000 	.word	0x40020000

08001acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <NMI_Handler+0x4>

08001ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <HardFault_Handler+0x4>

08001ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <MemManage_Handler+0x4>

08001ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <BusFault_Handler+0x4>

08001ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <UsageFault_Handler+0x4>

08001aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b18:	f000 fa42 	bl	8001fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <USART3_IRQHandler+0x10>)
 8001b26:	f001 ffeb 	bl	8003b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000041c 	.word	0x2000041c

08001b34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b3c:	f001 f920 	bl	8002d80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001b40:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b44:	f001 f91c 	bl	8002d80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001b48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b4c:	f001 f918 	bl	8002d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return 1;
 8001b58:	2301      	movs	r3, #1
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_kill>:

int _kill(int pid, int sig)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b6e:	f004 fa39 	bl	8005fe4 <__errno>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2216      	movs	r2, #22
 8001b76:	601a      	str	r2, [r3, #0]
  return -1;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_exit>:

void _exit (int status)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ffe7 	bl	8001b64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b96:	e7fe      	b.n	8001b96 <_exit+0x12>

08001b98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e00a      	b.n	8001bc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001baa:	f3af 8000 	nop.w
 8001bae:	4601      	mov	r1, r0
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60ba      	str	r2, [r7, #8]
 8001bb6:	b2ca      	uxtb	r2, r1
 8001bb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dbf0      	blt.n	8001baa <_read+0x12>
  }

  return len;
 8001bc8:	687b      	ldr	r3, [r7, #4]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e009      	b.n	8001bf8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbf1      	blt.n	8001be4 <_write+0x12>
  }
  return len;
 8001c00:	687b      	ldr	r3, [r7, #4]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_close>:

int _close(int file)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c32:	605a      	str	r2, [r3, #4]
  return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_isatty>:

int _isatty(int file)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <_sbrk+0x5c>)
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <_sbrk+0x60>)
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <_sbrk+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <_sbrk+0x64>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <_sbrk+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d207      	bcs.n	8001cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca4:	f004 f99e 	bl	8005fe4 <__errno>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	220c      	movs	r2, #12
 8001cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	e009      	b.n	8001cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <_sbrk+0x64>)
 8001cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20030000 	.word	0x20030000
 8001cd4:	00000400 	.word	0x00000400
 8001cd8:	20000950 	.word	0x20000950
 8001cdc:	20000ad8 	.word	0x20000ad8

08001ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <SystemInit+0x20>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <SystemInit+0x20>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00
 8001d04:	00000000 	.word	0x00000000

08001d08 <recievePosition>:
  * @note If az = elv = 999.999, it indicates a request to stop tracking,
  *       and both X and Y motors will be stopped.
  * @note If az = elv = 888.888, it indicates a request to return X and Y motors
  *       to their initial positions.
  */
void recievePosition() {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	// Toggle RED LED indicating receiving of data
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001d0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d10:	482f      	ldr	r0, [pc, #188]	; (8001dd0 <recievePosition+0xc8>)
 8001d12:	f001 f81a 	bl	8002d4a <HAL_GPIO_TogglePin>

	// Extract azimuth and elevation from the message
	sscanf((const char*)az_elv, "%lf %lf", &az, &elv);
 8001d16:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <recievePosition+0xcc>)
 8001d18:	4a2f      	ldr	r2, [pc, #188]	; (8001dd8 <recievePosition+0xd0>)
 8001d1a:	4930      	ldr	r1, [pc, #192]	; (8001ddc <recievePosition+0xd4>)
 8001d1c:	4830      	ldr	r0, [pc, #192]	; (8001de0 <recievePosition+0xd8>)
 8001d1e:	f004 f89d 	bl	8005e5c <siscanf>

	// Continue to receive data asynchronously
	HAL_UART_Receive_IT(&huart3, az_elv, 16);
 8001d22:	2210      	movs	r2, #16
 8001d24:	492e      	ldr	r1, [pc, #184]	; (8001de0 <recievePosition+0xd8>)
 8001d26:	482f      	ldr	r0, [pc, #188]	; (8001de4 <recievePosition+0xdc>)
 8001d28:	f001 fec5 	bl	8003ab6 <HAL_UART_Receive_IT>

	// Data received successfully
	pos_recieved = 1;
 8001d2c:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <recievePosition+0xe0>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

	// Check if the received angles indicate a request to stop tracking
	if (az == 999.999 && elv == 999.999) {
 8001d32:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <recievePosition+0xd0>)
 8001d34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d38:	a321      	add	r3, pc, #132	; (adr r3, 8001dc0 <recievePosition+0xb8>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	f7fe fed3 	bl	8000ae8 <__aeabi_dcmpeq>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d014      	beq.n	8001d72 <recievePosition+0x6a>
 8001d48:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <recievePosition+0xcc>)
 8001d4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d4e:	a31c      	add	r3, pc, #112	; (adr r3, 8001dc0 <recievePosition+0xb8>)
 8001d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d54:	f7fe fec8 	bl	8000ae8 <__aeabi_dcmpeq>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <recievePosition+0x6a>
		// Toggle GPIOB Pin 7
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001d5e:	2180      	movs	r1, #128	; 0x80
 8001d60:	481b      	ldr	r0, [pc, #108]	; (8001dd0 <recievePosition+0xc8>)
 8001d62:	f000 fff2 	bl	8002d4a <HAL_GPIO_TogglePin>
		stop = 1;  // Stop both motors
 8001d66:	4b21      	ldr	r3, [pc, #132]	; (8001dec <recievePosition+0xe4>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
		pos_recieved = 0;  // Reset the received flag
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <recievePosition+0xe0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
	}

	// Check if the received angles indicate a request to go back
	if (az == 888.888 && elv == 888.888) {
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <recievePosition+0xd0>)
 8001d74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d78:	a313      	add	r3, pc, #76	; (adr r3, 8001dc8 <recievePosition+0xc0>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	f7fe feb3 	bl	8000ae8 <__aeabi_dcmpeq>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d100      	bne.n	8001d8a <recievePosition+0x82>
		// Toggle GPIOB Pin 7)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
		go_back = 1;  // Set the goBack flag for further processing
		pos_recieved = 0;  // Reset the received flag
	}
}
 8001d88:	e015      	b.n	8001db6 <recievePosition+0xae>
	if (az == 888.888 && elv == 888.888) {
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <recievePosition+0xcc>)
 8001d8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d90:	a30d      	add	r3, pc, #52	; (adr r3, 8001dc8 <recievePosition+0xc0>)
 8001d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d96:	f7fe fea7 	bl	8000ae8 <__aeabi_dcmpeq>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d100      	bne.n	8001da2 <recievePosition+0x9a>
}
 8001da0:	e009      	b.n	8001db6 <recievePosition+0xae>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001da2:	2180      	movs	r1, #128	; 0x80
 8001da4:	480a      	ldr	r0, [pc, #40]	; (8001dd0 <recievePosition+0xc8>)
 8001da6:	f000 ffd0 	bl	8002d4a <HAL_GPIO_TogglePin>
		go_back = 1;  // Set the goBack flag for further processing
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <recievePosition+0xe8>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
		pos_recieved = 0;  // Reset the received flag
 8001db0:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <recievePosition+0xe0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	f3af 8000 	nop.w
 8001dc0:	f3b645a2 	.word	0xf3b645a2
 8001dc4:	408f3ffd 	.word	0x408f3ffd
 8001dc8:	9fbe76c9 	.word	0x9fbe76c9
 8001dcc:	408bc71a 	.word	0x408bc71a
 8001dd0:	40020400 	.word	0x40020400
 8001dd4:	20000960 	.word	0x20000960
 8001dd8:	20000958 	.word	0x20000958
 8001ddc:	0800a118 	.word	0x0800a118
 8001de0:	20000978 	.word	0x20000978
 8001de4:	2000041c 	.word	0x2000041c
 8001de8:	20000970 	.word	0x20000970
 8001dec:	20000968 	.word	0x20000968
 8001df0:	2000096c 	.word	0x2000096c

08001df4 <transmitError>:
  *
  * @param GPIO_Pin The GPIO pin that triggered the external interrupt.
  * @param uart UART handle for communication.
  *
  */
void transmitError(const uint16_t GPIO_Pin) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	80fb      	strh	r3, [r7, #6]

	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);

	if (!ignore){
 8001dfe:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <transmitError+0x9c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d13f      	bne.n	8001e86 <transmitError+0x92>
		// X Motor has reached limit
		if (GPIO_Pin == xLimPin) {
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e0c:	d112      	bne.n	8001e34 <transmitError+0x40>
			// Set stop to true to stop rotation
			//stop = 1;
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001e0e:	2180      	movs	r1, #128	; 0x80
 8001e10:	4820      	ldr	r0, [pc, #128]	; (8001e94 <transmitError+0xa0>)
 8001e12:	f000 ff9a 	bl	8002d4a <HAL_GPIO_TogglePin>
			if (count == 0){
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <transmitError+0xa4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d121      	bne.n	8001e62 <transmitError+0x6e>
				// Transmit "0" to the GUI indicating Motor X has reached limit
				HAL_UART_Transmit(&huart3, (uint8_t*)"0", 1, HAL_MAX_DELAY);
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e22:	2201      	movs	r2, #1
 8001e24:	491d      	ldr	r1, [pc, #116]	; (8001e9c <transmitError+0xa8>)
 8001e26:	481e      	ldr	r0, [pc, #120]	; (8001ea0 <transmitError+0xac>)
 8001e28:	f001 fdba 	bl	80039a0 <HAL_UART_Transmit>
				// Increment count to make sure that the message only sent once
				count = 1;
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <transmitError+0xa4>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e016      	b.n	8001e62 <transmitError+0x6e>
			}
		}
		// Y Motor reached limit
		else if (GPIO_Pin == yLimPin) {
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e3a:	d112      	bne.n	8001e62 <transmitError+0x6e>
			// Set stop to true to stop rotation
			//stop = 1;
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001e3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e40:	4814      	ldr	r0, [pc, #80]	; (8001e94 <transmitError+0xa0>)
 8001e42:	f000 ff82 	bl	8002d4a <HAL_GPIO_TogglePin>
			if (count == 0){
 8001e46:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <transmitError+0xa4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <transmitError+0x6e>
				// Transmit "1" to the GUI indicating Motor Y has reached limit
				HAL_UART_Transmit(&huart3, (uint8_t*)"1", 1, HAL_MAX_DELAY);
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e52:	2201      	movs	r2, #1
 8001e54:	4913      	ldr	r1, [pc, #76]	; (8001ea4 <transmitError+0xb0>)
 8001e56:	4812      	ldr	r0, [pc, #72]	; (8001ea0 <transmitError+0xac>)
 8001e58:	f001 fda2 	bl	80039a0 <HAL_UART_Transmit>
				// Increment count to make sure that the message only sent once
				count = 1;
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <transmitError+0xa4>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]
			}
		}

		if (GPIO_Pin == GPIO_PIN_13){
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e68:	d10d      	bne.n	8001e86 <transmitError+0x92>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	4809      	ldr	r0, [pc, #36]	; (8001e94 <transmitError+0xa0>)
 8001e6e:	f000 ff6c 	bl	8002d4a <HAL_GPIO_TogglePin>
			const uint8_t data[] = "1";
 8001e72:	2331      	movs	r3, #49	; 0x31
 8001e74:	81bb      	strh	r3, [r7, #12]
			HAL_UART_Transmit(&huart3, data, 1, HAL_MAX_DELAY);
 8001e76:	f107 010c 	add.w	r1, r7, #12
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4807      	ldr	r0, [pc, #28]	; (8001ea0 <transmitError+0xac>)
 8001e82:	f001 fd8d 	bl	80039a0 <HAL_UART_Transmit>

		}
	}
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000004 	.word	0x20000004
 8001e94:	40020400 	.word	0x40020400
 8001e98:	20000974 	.word	0x20000974
 8001e9c:	0800a120 	.word	0x0800a120
 8001ea0:	2000041c 	.word	0x2000041c
 8001ea4:	0800a124 	.word	0x0800a124

08001ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eac:	f7ff ff18 	bl	8001ce0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eb0:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eb2:	490d      	ldr	r1, [pc, #52]	; (8001ee8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	; (8001eec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb8:	e002      	b.n	8001ec0 <LoopCopyDataInit>

08001eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ebe:	3304      	adds	r3, #4

08001ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec4:	d3f9      	bcc.n	8001eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ec8:	4c0a      	ldr	r4, [pc, #40]	; (8001ef4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ecc:	e001      	b.n	8001ed2 <LoopFillZerobss>

08001ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed0:	3204      	adds	r2, #4

08001ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed4:	d3fb      	bcc.n	8001ece <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ed6:	f004 f88b 	bl	8005ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eda:	f7ff f899 	bl	8001010 <main>
  bx  lr    
 8001ede:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ee0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001eec:	0800a5a4 	.word	0x0800a5a4
  ldr r2, =_sbss
 8001ef0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ef4:	20000ad8 	.word	0x20000ad8

08001ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef8:	e7fe      	b.n	8001ef8 <ADC_IRQHandler>
	...

08001efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_Init+0x40>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <HAL_Init+0x40>)
 8001f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_Init+0x40>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <HAL_Init+0x40>)
 8001f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_Init+0x40>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <HAL_Init+0x40>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f000 f94f 	bl	80021c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f000 f808 	bl	8001f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f30:	f7ff fc34 	bl	800179c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023c00 	.word	0x40023c00

08001f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_InitTick+0x54>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_InitTick+0x58>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f967 	bl	8002232 <HAL_SYSTICK_Config>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00e      	b.n	8001f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b0f      	cmp	r3, #15
 8001f72:	d80a      	bhi.n	8001f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f74:	2200      	movs	r2, #0
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	f000 f92f 	bl	80021de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f80:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <HAL_InitTick+0x5c>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000000 	.word	0x20000000
 8001f98:	2000000c 	.word	0x2000000c
 8001f9c:	20000008 	.word	0x20000008

08001fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_IncTick+0x20>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	2000000c 	.word	0x2000000c
 8001fc4:	20000988 	.word	0x20000988

08001fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_GetTick+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000988 	.word	0x20000988

08001fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe8:	f7ff ffee 	bl	8001fc8 <HAL_GetTick>
 8001fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff8:	d005      	beq.n	8002006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_Delay+0x44>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002006:	bf00      	nop
 8002008:	f7ff ffde 	bl	8001fc8 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d8f7      	bhi.n	8002008 <HAL_Delay+0x28>
  {
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	2000000c 	.word	0x2000000c

08002028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002044:	4013      	ands	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205a:	4a04      	ldr	r2, [pc, #16]	; (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	60d3      	str	r3, [r2, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <__NVIC_GetPriorityGrouping+0x18>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	f003 0307 	and.w	r3, r3, #7
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	db0b      	blt.n	80020b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	f003 021f 	and.w	r2, r3, #31
 80020a4:	4907      	ldr	r1, [pc, #28]	; (80020c4 <__NVIC_EnableIRQ+0x38>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	2001      	movs	r0, #1
 80020ae:	fa00 f202 	lsl.w	r2, r0, r2
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000e100 	.word	0xe000e100

080020c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	db0a      	blt.n	80020f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	490c      	ldr	r1, [pc, #48]	; (8002114 <__NVIC_SetPriority+0x4c>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	440b      	add	r3, r1
 80020ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f0:	e00a      	b.n	8002108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <__NVIC_SetPriority+0x50>)
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3b04      	subs	r3, #4
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	440b      	add	r3, r1
 8002106:	761a      	strb	r2, [r3, #24]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f1c3 0307 	rsb	r3, r3, #7
 8002136:	2b04      	cmp	r3, #4
 8002138:	bf28      	it	cs
 800213a:	2304      	movcs	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3304      	adds	r3, #4
 8002142:	2b06      	cmp	r3, #6
 8002144:	d902      	bls.n	800214c <NVIC_EncodePriority+0x30>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3b03      	subs	r3, #3
 800214a:	e000      	b.n	800214e <NVIC_EncodePriority+0x32>
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	f04f 32ff 	mov.w	r2, #4294967295
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	f04f 31ff 	mov.w	r1, #4294967295
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	43d9      	mvns	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	4313      	orrs	r3, r2
         );
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002194:	d301      	bcc.n	800219a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002196:	2301      	movs	r3, #1
 8002198:	e00f      	b.n	80021ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <SysTick_Config+0x40>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a2:	210f      	movs	r1, #15
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295
 80021a8:	f7ff ff8e 	bl	80020c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <SysTick_Config+0x40>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b2:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <SysTick_Config+0x40>)
 80021b4:	2207      	movs	r2, #7
 80021b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	e000e010 	.word	0xe000e010

080021c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ff29 	bl	8002028 <__NVIC_SetPriorityGrouping>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f0:	f7ff ff3e 	bl	8002070 <__NVIC_GetPriorityGrouping>
 80021f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f7ff ff8e 	bl	800211c <NVIC_EncodePriority>
 8002200:	4602      	mov	r2, r0
 8002202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff5d 	bl	80020c8 <__NVIC_SetPriority>
}
 800220e:	bf00      	nop
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff31 	bl	800208c <__NVIC_EnableIRQ>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ffa2 	bl	8002184 <SysTick_Config>
 8002240:	4603      	mov	r3, r0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b084      	sub	sp, #16
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002258:	f7ff feb6 	bl	8001fc8 <HAL_GetTick>
 800225c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d008      	beq.n	800227c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2280      	movs	r2, #128	; 0x80
 800226e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e052      	b.n	8002322 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0216 	bic.w	r2, r2, #22
 800228a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800229a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d103      	bne.n	80022ac <HAL_DMA_Abort+0x62>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d007      	beq.n	80022bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0208 	bic.w	r2, r2, #8
 80022ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022cc:	e013      	b.n	80022f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ce:	f7ff fe7b 	bl	8001fc8 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b05      	cmp	r3, #5
 80022da:	d90c      	bls.n	80022f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2203      	movs	r2, #3
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e015      	b.n	8002322 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1e4      	bne.n	80022ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002308:	223f      	movs	r2, #63	; 0x3f
 800230a:	409a      	lsls	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d004      	beq.n	8002348 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2280      	movs	r2, #128	; 0x80
 8002342:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e00c      	b.n	8002362 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2205      	movs	r2, #5
 800234c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e06c      	b.n	800245c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002388:	2b00      	cmp	r3, #0
 800238a:	d106      	bne.n	800239a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2223      	movs	r2, #35	; 0x23
 8002390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff fa29 	bl	80017ec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	4b31      	ldr	r3, [pc, #196]	; (8002464 <HAL_ETH_Init+0xf4>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a30      	ldr	r2, [pc, #192]	; (8002464 <HAL_ETH_Init+0xf4>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <HAL_ETH_Init+0xf4>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80023b6:	4b2c      	ldr	r3, [pc, #176]	; (8002468 <HAL_ETH_Init+0xf8>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4a2b      	ldr	r2, [pc, #172]	; (8002468 <HAL_ETH_Init+0xf8>)
 80023bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023c0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80023c2:	4b29      	ldr	r3, [pc, #164]	; (8002468 <HAL_ETH_Init+0xf8>)
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	4927      	ldr	r1, [pc, #156]	; (8002468 <HAL_ETH_Init+0xf8>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80023d0:	4b25      	ldr	r3, [pc, #148]	; (8002468 <HAL_ETH_Init+0xf8>)
 80023d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023ec:	f7ff fdec 	bl	8001fc8 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023f2:	e011      	b.n	8002418 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80023f4:	f7ff fde8 	bl	8001fc8 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002402:	d909      	bls.n	8002418 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2204      	movs	r2, #4
 8002408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	22e0      	movs	r2, #224	; 0xe0
 8002410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e021      	b.n	800245c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1e4      	bne.n	80023f4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f958 	bl	80026e0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f9ff 	bl	8002834 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fa55 	bl	80028e6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	461a      	mov	r2, r3
 8002442:	2100      	movs	r1, #0
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f9bd 	bl	80027c4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2210      	movs	r2, #16
 8002456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40023800 	.word	0x40023800
 8002468:	40013800 	.word	0x40013800

0800246c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4b51      	ldr	r3, [pc, #324]	; (80025c8 <ETH_SetMACConfig+0x15c>)
 8002482:	4013      	ands	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	7c1b      	ldrb	r3, [r3, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d102      	bne.n	8002494 <ETH_SetMACConfig+0x28>
 800248e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002492:	e000      	b.n	8002496 <ETH_SetMACConfig+0x2a>
 8002494:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	7c5b      	ldrb	r3, [r3, #17]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <ETH_SetMACConfig+0x38>
 800249e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024a2:	e000      	b.n	80024a6 <ETH_SetMACConfig+0x3a>
 80024a4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80024a6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80024ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	7fdb      	ldrb	r3, [r3, #31]
 80024b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80024b4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	7f92      	ldrb	r2, [r2, #30]
 80024c0:	2a00      	cmp	r2, #0
 80024c2:	d102      	bne.n	80024ca <ETH_SetMACConfig+0x5e>
 80024c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024c8:	e000      	b.n	80024cc <ETH_SetMACConfig+0x60>
 80024ca:	2200      	movs	r2, #0
                        macconf->Speed |
 80024cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	7f1b      	ldrb	r3, [r3, #28]
 80024d2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024d4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	791b      	ldrb	r3, [r3, #4]
 80024e0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80024e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80024ea:	2a00      	cmp	r2, #0
 80024ec:	d102      	bne.n	80024f4 <ETH_SetMACConfig+0x88>
 80024ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f2:	e000      	b.n	80024f6 <ETH_SetMACConfig+0x8a>
 80024f4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	7bdb      	ldrb	r3, [r3, #15]
 80024fc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024fe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002504:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800250c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800250e:	4313      	orrs	r3, r2
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002526:	2001      	movs	r0, #1
 8002528:	f7ff fd5a 	bl	8001fe0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002542:	4013      	ands	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800254a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002552:	2a00      	cmp	r2, #0
 8002554:	d101      	bne.n	800255a <ETH_SetMACConfig+0xee>
 8002556:	2280      	movs	r2, #128	; 0x80
 8002558:	e000      	b.n	800255c <ETH_SetMACConfig+0xf0>
 800255a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800255c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002562:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800256a:	2a01      	cmp	r2, #1
 800256c:	d101      	bne.n	8002572 <ETH_SetMACConfig+0x106>
 800256e:	2208      	movs	r2, #8
 8002570:	e000      	b.n	8002574 <ETH_SetMACConfig+0x108>
 8002572:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002574:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800257c:	2a01      	cmp	r2, #1
 800257e:	d101      	bne.n	8002584 <ETH_SetMACConfig+0x118>
 8002580:	2204      	movs	r2, #4
 8002582:	e000      	b.n	8002586 <ETH_SetMACConfig+0x11a>
 8002584:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002586:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800258e:	2a01      	cmp	r2, #1
 8002590:	d101      	bne.n	8002596 <ETH_SetMACConfig+0x12a>
 8002592:	2202      	movs	r2, #2
 8002594:	e000      	b.n	8002598 <ETH_SetMACConfig+0x12c>
 8002596:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002598:	4313      	orrs	r3, r2
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b0:	2001      	movs	r0, #1
 80025b2:	f7ff fd15 	bl	8001fe0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	619a      	str	r2, [r3, #24]
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	ff20810f 	.word	0xff20810f

080025cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <ETH_SetDMAConfig+0x110>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	7b1b      	ldrb	r3, [r3, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d102      	bne.n	80025f8 <ETH_SetDMAConfig+0x2c>
 80025f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025f6:	e000      	b.n	80025fa <ETH_SetDMAConfig+0x2e>
 80025f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	7b5b      	ldrb	r3, [r3, #13]
 80025fe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002600:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	7f52      	ldrb	r2, [r2, #29]
 8002606:	2a00      	cmp	r2, #0
 8002608:	d102      	bne.n	8002610 <ETH_SetDMAConfig+0x44>
 800260a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800260e:	e000      	b.n	8002612 <ETH_SetDMAConfig+0x46>
 8002610:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002612:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	7b9b      	ldrb	r3, [r3, #14]
 8002618:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800261a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002620:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	7f1b      	ldrb	r3, [r3, #28]
 8002626:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002628:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	7f9b      	ldrb	r3, [r3, #30]
 800262e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002630:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002636:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800263e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002640:	4313      	orrs	r3, r2
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002650:	461a      	mov	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002662:	2001      	movs	r0, #1
 8002664:	f7ff fcbc 	bl	8001fe0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002670:	461a      	mov	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	791b      	ldrb	r3, [r3, #4]
 800267a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002680:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002686:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800268c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002694:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002696:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800269e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80026a4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026b2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c0:	2001      	movs	r0, #1
 80026c2:	f7ff fc8d 	bl	8001fe0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ce:	461a      	mov	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6013      	str	r3, [r2, #0]
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	f8de3f23 	.word	0xf8de3f23

080026e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b0a6      	sub	sp, #152	; 0x98
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80026e8:	2301      	movs	r3, #1
 80026ea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80026f4:	2300      	movs	r3, #0
 80026f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80026fe:	2301      	movs	r3, #1
 8002700:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800270a:	2301      	movs	r3, #1
 800270c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002710:	2300      	movs	r3, #0
 8002712:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002716:	2300      	movs	r3, #0
 8002718:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800271c:	2300      	movs	r3, #0
 800271e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002720:	2300      	movs	r3, #0
 8002722:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002726:	2300      	movs	r3, #0
 8002728:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800272a:	2300      	movs	r3, #0
 800272c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002736:	2300      	movs	r3, #0
 8002738:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002742:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002746:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002748:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800274c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002754:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002758:	4619      	mov	r1, r3
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff fe86 	bl	800246c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002760:	2301      	movs	r3, #1
 8002762:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002764:	2301      	movs	r3, #1
 8002766:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800276e:	2301      	movs	r3, #1
 8002770:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002776:	2300      	movs	r3, #0
 8002778:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002782:	2300      	movs	r3, #0
 8002784:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002786:	2301      	movs	r3, #1
 8002788:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800278c:	2301      	movs	r3, #1
 800278e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002794:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002796:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800279a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800279c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027a0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80027a2:	2301      	movs	r3, #1
 80027a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80027b0:	f107 0308 	add.w	r3, r7, #8
 80027b4:	4619      	mov	r1, r3
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ff08 	bl	80025cc <ETH_SetDMAConfig>
}
 80027bc:	bf00      	nop
 80027be:	3798      	adds	r7, #152	; 0x98
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3305      	adds	r3, #5
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	3204      	adds	r2, #4
 80027dc:	7812      	ldrb	r2, [r2, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <ETH_MACAddressConfig+0x68>)
 80027e6:	4413      	add	r3, r2
 80027e8:	461a      	mov	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3303      	adds	r3, #3
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	061a      	lsls	r2, r3, #24
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3302      	adds	r3, #2
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	041b      	lsls	r3, r3, #16
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3301      	adds	r3, #1
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	4313      	orrs	r3, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	7812      	ldrb	r2, [r2, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <ETH_MACAddressConfig+0x6c>)
 8002816:	4413      	add	r3, r2
 8002818:	461a      	mov	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	6013      	str	r3, [r2, #0]
}
 800281e:	bf00      	nop
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40028040 	.word	0x40028040
 8002830:	40028044 	.word	0x40028044

08002834 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	e03e      	b.n	80028c0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68d9      	ldr	r1, [r3, #12]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	440b      	add	r3, r1
 8002852:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2200      	movs	r2, #0
 800285e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2200      	movs	r2, #0
 800286a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	3206      	adds	r2, #6
 8002874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d80c      	bhi.n	80028a4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68d9      	ldr	r1, [r3, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	461a      	mov	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	e004      	b.n	80028ae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	461a      	mov	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3301      	adds	r3, #1
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d9bd      	bls.n	8002842 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d8:	611a      	str	r2, [r3, #16]
}
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b085      	sub	sp, #20
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	e046      	b.n	8002982 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6919      	ldr	r1, [r3, #16]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	440b      	add	r3, r1
 8002904:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2200      	movs	r2, #0
 8002910:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2200      	movs	r2, #0
 800291c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2200      	movs	r2, #0
 8002922:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2200      	movs	r2, #0
 8002928:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002930:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002938:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002946:	68b9      	ldr	r1, [r7, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	3212      	adds	r2, #18
 800294e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d80c      	bhi.n	8002972 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6919      	ldr	r1, [r3, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	461a      	mov	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	60da      	str	r2, [r3, #12]
 8002970:	e004      	b.n	800297c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	461a      	mov	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3301      	adds	r3, #1
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d9b5      	bls.n	80028f4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b2:	60da      	str	r2, [r3, #12]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	e177      	b.n	8002ccc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029dc:	2201      	movs	r2, #1
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	f040 8166 	bne.w	8002cc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d005      	beq.n	8002a12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d130      	bne.n	8002a74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a48:	2201      	movs	r2, #1
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 0201 	and.w	r2, r3, #1
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d017      	beq.n	8002ab0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d123      	bne.n	8002b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	08da      	lsrs	r2, r3, #3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3208      	adds	r2, #8
 8002ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	08da      	lsrs	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3208      	adds	r2, #8
 8002afe:	69b9      	ldr	r1, [r7, #24]
 8002b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	2203      	movs	r2, #3
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0203 	and.w	r2, r3, #3
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80c0 	beq.w	8002cc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	4b66      	ldr	r3, [pc, #408]	; (8002ce4 <HAL_GPIO_Init+0x324>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	4a65      	ldr	r2, [pc, #404]	; (8002ce4 <HAL_GPIO_Init+0x324>)
 8002b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b54:	6453      	str	r3, [r2, #68]	; 0x44
 8002b56:	4b63      	ldr	r3, [pc, #396]	; (8002ce4 <HAL_GPIO_Init+0x324>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b62:	4a61      	ldr	r2, [pc, #388]	; (8002ce8 <HAL_GPIO_Init+0x328>)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	089b      	lsrs	r3, r3, #2
 8002b68:	3302      	adds	r3, #2
 8002b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	220f      	movs	r2, #15
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a58      	ldr	r2, [pc, #352]	; (8002cec <HAL_GPIO_Init+0x32c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d037      	beq.n	8002bfe <HAL_GPIO_Init+0x23e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a57      	ldr	r2, [pc, #348]	; (8002cf0 <HAL_GPIO_Init+0x330>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d031      	beq.n	8002bfa <HAL_GPIO_Init+0x23a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a56      	ldr	r2, [pc, #344]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d02b      	beq.n	8002bf6 <HAL_GPIO_Init+0x236>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a55      	ldr	r2, [pc, #340]	; (8002cf8 <HAL_GPIO_Init+0x338>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d025      	beq.n	8002bf2 <HAL_GPIO_Init+0x232>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a54      	ldr	r2, [pc, #336]	; (8002cfc <HAL_GPIO_Init+0x33c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01f      	beq.n	8002bee <HAL_GPIO_Init+0x22e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a53      	ldr	r2, [pc, #332]	; (8002d00 <HAL_GPIO_Init+0x340>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d019      	beq.n	8002bea <HAL_GPIO_Init+0x22a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a52      	ldr	r2, [pc, #328]	; (8002d04 <HAL_GPIO_Init+0x344>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <HAL_GPIO_Init+0x226>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a51      	ldr	r2, [pc, #324]	; (8002d08 <HAL_GPIO_Init+0x348>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00d      	beq.n	8002be2 <HAL_GPIO_Init+0x222>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a50      	ldr	r2, [pc, #320]	; (8002d0c <HAL_GPIO_Init+0x34c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d007      	beq.n	8002bde <HAL_GPIO_Init+0x21e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a4f      	ldr	r2, [pc, #316]	; (8002d10 <HAL_GPIO_Init+0x350>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <HAL_GPIO_Init+0x21a>
 8002bd6:	2309      	movs	r3, #9
 8002bd8:	e012      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002bda:	230a      	movs	r3, #10
 8002bdc:	e010      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002bde:	2308      	movs	r3, #8
 8002be0:	e00e      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002be2:	2307      	movs	r3, #7
 8002be4:	e00c      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002be6:	2306      	movs	r3, #6
 8002be8:	e00a      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002bea:	2305      	movs	r3, #5
 8002bec:	e008      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002bee:	2304      	movs	r3, #4
 8002bf0:	e006      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e004      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e002      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	f002 0203 	and.w	r2, r2, #3
 8002c06:	0092      	lsls	r2, r2, #2
 8002c08:	4093      	lsls	r3, r2
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c10:	4935      	ldr	r1, [pc, #212]	; (8002ce8 <HAL_GPIO_Init+0x328>)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	3302      	adds	r3, #2
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c1e:	4b3d      	ldr	r3, [pc, #244]	; (8002d14 <HAL_GPIO_Init+0x354>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c42:	4a34      	ldr	r2, [pc, #208]	; (8002d14 <HAL_GPIO_Init+0x354>)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c48:	4b32      	ldr	r3, [pc, #200]	; (8002d14 <HAL_GPIO_Init+0x354>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c6c:	4a29      	ldr	r2, [pc, #164]	; (8002d14 <HAL_GPIO_Init+0x354>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c72:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <HAL_GPIO_Init+0x354>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c96:	4a1f      	ldr	r2, [pc, #124]	; (8002d14 <HAL_GPIO_Init+0x354>)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c9c:	4b1d      	ldr	r3, [pc, #116]	; (8002d14 <HAL_GPIO_Init+0x354>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cc0:	4a14      	ldr	r2, [pc, #80]	; (8002d14 <HAL_GPIO_Init+0x354>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	61fb      	str	r3, [r7, #28]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2b0f      	cmp	r3, #15
 8002cd0:	f67f ae84 	bls.w	80029dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop
 8002cd8:	3724      	adds	r7, #36	; 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40013800 	.word	0x40013800
 8002cec:	40020000 	.word	0x40020000
 8002cf0:	40020400 	.word	0x40020400
 8002cf4:	40020800 	.word	0x40020800
 8002cf8:	40020c00 	.word	0x40020c00
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40021400 	.word	0x40021400
 8002d04:	40021800 	.word	0x40021800
 8002d08:	40021c00 	.word	0x40021c00
 8002d0c:	40022000 	.word	0x40022000
 8002d10:	40022400 	.word	0x40022400
 8002d14:	40013c00 	.word	0x40013c00

08002d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	807b      	strh	r3, [r7, #2]
 8002d24:	4613      	mov	r3, r2
 8002d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d28:	787b      	ldrb	r3, [r7, #1]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d2e:	887a      	ldrh	r2, [r7, #2]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d34:	e003      	b.n	8002d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d36:	887b      	ldrh	r3, [r7, #2]
 8002d38:	041a      	lsls	r2, r3, #16
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	619a      	str	r2, [r3, #24]
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b085      	sub	sp, #20
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	460b      	mov	r3, r1
 8002d54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d5c:	887a      	ldrh	r2, [r7, #2]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4013      	ands	r3, r2
 8002d62:	041a      	lsls	r2, r3, #16
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	43d9      	mvns	r1, r3
 8002d68:	887b      	ldrh	r3, [r7, #2]
 8002d6a:	400b      	ands	r3, r1
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	619a      	str	r2, [r3, #24]
}
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d006      	beq.n	8002da4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d96:	4a05      	ldr	r2, [pc, #20]	; (8002dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fbf0 	bl	8001584 <HAL_GPIO_EXTI_Callback>
  }
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40013c00 	.word	0x40013c00

08002db0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e101      	b.n	8002fc6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d106      	bne.n	8002de2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7fe fe1b 	bl	8001a18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2203      	movs	r2, #3
 8002de6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002df0:	d102      	bne.n	8002df8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f001 fe39 	bl	8004a74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	7c1a      	ldrb	r2, [r3, #16]
 8002e0a:	f88d 2000 	strb.w	r2, [sp]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e12:	f001 fdcb 	bl	80049ac <USB_CoreInit>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0ce      	b.n	8002fc6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f001 fe31 	bl	8004a96 <USB_SetCurrentMode>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e0bf      	b.n	8002fc6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e46:	2300      	movs	r3, #0
 8002e48:	73fb      	strb	r3, [r7, #15]
 8002e4a:	e04a      	b.n	8002ee2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	3315      	adds	r3, #21
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3314      	adds	r3, #20
 8002e70:	7bfa      	ldrb	r2, [r7, #15]
 8002e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	b298      	uxth	r0, r3
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	332e      	adds	r3, #46	; 0x2e
 8002e88:	4602      	mov	r2, r0
 8002e8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	3318      	adds	r3, #24
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	331c      	adds	r3, #28
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002eb4:	7bfa      	ldrb	r2, [r7, #15]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3320      	adds	r3, #32
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ec8:	7bfa      	ldrb	r2, [r7, #15]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3324      	adds	r3, #36	; 0x24
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	791b      	ldrb	r3, [r3, #4]
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d3af      	bcc.n	8002e4c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eec:	2300      	movs	r3, #0
 8002eee:	73fb      	strb	r3, [r7, #15]
 8002ef0:	e044      	b.n	8002f7c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ef2:	7bfa      	ldrb	r2, [r7, #15]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f08:	7bfa      	ldrb	r2, [r7, #15]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002f1a:	7bfa      	ldrb	r2, [r7, #15]
 8002f1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f1e:	7bfa      	ldrb	r2, [r7, #15]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f34:	7bfa      	ldrb	r2, [r7, #15]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f4a:	7bfa      	ldrb	r2, [r7, #15]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	791b      	ldrb	r3, [r3, #4]
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d3b5      	bcc.n	8002ef2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	7c1a      	ldrb	r2, [r3, #16]
 8002f8e:	f88d 2000 	strb.w	r2, [sp]
 8002f92:	3304      	adds	r3, #4
 8002f94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f96:	f001 fdcb 	bl	8004b30 <USB_DevInit>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e00c      	b.n	8002fc6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f001 ff93 	bl	8004eea <USB_DevDisconnect>

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e267      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d075      	beq.n	80030da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fee:	4b88      	ldr	r3, [pc, #544]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d00c      	beq.n	8003014 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ffa:	4b85      	ldr	r3, [pc, #532]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003002:	2b08      	cmp	r3, #8
 8003004:	d112      	bne.n	800302c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003006:	4b82      	ldr	r3, [pc, #520]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800300e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003012:	d10b      	bne.n	800302c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003014:	4b7e      	ldr	r3, [pc, #504]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d05b      	beq.n	80030d8 <HAL_RCC_OscConfig+0x108>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d157      	bne.n	80030d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e242      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003034:	d106      	bne.n	8003044 <HAL_RCC_OscConfig+0x74>
 8003036:	4b76      	ldr	r3, [pc, #472]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a75      	ldr	r2, [pc, #468]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e01d      	b.n	8003080 <HAL_RCC_OscConfig+0xb0>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0x98>
 800304e:	4b70      	ldr	r3, [pc, #448]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a6f      	ldr	r2, [pc, #444]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4b6d      	ldr	r3, [pc, #436]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a6c      	ldr	r2, [pc, #432]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e00b      	b.n	8003080 <HAL_RCC_OscConfig+0xb0>
 8003068:	4b69      	ldr	r3, [pc, #420]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a68      	ldr	r2, [pc, #416]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 800306e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	4b66      	ldr	r3, [pc, #408]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a65      	ldr	r2, [pc, #404]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 800307a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800307e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d013      	beq.n	80030b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fe ff9e 	bl	8001fc8 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003090:	f7fe ff9a 	bl	8001fc8 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b64      	cmp	r3, #100	; 0x64
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e207      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	4b5b      	ldr	r3, [pc, #364]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0xc0>
 80030ae:	e014      	b.n	80030da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7fe ff8a 	bl	8001fc8 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b8:	f7fe ff86 	bl	8001fc8 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	; 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e1f3      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ca:	4b51      	ldr	r3, [pc, #324]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0xe8>
 80030d6:	e000      	b.n	80030da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d063      	beq.n	80031ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030e6:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00b      	beq.n	800310a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030f2:	4b47      	ldr	r3, [pc, #284]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d11c      	bne.n	8003138 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030fe:	4b44      	ldr	r3, [pc, #272]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d116      	bne.n	8003138 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310a:	4b41      	ldr	r3, [pc, #260]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_RCC_OscConfig+0x152>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d001      	beq.n	8003122 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e1c7      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003122:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4937      	ldr	r1, [pc, #220]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003136:	e03a      	b.n	80031ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d020      	beq.n	8003182 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003140:	4b34      	ldr	r3, [pc, #208]	; (8003214 <HAL_RCC_OscConfig+0x244>)
 8003142:	2201      	movs	r2, #1
 8003144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003146:	f7fe ff3f 	bl	8001fc8 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314e:	f7fe ff3b 	bl	8001fc8 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e1a8      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003160:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316c:	4b28      	ldr	r3, [pc, #160]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4925      	ldr	r1, [pc, #148]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 800317c:	4313      	orrs	r3, r2
 800317e:	600b      	str	r3, [r1, #0]
 8003180:	e015      	b.n	80031ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003182:	4b24      	ldr	r3, [pc, #144]	; (8003214 <HAL_RCC_OscConfig+0x244>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fe ff1e 	bl	8001fc8 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003190:	f7fe ff1a 	bl	8001fc8 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e187      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a2:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d036      	beq.n	8003228 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d016      	beq.n	80031f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <HAL_RCC_OscConfig+0x248>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c8:	f7fe fefe 	bl	8001fc8 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d0:	f7fe fefa 	bl	8001fc8 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e167      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 80031e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x200>
 80031ee:	e01b      	b.n	8003228 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f0:	4b09      	ldr	r3, [pc, #36]	; (8003218 <HAL_RCC_OscConfig+0x248>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f6:	f7fe fee7 	bl	8001fc8 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031fc:	e00e      	b.n	800321c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031fe:	f7fe fee3 	bl	8001fc8 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d907      	bls.n	800321c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e150      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
 8003210:	40023800 	.word	0x40023800
 8003214:	42470000 	.word	0x42470000
 8003218:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321c:	4b88      	ldr	r3, [pc, #544]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 800321e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1ea      	bne.n	80031fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8097 	beq.w	8003364 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003236:	2300      	movs	r3, #0
 8003238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323a:	4b81      	ldr	r3, [pc, #516]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10f      	bne.n	8003266 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	4b7d      	ldr	r3, [pc, #500]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	4a7c      	ldr	r2, [pc, #496]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 8003250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003254:	6413      	str	r3, [r2, #64]	; 0x40
 8003256:	4b7a      	ldr	r3, [pc, #488]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003262:	2301      	movs	r3, #1
 8003264:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003266:	4b77      	ldr	r3, [pc, #476]	; (8003444 <HAL_RCC_OscConfig+0x474>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d118      	bne.n	80032a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003272:	4b74      	ldr	r3, [pc, #464]	; (8003444 <HAL_RCC_OscConfig+0x474>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a73      	ldr	r2, [pc, #460]	; (8003444 <HAL_RCC_OscConfig+0x474>)
 8003278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327e:	f7fe fea3 	bl	8001fc8 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003286:	f7fe fe9f 	bl	8001fc8 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e10c      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003298:	4b6a      	ldr	r3, [pc, #424]	; (8003444 <HAL_RCC_OscConfig+0x474>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d106      	bne.n	80032ba <HAL_RCC_OscConfig+0x2ea>
 80032ac:	4b64      	ldr	r3, [pc, #400]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	4a63      	ldr	r2, [pc, #396]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	6713      	str	r3, [r2, #112]	; 0x70
 80032b8:	e01c      	b.n	80032f4 <HAL_RCC_OscConfig+0x324>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b05      	cmp	r3, #5
 80032c0:	d10c      	bne.n	80032dc <HAL_RCC_OscConfig+0x30c>
 80032c2:	4b5f      	ldr	r3, [pc, #380]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	4a5e      	ldr	r2, [pc, #376]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032c8:	f043 0304 	orr.w	r3, r3, #4
 80032cc:	6713      	str	r3, [r2, #112]	; 0x70
 80032ce:	4b5c      	ldr	r3, [pc, #368]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	4a5b      	ldr	r2, [pc, #364]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6713      	str	r3, [r2, #112]	; 0x70
 80032da:	e00b      	b.n	80032f4 <HAL_RCC_OscConfig+0x324>
 80032dc:	4b58      	ldr	r3, [pc, #352]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	4a57      	ldr	r2, [pc, #348]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032e2:	f023 0301 	bic.w	r3, r3, #1
 80032e6:	6713      	str	r3, [r2, #112]	; 0x70
 80032e8:	4b55      	ldr	r3, [pc, #340]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	4a54      	ldr	r2, [pc, #336]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032ee:	f023 0304 	bic.w	r3, r3, #4
 80032f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d015      	beq.n	8003328 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fc:	f7fe fe64 	bl	8001fc8 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003302:	e00a      	b.n	800331a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003304:	f7fe fe60 	bl	8001fc8 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e0cb      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331a:	4b49      	ldr	r3, [pc, #292]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0ee      	beq.n	8003304 <HAL_RCC_OscConfig+0x334>
 8003326:	e014      	b.n	8003352 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003328:	f7fe fe4e 	bl	8001fc8 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332e:	e00a      	b.n	8003346 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003330:	f7fe fe4a 	bl	8001fc8 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f241 3288 	movw	r2, #5000	; 0x1388
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e0b5      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003346:	4b3e      	ldr	r3, [pc, #248]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1ee      	bne.n	8003330 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003352:	7dfb      	ldrb	r3, [r7, #23]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d105      	bne.n	8003364 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003358:	4b39      	ldr	r3, [pc, #228]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	4a38      	ldr	r2, [pc, #224]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 800335e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003362:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80a1 	beq.w	80034b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800336e:	4b34      	ldr	r3, [pc, #208]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b08      	cmp	r3, #8
 8003378:	d05c      	beq.n	8003434 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d141      	bne.n	8003406 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003382:	4b31      	ldr	r3, [pc, #196]	; (8003448 <HAL_RCC_OscConfig+0x478>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fe fe1e 	bl	8001fc8 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003390:	f7fe fe1a 	bl	8001fc8 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e087      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a2:	4b27      	ldr	r3, [pc, #156]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	019b      	lsls	r3, r3, #6
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	085b      	lsrs	r3, r3, #1
 80033c6:	3b01      	subs	r3, #1
 80033c8:	041b      	lsls	r3, r3, #16
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	491b      	ldr	r1, [pc, #108]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d8:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <HAL_RCC_OscConfig+0x478>)
 80033da:	2201      	movs	r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033de:	f7fe fdf3 	bl	8001fc8 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e6:	f7fe fdef 	bl	8001fc8 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e05c      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f8:	4b11      	ldr	r3, [pc, #68]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x416>
 8003404:	e054      	b.n	80034b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003406:	4b10      	ldr	r3, [pc, #64]	; (8003448 <HAL_RCC_OscConfig+0x478>)
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7fe fddc 	bl	8001fc8 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003414:	f7fe fdd8 	bl	8001fc8 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e045      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x444>
 8003432:	e03d      	b.n	80034b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d107      	bne.n	800344c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e038      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
 8003440:	40023800 	.word	0x40023800
 8003444:	40007000 	.word	0x40007000
 8003448:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800344c:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <HAL_RCC_OscConfig+0x4ec>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d028      	beq.n	80034ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003464:	429a      	cmp	r2, r3
 8003466:	d121      	bne.n	80034ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	429a      	cmp	r2, r3
 8003474:	d11a      	bne.n	80034ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800347c:	4013      	ands	r3, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003482:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003484:	4293      	cmp	r3, r2
 8003486:	d111      	bne.n	80034ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	085b      	lsrs	r3, r3, #1
 8003494:	3b01      	subs	r3, #1
 8003496:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003498:	429a      	cmp	r2, r3
 800349a:	d107      	bne.n	80034ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800

080034c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0cc      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d4:	4b68      	ldr	r3, [pc, #416]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d90c      	bls.n	80034fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b65      	ldr	r3, [pc, #404]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	4b63      	ldr	r3, [pc, #396]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0b8      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d020      	beq.n	800354a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003514:	4b59      	ldr	r3, [pc, #356]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	4a58      	ldr	r2, [pc, #352]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800351e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800352c:	4b53      	ldr	r3, [pc, #332]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a52      	ldr	r2, [pc, #328]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003536:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003538:	4b50      	ldr	r3, [pc, #320]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	494d      	ldr	r1, [pc, #308]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	4313      	orrs	r3, r2
 8003548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d044      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	4b47      	ldr	r3, [pc, #284]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d119      	bne.n	800359e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e07f      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d003      	beq.n	800357e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357a:	2b03      	cmp	r3, #3
 800357c:	d107      	bne.n	800358e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357e:	4b3f      	ldr	r3, [pc, #252]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d109      	bne.n	800359e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e06f      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358e:	4b3b      	ldr	r3, [pc, #236]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e067      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800359e:	4b37      	ldr	r3, [pc, #220]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f023 0203 	bic.w	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4934      	ldr	r1, [pc, #208]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b0:	f7fe fd0a 	bl	8001fc8 <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b8:	f7fe fd06 	bl	8001fc8 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e04f      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ce:	4b2b      	ldr	r3, [pc, #172]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 020c 	and.w	r2, r3, #12
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	429a      	cmp	r2, r3
 80035de:	d1eb      	bne.n	80035b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e0:	4b25      	ldr	r3, [pc, #148]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d20c      	bcs.n	8003608 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b22      	ldr	r3, [pc, #136]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	4b20      	ldr	r3, [pc, #128]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e032      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003614:	4b19      	ldr	r3, [pc, #100]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4916      	ldr	r1, [pc, #88]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003632:	4b12      	ldr	r3, [pc, #72]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	490e      	ldr	r1, [pc, #56]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003646:	f000 f821 	bl	800368c <HAL_RCC_GetSysClockFreq>
 800364a:	4602      	mov	r2, r0
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	490a      	ldr	r1, [pc, #40]	; (8003680 <HAL_RCC_ClockConfig+0x1c0>)
 8003658:	5ccb      	ldrb	r3, [r1, r3]
 800365a:	fa22 f303 	lsr.w	r3, r2, r3
 800365e:	4a09      	ldr	r2, [pc, #36]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe fc6a 	bl	8001f40 <HAL_InitTick>

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40023c00 	.word	0x40023c00
 800367c:	40023800 	.word	0x40023800
 8003680:	0800a134 	.word	0x0800a134
 8003684:	20000000 	.word	0x20000000
 8003688:	20000008 	.word	0x20000008

0800368c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800368c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003690:	b094      	sub	sp, #80	; 0x50
 8003692:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	647b      	str	r3, [r7, #68]	; 0x44
 8003698:	2300      	movs	r3, #0
 800369a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800369c:	2300      	movs	r3, #0
 800369e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a4:	4b79      	ldr	r3, [pc, #484]	; (800388c <HAL_RCC_GetSysClockFreq+0x200>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 030c 	and.w	r3, r3, #12
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d00d      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0x40>
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	f200 80e1 	bhi.w	8003878 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0x34>
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d003      	beq.n	80036c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036be:	e0db      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036c0:	4b73      	ldr	r3, [pc, #460]	; (8003890 <HAL_RCC_GetSysClockFreq+0x204>)
 80036c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036c4:	e0db      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036c6:	4b73      	ldr	r3, [pc, #460]	; (8003894 <HAL_RCC_GetSysClockFreq+0x208>)
 80036c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036ca:	e0d8      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036cc:	4b6f      	ldr	r3, [pc, #444]	; (800388c <HAL_RCC_GetSysClockFreq+0x200>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036d6:	4b6d      	ldr	r3, [pc, #436]	; (800388c <HAL_RCC_GetSysClockFreq+0x200>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d063      	beq.n	80037aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036e2:	4b6a      	ldr	r3, [pc, #424]	; (800388c <HAL_RCC_GetSysClockFreq+0x200>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	099b      	lsrs	r3, r3, #6
 80036e8:	2200      	movs	r2, #0
 80036ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80036ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f4:	633b      	str	r3, [r7, #48]	; 0x30
 80036f6:	2300      	movs	r3, #0
 80036f8:	637b      	str	r3, [r7, #52]	; 0x34
 80036fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036fe:	4622      	mov	r2, r4
 8003700:	462b      	mov	r3, r5
 8003702:	f04f 0000 	mov.w	r0, #0
 8003706:	f04f 0100 	mov.w	r1, #0
 800370a:	0159      	lsls	r1, r3, #5
 800370c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003710:	0150      	lsls	r0, r2, #5
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	4621      	mov	r1, r4
 8003718:	1a51      	subs	r1, r2, r1
 800371a:	6139      	str	r1, [r7, #16]
 800371c:	4629      	mov	r1, r5
 800371e:	eb63 0301 	sbc.w	r3, r3, r1
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003730:	4659      	mov	r1, fp
 8003732:	018b      	lsls	r3, r1, #6
 8003734:	4651      	mov	r1, sl
 8003736:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800373a:	4651      	mov	r1, sl
 800373c:	018a      	lsls	r2, r1, #6
 800373e:	4651      	mov	r1, sl
 8003740:	ebb2 0801 	subs.w	r8, r2, r1
 8003744:	4659      	mov	r1, fp
 8003746:	eb63 0901 	sbc.w	r9, r3, r1
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003756:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800375a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800375e:	4690      	mov	r8, r2
 8003760:	4699      	mov	r9, r3
 8003762:	4623      	mov	r3, r4
 8003764:	eb18 0303 	adds.w	r3, r8, r3
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	462b      	mov	r3, r5
 800376c:	eb49 0303 	adc.w	r3, r9, r3
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800377e:	4629      	mov	r1, r5
 8003780:	024b      	lsls	r3, r1, #9
 8003782:	4621      	mov	r1, r4
 8003784:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003788:	4621      	mov	r1, r4
 800378a:	024a      	lsls	r2, r1, #9
 800378c:	4610      	mov	r0, r2
 800378e:	4619      	mov	r1, r3
 8003790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003792:	2200      	movs	r2, #0
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
 8003796:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003798:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800379c:	f7fd fa84 	bl	8000ca8 <__aeabi_uldivmod>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4613      	mov	r3, r2
 80037a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a8:	e058      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037aa:	4b38      	ldr	r3, [pc, #224]	; (800388c <HAL_RCC_GetSysClockFreq+0x200>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	099b      	lsrs	r3, r3, #6
 80037b0:	2200      	movs	r2, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	4611      	mov	r1, r2
 80037b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037ba:	623b      	str	r3, [r7, #32]
 80037bc:	2300      	movs	r3, #0
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
 80037c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037c4:	4642      	mov	r2, r8
 80037c6:	464b      	mov	r3, r9
 80037c8:	f04f 0000 	mov.w	r0, #0
 80037cc:	f04f 0100 	mov.w	r1, #0
 80037d0:	0159      	lsls	r1, r3, #5
 80037d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d6:	0150      	lsls	r0, r2, #5
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4641      	mov	r1, r8
 80037de:	ebb2 0a01 	subs.w	sl, r2, r1
 80037e2:	4649      	mov	r1, r9
 80037e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003800:	eb63 050b 	sbc.w	r5, r3, fp
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	00eb      	lsls	r3, r5, #3
 800380e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003812:	00e2      	lsls	r2, r4, #3
 8003814:	4614      	mov	r4, r2
 8003816:	461d      	mov	r5, r3
 8003818:	4643      	mov	r3, r8
 800381a:	18e3      	adds	r3, r4, r3
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	464b      	mov	r3, r9
 8003820:	eb45 0303 	adc.w	r3, r5, r3
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003832:	4629      	mov	r1, r5
 8003834:	028b      	lsls	r3, r1, #10
 8003836:	4621      	mov	r1, r4
 8003838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800383c:	4621      	mov	r1, r4
 800383e:	028a      	lsls	r2, r1, #10
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003846:	2200      	movs	r2, #0
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	61fa      	str	r2, [r7, #28]
 800384c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003850:	f7fd fa2a 	bl	8000ca8 <__aeabi_uldivmod>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4613      	mov	r3, r2
 800385a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_GetSysClockFreq+0x200>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	3301      	adds	r3, #1
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800386c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800386e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003870:	fbb2 f3f3 	udiv	r3, r2, r3
 8003874:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003876:	e002      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_RCC_GetSysClockFreq+0x204>)
 800387a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800387c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800387e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003880:	4618      	mov	r0, r3
 8003882:	3750      	adds	r7, #80	; 0x50
 8003884:	46bd      	mov	sp, r7
 8003886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	00f42400 	.word	0x00f42400
 8003894:	007a1200 	.word	0x007a1200

08003898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <HAL_RCC_GetHCLKFreq+0x14>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000000 	.word	0x20000000

080038b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038b4:	f7ff fff0 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038b8:	4602      	mov	r2, r0
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	0a9b      	lsrs	r3, r3, #10
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	4903      	ldr	r1, [pc, #12]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c6:	5ccb      	ldrb	r3, [r1, r3]
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40023800 	.word	0x40023800
 80038d4:	0800a144 	.word	0x0800a144

080038d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038dc:	f7ff ffdc 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038e0:	4602      	mov	r2, r0
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	0b5b      	lsrs	r3, r3, #13
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	4903      	ldr	r1, [pc, #12]	; (80038fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ee:	5ccb      	ldrb	r3, [r1, r3]
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40023800 	.word	0x40023800
 80038fc:	0800a144 	.word	0x0800a144

08003900 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e042      	b.n	8003998 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fe f826 	bl	8001978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2224      	movs	r2, #36	; 0x24
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003942:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fdbd 	bl	80044c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695a      	ldr	r2, [r3, #20]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003968:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003978:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08a      	sub	sp, #40	; 0x28
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	4613      	mov	r3, r2
 80039ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d175      	bne.n	8003aac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_UART_Transmit+0x2c>
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e06e      	b.n	8003aae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2221      	movs	r2, #33	; 0x21
 80039da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039de:	f7fe faf3 	bl	8001fc8 <HAL_GetTick>
 80039e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	88fa      	ldrh	r2, [r7, #6]
 80039ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f8:	d108      	bne.n	8003a0c <HAL_UART_Transmit+0x6c>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d104      	bne.n	8003a0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	e003      	b.n	8003a14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a14:	e02e      	b.n	8003a74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2180      	movs	r1, #128	; 0x80
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 fb1f 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e03a      	b.n	8003aae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10b      	bne.n	8003a56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	3302      	adds	r3, #2
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	e007      	b.n	8003a66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	781a      	ldrb	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	3301      	adds	r3, #1
 8003a64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1cb      	bne.n	8003a16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2200      	movs	r2, #0
 8003a86:	2140      	movs	r1, #64	; 0x40
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 faeb 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e006      	b.n	8003aae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e000      	b.n	8003aae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003aac:	2302      	movs	r3, #2
  }
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d112      	bne.n	8003af6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_UART_Receive_IT+0x26>
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e00b      	b.n	8003af8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fb12 	bl	8004116 <UART_Start_Receive_IT>
 8003af2:	4603      	mov	r3, r0
 8003af4:	e000      	b.n	8003af8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003af6:	2302      	movs	r3, #2
  }
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b0ba      	sub	sp, #232	; 0xe8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10f      	bne.n	8003b66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <HAL_UART_IRQHandler+0x66>
 8003b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fbf2 	bl	8004348 <UART_Receive_IT>
      return;
 8003b64:	e25b      	b.n	800401e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80de 	beq.w	8003d2c <HAL_UART_IRQHandler+0x22c>
 8003b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80d1 	beq.w	8003d2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_UART_IRQHandler+0xae>
 8003b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	f043 0201 	orr.w	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xd2>
 8003bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	f043 0202 	orr.w	r2, r3, #2
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xf6>
 8003bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	f043 0204 	orr.w	r2, r3, #4
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d011      	beq.n	8003c26 <HAL_UART_IRQHandler+0x126>
 8003c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d105      	bne.n	8003c1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	f043 0208 	orr.w	r2, r3, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 81f2 	beq.w	8004014 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_UART_IRQHandler+0x14e>
 8003c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fb7d 	bl	8004348 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c58:	2b40      	cmp	r3, #64	; 0x40
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d103      	bne.n	8003c7a <HAL_UART_IRQHandler+0x17a>
 8003c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d04f      	beq.n	8003d1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fa85 	bl	800418a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	d141      	bne.n	8003d12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3314      	adds	r3, #20
 8003c94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3314      	adds	r3, #20
 8003cb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1d9      	bne.n	8003c8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d013      	beq.n	8003d0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	4a7e      	ldr	r2, [pc, #504]	; (8003ee0 <HAL_UART_IRQHandler+0x3e0>)
 8003ce8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fe fb1b 	bl	800232a <HAL_DMA_Abort_IT>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d016      	beq.n	8003d28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d04:	4610      	mov	r0, r2
 8003d06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d08:	e00e      	b.n	8003d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f994 	bl	8004038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d10:	e00a      	b.n	8003d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f990 	bl	8004038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d18:	e006      	b.n	8003d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f98c 	bl	8004038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003d26:	e175      	b.n	8004014 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	bf00      	nop
    return;
 8003d2a:	e173      	b.n	8004014 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	f040 814f 	bne.w	8003fd4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 8148 	beq.w	8003fd4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8141 	beq.w	8003fd4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d52:	2300      	movs	r3, #0
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	f040 80b6 	bne.w	8003ee4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8145 	beq.w	8004018 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d96:	429a      	cmp	r2, r3
 8003d98:	f080 813e 	bcs.w	8004018 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003da2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dae:	f000 8088 	beq.w	8003ec2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003dc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003dde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1d9      	bne.n	8003db2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3314      	adds	r3, #20
 8003e04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3314      	adds	r3, #20
 8003e1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e1      	bne.n	8003dfe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3314      	adds	r3, #20
 8003e5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e3      	bne.n	8003e3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e92:	f023 0310 	bic.w	r3, r3, #16
 8003e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ea4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ea6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003eaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003eac:	e841 2300 	strex	r3, r2, [r1]
 8003eb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e3      	bne.n	8003e80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fe f9c4 	bl	800224a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f8b7 	bl	800404c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ede:	e09b      	b.n	8004018 <HAL_UART_IRQHandler+0x518>
 8003ee0:	08004251 	.word	0x08004251
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 808e 	beq.w	800401c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003f00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8089 	beq.w	800401c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	330c      	adds	r3, #12
 8003f10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f2e:	647a      	str	r2, [r7, #68]	; 0x44
 8003f30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f36:	e841 2300 	strex	r3, r2, [r1]
 8003f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1e3      	bne.n	8003f0a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3314      	adds	r3, #20
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	e853 3f00 	ldrex	r3, [r3]
 8003f50:	623b      	str	r3, [r7, #32]
   return(result);
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3314      	adds	r3, #20
 8003f62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f66:	633a      	str	r2, [r7, #48]	; 0x30
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e3      	bne.n	8003f42 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0310 	bic.w	r3, r3, #16
 8003f9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	330c      	adds	r3, #12
 8003fa8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003fac:	61fa      	str	r2, [r7, #28]
 8003fae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	69b9      	ldr	r1, [r7, #24]
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e3      	bne.n	8003f88 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f83d 	bl	800404c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fd2:	e023      	b.n	800401c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d009      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x4f4>
 8003fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f943 	bl	8004278 <UART_Transmit_IT>
    return;
 8003ff2:	e014      	b.n	800401e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00e      	beq.n	800401e <HAL_UART_IRQHandler+0x51e>
 8004000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f983 	bl	8004318 <UART_EndTransmit_IT>
    return;
 8004012:	e004      	b.n	800401e <HAL_UART_IRQHandler+0x51e>
    return;
 8004014:	bf00      	nop
 8004016:	e002      	b.n	800401e <HAL_UART_IRQHandler+0x51e>
      return;
 8004018:	bf00      	nop
 800401a:	e000      	b.n	800401e <HAL_UART_IRQHandler+0x51e>
      return;
 800401c:	bf00      	nop
  }
}
 800401e:	37e8      	adds	r7, #232	; 0xe8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	4613      	mov	r3, r2
 8004072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004074:	e03b      	b.n	80040ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d037      	beq.n	80040ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407e:	f7fd ffa3 	bl	8001fc8 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	6a3a      	ldr	r2, [r7, #32]
 800408a:	429a      	cmp	r2, r3
 800408c:	d302      	bcc.n	8004094 <UART_WaitOnFlagUntilTimeout+0x30>
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e03a      	b.n	800410e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d023      	beq.n	80040ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b80      	cmp	r3, #128	; 0x80
 80040aa:	d020      	beq.n	80040ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b40      	cmp	r3, #64	; 0x40
 80040b0:	d01d      	beq.n	80040ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d116      	bne.n	80040ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f857 	bl	800418a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2208      	movs	r2, #8
 80040e0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e00f      	b.n	800410e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4013      	ands	r3, r2
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	bf0c      	ite	eq
 80040fe:	2301      	moveq	r3, #1
 8004100:	2300      	movne	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	461a      	mov	r2, r3
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	429a      	cmp	r2, r3
 800410a:	d0b4      	beq.n	8004076 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	4613      	mov	r3, r2
 8004122:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	88fa      	ldrh	r2, [r7, #6]
 800412e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	88fa      	ldrh	r2, [r7, #6]
 8004134:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2222      	movs	r2, #34	; 0x22
 8004140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d007      	beq.n	800415c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800415a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0220 	orr.w	r2, r2, #32
 800417a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800418a:	b480      	push	{r7}
 800418c:	b095      	sub	sp, #84	; 0x54
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	330c      	adds	r3, #12
 8004198:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	330c      	adds	r3, #12
 80041b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041b2:	643a      	str	r2, [r7, #64]	; 0x40
 80041b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e5      	bne.n	8004192 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3314      	adds	r3, #20
 80041cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3314      	adds	r3, #20
 80041e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ee:	e841 2300 	strex	r3, r2, [r1]
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e5      	bne.n	80041c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d119      	bne.n	8004236 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	60bb      	str	r3, [r7, #8]
   return(result);
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f023 0310 	bic.w	r3, r3, #16
 8004218:	647b      	str	r3, [r7, #68]	; 0x44
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	330c      	adds	r3, #12
 8004220:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004222:	61ba      	str	r2, [r7, #24]
 8004224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	6979      	ldr	r1, [r7, #20]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	613b      	str	r3, [r7, #16]
   return(result);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e5      	bne.n	8004202 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004244:	bf00      	nop
 8004246:	3754      	adds	r7, #84	; 0x54
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f7ff fee4 	bl	8004038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b21      	cmp	r3, #33	; 0x21
 800428a:	d13e      	bne.n	800430a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004294:	d114      	bne.n	80042c0 <UART_Transmit_IT+0x48>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d110      	bne.n	80042c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	1c9a      	adds	r2, r3, #2
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	621a      	str	r2, [r3, #32]
 80042be:	e008      	b.n	80042d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	1c59      	adds	r1, r3, #1
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6211      	str	r1, [r2, #32]
 80042ca:	781a      	ldrb	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29b      	uxth	r3, r3
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	4619      	mov	r1, r3
 80042e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10f      	bne.n	8004306 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004304:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	e000      	b.n	800430c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800430a:	2302      	movs	r3, #2
  }
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800432e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff fe73 	bl	8004024 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08c      	sub	sp, #48	; 0x30
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b22      	cmp	r3, #34	; 0x22
 800435a:	f040 80ae 	bne.w	80044ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004366:	d117      	bne.n	8004398 <UART_Receive_IT+0x50>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d113      	bne.n	8004398 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004370:	2300      	movs	r3, #0
 8004372:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	b29b      	uxth	r3, r3
 8004382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004386:	b29a      	uxth	r2, r3
 8004388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	1c9a      	adds	r2, r3, #2
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	629a      	str	r2, [r3, #40]	; 0x28
 8004396:	e026      	b.n	80043e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043aa:	d007      	beq.n	80043bc <UART_Receive_IT+0x74>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <UART_Receive_IT+0x82>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d106      	bne.n	80043ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	701a      	strb	r2, [r3, #0]
 80043c8:	e008      	b.n	80043dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	4619      	mov	r1, r3
 80043f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d15d      	bne.n	80044b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0220 	bic.w	r2, r2, #32
 8004408:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004418:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695a      	ldr	r2, [r3, #20]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0201 	bic.w	r2, r2, #1
 8004428:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	2b01      	cmp	r3, #1
 800443e:	d135      	bne.n	80044ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	330c      	adds	r3, #12
 800444c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	613b      	str	r3, [r7, #16]
   return(result);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f023 0310 	bic.w	r3, r3, #16
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004466:	623a      	str	r2, [r7, #32]
 8004468:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	69f9      	ldr	r1, [r7, #28]
 800446c:	6a3a      	ldr	r2, [r7, #32]
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	61bb      	str	r3, [r7, #24]
   return(result);
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e5      	bne.n	8004446 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b10      	cmp	r3, #16
 8004486:	d10a      	bne.n	800449e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044a2:	4619      	mov	r1, r3
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff fdd1 	bl	800404c <HAL_UARTEx_RxEventCallback>
 80044aa:	e002      	b.n	80044b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fd f85f 	bl	8001570 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e002      	b.n	80044bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e000      	b.n	80044bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80044ba:	2302      	movs	r3, #2
  }
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3730      	adds	r7, #48	; 0x30
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c8:	b0c0      	sub	sp, #256	; 0x100
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e0:	68d9      	ldr	r1, [r3, #12]
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	ea40 0301 	orr.w	r3, r0, r1
 80044ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	431a      	orrs	r2, r3
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800451c:	f021 010c 	bic.w	r1, r1, #12
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800452a:	430b      	orrs	r3, r1
 800452c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800453a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453e:	6999      	ldr	r1, [r3, #24]
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	ea40 0301 	orr.w	r3, r0, r1
 800454a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b8f      	ldr	r3, [pc, #572]	; (8004790 <UART_SetConfig+0x2cc>)
 8004554:	429a      	cmp	r2, r3
 8004556:	d005      	beq.n	8004564 <UART_SetConfig+0xa0>
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4b8d      	ldr	r3, [pc, #564]	; (8004794 <UART_SetConfig+0x2d0>)
 8004560:	429a      	cmp	r2, r3
 8004562:	d104      	bne.n	800456e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004564:	f7ff f9b8 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 8004568:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800456c:	e003      	b.n	8004576 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800456e:	f7ff f99f 	bl	80038b0 <HAL_RCC_GetPCLK1Freq>
 8004572:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004580:	f040 810c 	bne.w	800479c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004588:	2200      	movs	r2, #0
 800458a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800458e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004592:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004596:	4622      	mov	r2, r4
 8004598:	462b      	mov	r3, r5
 800459a:	1891      	adds	r1, r2, r2
 800459c:	65b9      	str	r1, [r7, #88]	; 0x58
 800459e:	415b      	adcs	r3, r3
 80045a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045a6:	4621      	mov	r1, r4
 80045a8:	eb12 0801 	adds.w	r8, r2, r1
 80045ac:	4629      	mov	r1, r5
 80045ae:	eb43 0901 	adc.w	r9, r3, r1
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045c6:	4690      	mov	r8, r2
 80045c8:	4699      	mov	r9, r3
 80045ca:	4623      	mov	r3, r4
 80045cc:	eb18 0303 	adds.w	r3, r8, r3
 80045d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045d4:	462b      	mov	r3, r5
 80045d6:	eb49 0303 	adc.w	r3, r9, r3
 80045da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045f2:	460b      	mov	r3, r1
 80045f4:	18db      	adds	r3, r3, r3
 80045f6:	653b      	str	r3, [r7, #80]	; 0x50
 80045f8:	4613      	mov	r3, r2
 80045fa:	eb42 0303 	adc.w	r3, r2, r3
 80045fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004600:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004604:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004608:	f7fc fb4e 	bl	8000ca8 <__aeabi_uldivmod>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4b61      	ldr	r3, [pc, #388]	; (8004798 <UART_SetConfig+0x2d4>)
 8004612:	fba3 2302 	umull	r2, r3, r3, r2
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	011c      	lsls	r4, r3, #4
 800461a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004624:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004628:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800462c:	4642      	mov	r2, r8
 800462e:	464b      	mov	r3, r9
 8004630:	1891      	adds	r1, r2, r2
 8004632:	64b9      	str	r1, [r7, #72]	; 0x48
 8004634:	415b      	adcs	r3, r3
 8004636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004638:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800463c:	4641      	mov	r1, r8
 800463e:	eb12 0a01 	adds.w	sl, r2, r1
 8004642:	4649      	mov	r1, r9
 8004644:	eb43 0b01 	adc.w	fp, r3, r1
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004654:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800465c:	4692      	mov	sl, r2
 800465e:	469b      	mov	fp, r3
 8004660:	4643      	mov	r3, r8
 8004662:	eb1a 0303 	adds.w	r3, sl, r3
 8004666:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800466a:	464b      	mov	r3, r9
 800466c:	eb4b 0303 	adc.w	r3, fp, r3
 8004670:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004680:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004684:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004688:	460b      	mov	r3, r1
 800468a:	18db      	adds	r3, r3, r3
 800468c:	643b      	str	r3, [r7, #64]	; 0x40
 800468e:	4613      	mov	r3, r2
 8004690:	eb42 0303 	adc.w	r3, r2, r3
 8004694:	647b      	str	r3, [r7, #68]	; 0x44
 8004696:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800469a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800469e:	f7fc fb03 	bl	8000ca8 <__aeabi_uldivmod>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4611      	mov	r1, r2
 80046a8:	4b3b      	ldr	r3, [pc, #236]	; (8004798 <UART_SetConfig+0x2d4>)
 80046aa:	fba3 2301 	umull	r2, r3, r3, r1
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	2264      	movs	r2, #100	; 0x64
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	1acb      	subs	r3, r1, r3
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046be:	4b36      	ldr	r3, [pc, #216]	; (8004798 <UART_SetConfig+0x2d4>)
 80046c0:	fba3 2302 	umull	r2, r3, r3, r2
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046cc:	441c      	add	r4, r3
 80046ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046e0:	4642      	mov	r2, r8
 80046e2:	464b      	mov	r3, r9
 80046e4:	1891      	adds	r1, r2, r2
 80046e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80046e8:	415b      	adcs	r3, r3
 80046ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046f0:	4641      	mov	r1, r8
 80046f2:	1851      	adds	r1, r2, r1
 80046f4:	6339      	str	r1, [r7, #48]	; 0x30
 80046f6:	4649      	mov	r1, r9
 80046f8:	414b      	adcs	r3, r1
 80046fa:	637b      	str	r3, [r7, #52]	; 0x34
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004708:	4659      	mov	r1, fp
 800470a:	00cb      	lsls	r3, r1, #3
 800470c:	4651      	mov	r1, sl
 800470e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004712:	4651      	mov	r1, sl
 8004714:	00ca      	lsls	r2, r1, #3
 8004716:	4610      	mov	r0, r2
 8004718:	4619      	mov	r1, r3
 800471a:	4603      	mov	r3, r0
 800471c:	4642      	mov	r2, r8
 800471e:	189b      	adds	r3, r3, r2
 8004720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004724:	464b      	mov	r3, r9
 8004726:	460a      	mov	r2, r1
 8004728:	eb42 0303 	adc.w	r3, r2, r3
 800472c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800473c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004740:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004744:	460b      	mov	r3, r1
 8004746:	18db      	adds	r3, r3, r3
 8004748:	62bb      	str	r3, [r7, #40]	; 0x28
 800474a:	4613      	mov	r3, r2
 800474c:	eb42 0303 	adc.w	r3, r2, r3
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004752:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004756:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800475a:	f7fc faa5 	bl	8000ca8 <__aeabi_uldivmod>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <UART_SetConfig+0x2d4>)
 8004764:	fba3 1302 	umull	r1, r3, r3, r2
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	2164      	movs	r1, #100	; 0x64
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	3332      	adds	r3, #50	; 0x32
 8004776:	4a08      	ldr	r2, [pc, #32]	; (8004798 <UART_SetConfig+0x2d4>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	f003 0207 	and.w	r2, r3, #7
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4422      	add	r2, r4
 800478a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800478c:	e106      	b.n	800499c <UART_SetConfig+0x4d8>
 800478e:	bf00      	nop
 8004790:	40011000 	.word	0x40011000
 8004794:	40011400 	.word	0x40011400
 8004798:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800479c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047ae:	4642      	mov	r2, r8
 80047b0:	464b      	mov	r3, r9
 80047b2:	1891      	adds	r1, r2, r2
 80047b4:	6239      	str	r1, [r7, #32]
 80047b6:	415b      	adcs	r3, r3
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047be:	4641      	mov	r1, r8
 80047c0:	1854      	adds	r4, r2, r1
 80047c2:	4649      	mov	r1, r9
 80047c4:	eb43 0501 	adc.w	r5, r3, r1
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	00eb      	lsls	r3, r5, #3
 80047d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047d6:	00e2      	lsls	r2, r4, #3
 80047d8:	4614      	mov	r4, r2
 80047da:	461d      	mov	r5, r3
 80047dc:	4643      	mov	r3, r8
 80047de:	18e3      	adds	r3, r4, r3
 80047e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047e4:	464b      	mov	r3, r9
 80047e6:	eb45 0303 	adc.w	r3, r5, r3
 80047ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800480a:	4629      	mov	r1, r5
 800480c:	008b      	lsls	r3, r1, #2
 800480e:	4621      	mov	r1, r4
 8004810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004814:	4621      	mov	r1, r4
 8004816:	008a      	lsls	r2, r1, #2
 8004818:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800481c:	f7fc fa44 	bl	8000ca8 <__aeabi_uldivmod>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4b60      	ldr	r3, [pc, #384]	; (80049a8 <UART_SetConfig+0x4e4>)
 8004826:	fba3 2302 	umull	r2, r3, r3, r2
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	011c      	lsls	r4, r3, #4
 800482e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004832:	2200      	movs	r2, #0
 8004834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004838:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800483c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004840:	4642      	mov	r2, r8
 8004842:	464b      	mov	r3, r9
 8004844:	1891      	adds	r1, r2, r2
 8004846:	61b9      	str	r1, [r7, #24]
 8004848:	415b      	adcs	r3, r3
 800484a:	61fb      	str	r3, [r7, #28]
 800484c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004850:	4641      	mov	r1, r8
 8004852:	1851      	adds	r1, r2, r1
 8004854:	6139      	str	r1, [r7, #16]
 8004856:	4649      	mov	r1, r9
 8004858:	414b      	adcs	r3, r1
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004868:	4659      	mov	r1, fp
 800486a:	00cb      	lsls	r3, r1, #3
 800486c:	4651      	mov	r1, sl
 800486e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004872:	4651      	mov	r1, sl
 8004874:	00ca      	lsls	r2, r1, #3
 8004876:	4610      	mov	r0, r2
 8004878:	4619      	mov	r1, r3
 800487a:	4603      	mov	r3, r0
 800487c:	4642      	mov	r2, r8
 800487e:	189b      	adds	r3, r3, r2
 8004880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004884:	464b      	mov	r3, r9
 8004886:	460a      	mov	r2, r1
 8004888:	eb42 0303 	adc.w	r3, r2, r3
 800488c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	67bb      	str	r3, [r7, #120]	; 0x78
 800489a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048a8:	4649      	mov	r1, r9
 80048aa:	008b      	lsls	r3, r1, #2
 80048ac:	4641      	mov	r1, r8
 80048ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b2:	4641      	mov	r1, r8
 80048b4:	008a      	lsls	r2, r1, #2
 80048b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048ba:	f7fc f9f5 	bl	8000ca8 <__aeabi_uldivmod>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4611      	mov	r1, r2
 80048c4:	4b38      	ldr	r3, [pc, #224]	; (80049a8 <UART_SetConfig+0x4e4>)
 80048c6:	fba3 2301 	umull	r2, r3, r3, r1
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	2264      	movs	r2, #100	; 0x64
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	1acb      	subs	r3, r1, r3
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	3332      	adds	r3, #50	; 0x32
 80048d8:	4a33      	ldr	r2, [pc, #204]	; (80049a8 <UART_SetConfig+0x4e4>)
 80048da:	fba2 2303 	umull	r2, r3, r2, r3
 80048de:	095b      	lsrs	r3, r3, #5
 80048e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048e4:	441c      	add	r4, r3
 80048e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ea:	2200      	movs	r2, #0
 80048ec:	673b      	str	r3, [r7, #112]	; 0x70
 80048ee:	677a      	str	r2, [r7, #116]	; 0x74
 80048f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048f4:	4642      	mov	r2, r8
 80048f6:	464b      	mov	r3, r9
 80048f8:	1891      	adds	r1, r2, r2
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	415b      	adcs	r3, r3
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004904:	4641      	mov	r1, r8
 8004906:	1851      	adds	r1, r2, r1
 8004908:	6039      	str	r1, [r7, #0]
 800490a:	4649      	mov	r1, r9
 800490c:	414b      	adcs	r3, r1
 800490e:	607b      	str	r3, [r7, #4]
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800491c:	4659      	mov	r1, fp
 800491e:	00cb      	lsls	r3, r1, #3
 8004920:	4651      	mov	r1, sl
 8004922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004926:	4651      	mov	r1, sl
 8004928:	00ca      	lsls	r2, r1, #3
 800492a:	4610      	mov	r0, r2
 800492c:	4619      	mov	r1, r3
 800492e:	4603      	mov	r3, r0
 8004930:	4642      	mov	r2, r8
 8004932:	189b      	adds	r3, r3, r2
 8004934:	66bb      	str	r3, [r7, #104]	; 0x68
 8004936:	464b      	mov	r3, r9
 8004938:	460a      	mov	r2, r1
 800493a:	eb42 0303 	adc.w	r3, r2, r3
 800493e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	663b      	str	r3, [r7, #96]	; 0x60
 800494a:	667a      	str	r2, [r7, #100]	; 0x64
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004958:	4649      	mov	r1, r9
 800495a:	008b      	lsls	r3, r1, #2
 800495c:	4641      	mov	r1, r8
 800495e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004962:	4641      	mov	r1, r8
 8004964:	008a      	lsls	r2, r1, #2
 8004966:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800496a:	f7fc f99d 	bl	8000ca8 <__aeabi_uldivmod>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <UART_SetConfig+0x4e4>)
 8004974:	fba3 1302 	umull	r1, r3, r3, r2
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	2164      	movs	r1, #100	; 0x64
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	3332      	adds	r3, #50	; 0x32
 8004986:	4a08      	ldr	r2, [pc, #32]	; (80049a8 <UART_SetConfig+0x4e4>)
 8004988:	fba2 2303 	umull	r2, r3, r2, r3
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	f003 020f 	and.w	r2, r3, #15
 8004992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4422      	add	r2, r4
 800499a:	609a      	str	r2, [r3, #8]
}
 800499c:	bf00      	nop
 800499e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049a2:	46bd      	mov	sp, r7
 80049a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a8:	51eb851f 	.word	0x51eb851f

080049ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049ac:	b084      	sub	sp, #16
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	f107 001c 	add.w	r0, r7, #28
 80049ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049be:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d123      	bne.n	8004a0e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d105      	bne.n	8004a02 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 faa0 	bl	8004f48 <USB_CoreReset>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	73fb      	strb	r3, [r7, #15]
 8004a0c:	e01b      	b.n	8004a46 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fa94 	bl	8004f48 <USB_CoreReset>
 8004a20:	4603      	mov	r3, r0
 8004a22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a24:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d106      	bne.n	8004a3a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38
 8004a38:	e005      	b.n	8004a46 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a46:	7fbb      	ldrb	r3, [r7, #30]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d10b      	bne.n	8004a64 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f043 0206 	orr.w	r2, r3, #6
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f043 0220 	orr.w	r2, r3, #32
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a70:	b004      	add	sp, #16
 8004a72:	4770      	bx	lr

08004a74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f023 0201 	bic.w	r2, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b084      	sub	sp, #16
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ab2:	78fb      	ldrb	r3, [r7, #3]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d115      	bne.n	8004ae4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ac4:	200a      	movs	r0, #10
 8004ac6:	f7fd fa8b 	bl	8001fe0 <HAL_Delay>
      ms += 10U;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	330a      	adds	r3, #10
 8004ace:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fa2b 	bl	8004f2c <USB_GetMode>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d01e      	beq.n	8004b1a <USB_SetCurrentMode+0x84>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2bc7      	cmp	r3, #199	; 0xc7
 8004ae0:	d9f0      	bls.n	8004ac4 <USB_SetCurrentMode+0x2e>
 8004ae2:	e01a      	b.n	8004b1a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d115      	bne.n	8004b16 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004af6:	200a      	movs	r0, #10
 8004af8:	f7fd fa72 	bl	8001fe0 <HAL_Delay>
      ms += 10U;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	330a      	adds	r3, #10
 8004b00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fa12 	bl	8004f2c <USB_GetMode>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <USB_SetCurrentMode+0x84>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2bc7      	cmp	r3, #199	; 0xc7
 8004b12:	d9f0      	bls.n	8004af6 <USB_SetCurrentMode+0x60>
 8004b14:	e001      	b.n	8004b1a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e005      	b.n	8004b26 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2bc8      	cmp	r3, #200	; 0xc8
 8004b1e:	d101      	bne.n	8004b24 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b30:	b084      	sub	sp, #16
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b086      	sub	sp, #24
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	e009      	b.n	8004b64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	3340      	adds	r3, #64	; 0x40
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	3301      	adds	r3, #1
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	2b0e      	cmp	r3, #14
 8004b68:	d9f2      	bls.n	8004b50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d11c      	bne.n	8004bac <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b80:	f043 0302 	orr.w	r3, r3, #2
 8004b84:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	639a      	str	r2, [r3, #56]	; 0x38
 8004baa:	e00b      	b.n	8004bc4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bca:	461a      	mov	r2, r3
 8004bcc:	2300      	movs	r3, #0
 8004bce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bd0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d10d      	bne.n	8004bf4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d104      	bne.n	8004bea <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004be0:	2100      	movs	r1, #0
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f968 	bl	8004eb8 <USB_SetDevSpeed>
 8004be8:	e008      	b.n	8004bfc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bea:	2101      	movs	r1, #1
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f963 	bl	8004eb8 <USB_SetDevSpeed>
 8004bf2:	e003      	b.n	8004bfc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bf4:	2103      	movs	r1, #3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f95e 	bl	8004eb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bfc:	2110      	movs	r1, #16
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f8fa 	bl	8004df8 <USB_FlushTxFifo>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f924 	bl	8004e5c <USB_FlushRxFifo>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c24:	461a      	mov	r2, r3
 8004c26:	2300      	movs	r3, #0
 8004c28:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c30:	461a      	mov	r2, r3
 8004c32:	2300      	movs	r3, #0
 8004c34:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c42:	2300      	movs	r3, #0
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	e043      	b.n	8004cd0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c5e:	d118      	bne.n	8004c92 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10a      	bne.n	8004c7c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c72:	461a      	mov	r2, r3
 8004c74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	e013      	b.n	8004ca4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	e008      	b.n	8004ca4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	613b      	str	r3, [r7, #16]
 8004cd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d3b5      	bcc.n	8004c48 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	e043      	b.n	8004d6a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cf8:	d118      	bne.n	8004d2c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	e013      	b.n	8004d3e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	461a      	mov	r2, r3
 8004d24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	e008      	b.n	8004d3e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d38:	461a      	mov	r2, r3
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	3301      	adds	r3, #1
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d6e:	461a      	mov	r2, r3
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d3b5      	bcc.n	8004ce2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d88:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d96:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d105      	bne.n	8004dac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	f043 0210 	orr.w	r2, r3, #16
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699a      	ldr	r2, [r3, #24]
 8004db0:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <USB_DevInit+0x2c4>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004db8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	f043 0208 	orr.w	r2, r3, #8
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004dcc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d107      	bne.n	8004de4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ddc:	f043 0304 	orr.w	r3, r3, #4
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004df0:	b004      	add	sp, #16
 8004df2:	4770      	bx	lr
 8004df4:	803c3800 	.word	0x803c3800

08004df8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e12:	d901      	bls.n	8004e18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e01b      	b.n	8004e50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	daf2      	bge.n	8004e06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	019b      	lsls	r3, r3, #6
 8004e28:	f043 0220 	orr.w	r2, r3, #32
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3301      	adds	r3, #1
 8004e34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e3c:	d901      	bls.n	8004e42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e006      	b.n	8004e50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d0f0      	beq.n	8004e30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e74:	d901      	bls.n	8004e7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e018      	b.n	8004eac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	daf2      	bge.n	8004e68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2210      	movs	r2, #16
 8004e8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e98:	d901      	bls.n	8004e9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e006      	b.n	8004eac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b10      	cmp	r3, #16
 8004ea8:	d0f0      	beq.n	8004e8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	78fb      	ldrb	r3, [r7, #3]
 8004ed2:	68f9      	ldr	r1, [r7, #12]
 8004ed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b085      	sub	sp, #20
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f04:	f023 0303 	bic.w	r3, r3, #3
 8004f08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f18:	f043 0302 	orr.w	r3, r3, #2
 8004f1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f003 0301 	and.w	r3, r3, #1
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	3301      	adds	r3, #1
 8004f58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004f60:	d901      	bls.n	8004f66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e01b      	b.n	8004f9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	daf2      	bge.n	8004f54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f043 0201 	orr.w	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3301      	adds	r3, #1
 8004f82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004f8a:	d901      	bls.n	8004f90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e006      	b.n	8004f9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d0f0      	beq.n	8004f7e <USB_CoreReset+0x36>

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <__cvt>:
 8004faa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fae:	ec55 4b10 	vmov	r4, r5, d0
 8004fb2:	2d00      	cmp	r5, #0
 8004fb4:	460e      	mov	r6, r1
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	462b      	mov	r3, r5
 8004fba:	bfbb      	ittet	lt
 8004fbc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004fc0:	461d      	movlt	r5, r3
 8004fc2:	2300      	movge	r3, #0
 8004fc4:	232d      	movlt	r3, #45	; 0x2d
 8004fc6:	700b      	strb	r3, [r1, #0]
 8004fc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fca:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004fce:	4691      	mov	r9, r2
 8004fd0:	f023 0820 	bic.w	r8, r3, #32
 8004fd4:	bfbc      	itt	lt
 8004fd6:	4622      	movlt	r2, r4
 8004fd8:	4614      	movlt	r4, r2
 8004fda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fde:	d005      	beq.n	8004fec <__cvt+0x42>
 8004fe0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004fe4:	d100      	bne.n	8004fe8 <__cvt+0x3e>
 8004fe6:	3601      	adds	r6, #1
 8004fe8:	2102      	movs	r1, #2
 8004fea:	e000      	b.n	8004fee <__cvt+0x44>
 8004fec:	2103      	movs	r1, #3
 8004fee:	ab03      	add	r3, sp, #12
 8004ff0:	9301      	str	r3, [sp, #4]
 8004ff2:	ab02      	add	r3, sp, #8
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	ec45 4b10 	vmov	d0, r4, r5
 8004ffa:	4653      	mov	r3, sl
 8004ffc:	4632      	mov	r2, r6
 8004ffe:	f001 f8af 	bl	8006160 <_dtoa_r>
 8005002:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005006:	4607      	mov	r7, r0
 8005008:	d102      	bne.n	8005010 <__cvt+0x66>
 800500a:	f019 0f01 	tst.w	r9, #1
 800500e:	d022      	beq.n	8005056 <__cvt+0xac>
 8005010:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005014:	eb07 0906 	add.w	r9, r7, r6
 8005018:	d110      	bne.n	800503c <__cvt+0x92>
 800501a:	783b      	ldrb	r3, [r7, #0]
 800501c:	2b30      	cmp	r3, #48	; 0x30
 800501e:	d10a      	bne.n	8005036 <__cvt+0x8c>
 8005020:	2200      	movs	r2, #0
 8005022:	2300      	movs	r3, #0
 8005024:	4620      	mov	r0, r4
 8005026:	4629      	mov	r1, r5
 8005028:	f7fb fd5e 	bl	8000ae8 <__aeabi_dcmpeq>
 800502c:	b918      	cbnz	r0, 8005036 <__cvt+0x8c>
 800502e:	f1c6 0601 	rsb	r6, r6, #1
 8005032:	f8ca 6000 	str.w	r6, [sl]
 8005036:	f8da 3000 	ldr.w	r3, [sl]
 800503a:	4499      	add	r9, r3
 800503c:	2200      	movs	r2, #0
 800503e:	2300      	movs	r3, #0
 8005040:	4620      	mov	r0, r4
 8005042:	4629      	mov	r1, r5
 8005044:	f7fb fd50 	bl	8000ae8 <__aeabi_dcmpeq>
 8005048:	b108      	cbz	r0, 800504e <__cvt+0xa4>
 800504a:	f8cd 900c 	str.w	r9, [sp, #12]
 800504e:	2230      	movs	r2, #48	; 0x30
 8005050:	9b03      	ldr	r3, [sp, #12]
 8005052:	454b      	cmp	r3, r9
 8005054:	d307      	bcc.n	8005066 <__cvt+0xbc>
 8005056:	9b03      	ldr	r3, [sp, #12]
 8005058:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800505a:	1bdb      	subs	r3, r3, r7
 800505c:	4638      	mov	r0, r7
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	b004      	add	sp, #16
 8005062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005066:	1c59      	adds	r1, r3, #1
 8005068:	9103      	str	r1, [sp, #12]
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	e7f0      	b.n	8005050 <__cvt+0xa6>

0800506e <__exponent>:
 800506e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005070:	4603      	mov	r3, r0
 8005072:	2900      	cmp	r1, #0
 8005074:	bfb8      	it	lt
 8005076:	4249      	neglt	r1, r1
 8005078:	f803 2b02 	strb.w	r2, [r3], #2
 800507c:	bfb4      	ite	lt
 800507e:	222d      	movlt	r2, #45	; 0x2d
 8005080:	222b      	movge	r2, #43	; 0x2b
 8005082:	2909      	cmp	r1, #9
 8005084:	7042      	strb	r2, [r0, #1]
 8005086:	dd2a      	ble.n	80050de <__exponent+0x70>
 8005088:	f10d 0207 	add.w	r2, sp, #7
 800508c:	4617      	mov	r7, r2
 800508e:	260a      	movs	r6, #10
 8005090:	4694      	mov	ip, r2
 8005092:	fb91 f5f6 	sdiv	r5, r1, r6
 8005096:	fb06 1415 	mls	r4, r6, r5, r1
 800509a:	3430      	adds	r4, #48	; 0x30
 800509c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80050a0:	460c      	mov	r4, r1
 80050a2:	2c63      	cmp	r4, #99	; 0x63
 80050a4:	f102 32ff 	add.w	r2, r2, #4294967295
 80050a8:	4629      	mov	r1, r5
 80050aa:	dcf1      	bgt.n	8005090 <__exponent+0x22>
 80050ac:	3130      	adds	r1, #48	; 0x30
 80050ae:	f1ac 0402 	sub.w	r4, ip, #2
 80050b2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80050b6:	1c41      	adds	r1, r0, #1
 80050b8:	4622      	mov	r2, r4
 80050ba:	42ba      	cmp	r2, r7
 80050bc:	d30a      	bcc.n	80050d4 <__exponent+0x66>
 80050be:	f10d 0209 	add.w	r2, sp, #9
 80050c2:	eba2 020c 	sub.w	r2, r2, ip
 80050c6:	42bc      	cmp	r4, r7
 80050c8:	bf88      	it	hi
 80050ca:	2200      	movhi	r2, #0
 80050cc:	4413      	add	r3, r2
 80050ce:	1a18      	subs	r0, r3, r0
 80050d0:	b003      	add	sp, #12
 80050d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80050d8:	f801 5f01 	strb.w	r5, [r1, #1]!
 80050dc:	e7ed      	b.n	80050ba <__exponent+0x4c>
 80050de:	2330      	movs	r3, #48	; 0x30
 80050e0:	3130      	adds	r1, #48	; 0x30
 80050e2:	7083      	strb	r3, [r0, #2]
 80050e4:	70c1      	strb	r1, [r0, #3]
 80050e6:	1d03      	adds	r3, r0, #4
 80050e8:	e7f1      	b.n	80050ce <__exponent+0x60>
	...

080050ec <_printf_float>:
 80050ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f0:	ed2d 8b02 	vpush	{d8}
 80050f4:	b08d      	sub	sp, #52	; 0x34
 80050f6:	460c      	mov	r4, r1
 80050f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80050fc:	4616      	mov	r6, r2
 80050fe:	461f      	mov	r7, r3
 8005100:	4605      	mov	r5, r0
 8005102:	f000 ff25 	bl	8005f50 <_localeconv_r>
 8005106:	f8d0 a000 	ldr.w	sl, [r0]
 800510a:	4650      	mov	r0, sl
 800510c:	f7fb f8c0 	bl	8000290 <strlen>
 8005110:	2300      	movs	r3, #0
 8005112:	930a      	str	r3, [sp, #40]	; 0x28
 8005114:	6823      	ldr	r3, [r4, #0]
 8005116:	9305      	str	r3, [sp, #20]
 8005118:	f8d8 3000 	ldr.w	r3, [r8]
 800511c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005120:	3307      	adds	r3, #7
 8005122:	f023 0307 	bic.w	r3, r3, #7
 8005126:	f103 0208 	add.w	r2, r3, #8
 800512a:	f8c8 2000 	str.w	r2, [r8]
 800512e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005132:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005136:	9307      	str	r3, [sp, #28]
 8005138:	f8cd 8018 	str.w	r8, [sp, #24]
 800513c:	ee08 0a10 	vmov	s16, r0
 8005140:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005144:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005148:	4b9e      	ldr	r3, [pc, #632]	; (80053c4 <_printf_float+0x2d8>)
 800514a:	f04f 32ff 	mov.w	r2, #4294967295
 800514e:	f7fb fcfd 	bl	8000b4c <__aeabi_dcmpun>
 8005152:	bb88      	cbnz	r0, 80051b8 <_printf_float+0xcc>
 8005154:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005158:	4b9a      	ldr	r3, [pc, #616]	; (80053c4 <_printf_float+0x2d8>)
 800515a:	f04f 32ff 	mov.w	r2, #4294967295
 800515e:	f7fb fcd7 	bl	8000b10 <__aeabi_dcmple>
 8005162:	bb48      	cbnz	r0, 80051b8 <_printf_float+0xcc>
 8005164:	2200      	movs	r2, #0
 8005166:	2300      	movs	r3, #0
 8005168:	4640      	mov	r0, r8
 800516a:	4649      	mov	r1, r9
 800516c:	f7fb fcc6 	bl	8000afc <__aeabi_dcmplt>
 8005170:	b110      	cbz	r0, 8005178 <_printf_float+0x8c>
 8005172:	232d      	movs	r3, #45	; 0x2d
 8005174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005178:	4a93      	ldr	r2, [pc, #588]	; (80053c8 <_printf_float+0x2dc>)
 800517a:	4b94      	ldr	r3, [pc, #592]	; (80053cc <_printf_float+0x2e0>)
 800517c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005180:	bf94      	ite	ls
 8005182:	4690      	movls	r8, r2
 8005184:	4698      	movhi	r8, r3
 8005186:	2303      	movs	r3, #3
 8005188:	6123      	str	r3, [r4, #16]
 800518a:	9b05      	ldr	r3, [sp, #20]
 800518c:	f023 0304 	bic.w	r3, r3, #4
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	f04f 0900 	mov.w	r9, #0
 8005196:	9700      	str	r7, [sp, #0]
 8005198:	4633      	mov	r3, r6
 800519a:	aa0b      	add	r2, sp, #44	; 0x2c
 800519c:	4621      	mov	r1, r4
 800519e:	4628      	mov	r0, r5
 80051a0:	f000 f9da 	bl	8005558 <_printf_common>
 80051a4:	3001      	adds	r0, #1
 80051a6:	f040 8090 	bne.w	80052ca <_printf_float+0x1de>
 80051aa:	f04f 30ff 	mov.w	r0, #4294967295
 80051ae:	b00d      	add	sp, #52	; 0x34
 80051b0:	ecbd 8b02 	vpop	{d8}
 80051b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b8:	4642      	mov	r2, r8
 80051ba:	464b      	mov	r3, r9
 80051bc:	4640      	mov	r0, r8
 80051be:	4649      	mov	r1, r9
 80051c0:	f7fb fcc4 	bl	8000b4c <__aeabi_dcmpun>
 80051c4:	b140      	cbz	r0, 80051d8 <_printf_float+0xec>
 80051c6:	464b      	mov	r3, r9
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bfbc      	itt	lt
 80051cc:	232d      	movlt	r3, #45	; 0x2d
 80051ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80051d2:	4a7f      	ldr	r2, [pc, #508]	; (80053d0 <_printf_float+0x2e4>)
 80051d4:	4b7f      	ldr	r3, [pc, #508]	; (80053d4 <_printf_float+0x2e8>)
 80051d6:	e7d1      	b.n	800517c <_printf_float+0x90>
 80051d8:	6863      	ldr	r3, [r4, #4]
 80051da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80051de:	9206      	str	r2, [sp, #24]
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	d13f      	bne.n	8005264 <_printf_float+0x178>
 80051e4:	2306      	movs	r3, #6
 80051e6:	6063      	str	r3, [r4, #4]
 80051e8:	9b05      	ldr	r3, [sp, #20]
 80051ea:	6861      	ldr	r1, [r4, #4]
 80051ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80051f0:	2300      	movs	r3, #0
 80051f2:	9303      	str	r3, [sp, #12]
 80051f4:	ab0a      	add	r3, sp, #40	; 0x28
 80051f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80051fa:	ab09      	add	r3, sp, #36	; 0x24
 80051fc:	ec49 8b10 	vmov	d0, r8, r9
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	6022      	str	r2, [r4, #0]
 8005204:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005208:	4628      	mov	r0, r5
 800520a:	f7ff fece 	bl	8004faa <__cvt>
 800520e:	9b06      	ldr	r3, [sp, #24]
 8005210:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005212:	2b47      	cmp	r3, #71	; 0x47
 8005214:	4680      	mov	r8, r0
 8005216:	d108      	bne.n	800522a <_printf_float+0x13e>
 8005218:	1cc8      	adds	r0, r1, #3
 800521a:	db02      	blt.n	8005222 <_printf_float+0x136>
 800521c:	6863      	ldr	r3, [r4, #4]
 800521e:	4299      	cmp	r1, r3
 8005220:	dd41      	ble.n	80052a6 <_printf_float+0x1ba>
 8005222:	f1ab 0302 	sub.w	r3, fp, #2
 8005226:	fa5f fb83 	uxtb.w	fp, r3
 800522a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800522e:	d820      	bhi.n	8005272 <_printf_float+0x186>
 8005230:	3901      	subs	r1, #1
 8005232:	465a      	mov	r2, fp
 8005234:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005238:	9109      	str	r1, [sp, #36]	; 0x24
 800523a:	f7ff ff18 	bl	800506e <__exponent>
 800523e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005240:	1813      	adds	r3, r2, r0
 8005242:	2a01      	cmp	r2, #1
 8005244:	4681      	mov	r9, r0
 8005246:	6123      	str	r3, [r4, #16]
 8005248:	dc02      	bgt.n	8005250 <_printf_float+0x164>
 800524a:	6822      	ldr	r2, [r4, #0]
 800524c:	07d2      	lsls	r2, r2, #31
 800524e:	d501      	bpl.n	8005254 <_printf_float+0x168>
 8005250:	3301      	adds	r3, #1
 8005252:	6123      	str	r3, [r4, #16]
 8005254:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005258:	2b00      	cmp	r3, #0
 800525a:	d09c      	beq.n	8005196 <_printf_float+0xaa>
 800525c:	232d      	movs	r3, #45	; 0x2d
 800525e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005262:	e798      	b.n	8005196 <_printf_float+0xaa>
 8005264:	9a06      	ldr	r2, [sp, #24]
 8005266:	2a47      	cmp	r2, #71	; 0x47
 8005268:	d1be      	bne.n	80051e8 <_printf_float+0xfc>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1bc      	bne.n	80051e8 <_printf_float+0xfc>
 800526e:	2301      	movs	r3, #1
 8005270:	e7b9      	b.n	80051e6 <_printf_float+0xfa>
 8005272:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005276:	d118      	bne.n	80052aa <_printf_float+0x1be>
 8005278:	2900      	cmp	r1, #0
 800527a:	6863      	ldr	r3, [r4, #4]
 800527c:	dd0b      	ble.n	8005296 <_printf_float+0x1aa>
 800527e:	6121      	str	r1, [r4, #16]
 8005280:	b913      	cbnz	r3, 8005288 <_printf_float+0x19c>
 8005282:	6822      	ldr	r2, [r4, #0]
 8005284:	07d0      	lsls	r0, r2, #31
 8005286:	d502      	bpl.n	800528e <_printf_float+0x1a2>
 8005288:	3301      	adds	r3, #1
 800528a:	440b      	add	r3, r1
 800528c:	6123      	str	r3, [r4, #16]
 800528e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005290:	f04f 0900 	mov.w	r9, #0
 8005294:	e7de      	b.n	8005254 <_printf_float+0x168>
 8005296:	b913      	cbnz	r3, 800529e <_printf_float+0x1b2>
 8005298:	6822      	ldr	r2, [r4, #0]
 800529a:	07d2      	lsls	r2, r2, #31
 800529c:	d501      	bpl.n	80052a2 <_printf_float+0x1b6>
 800529e:	3302      	adds	r3, #2
 80052a0:	e7f4      	b.n	800528c <_printf_float+0x1a0>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e7f2      	b.n	800528c <_printf_float+0x1a0>
 80052a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80052aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ac:	4299      	cmp	r1, r3
 80052ae:	db05      	blt.n	80052bc <_printf_float+0x1d0>
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	6121      	str	r1, [r4, #16]
 80052b4:	07d8      	lsls	r0, r3, #31
 80052b6:	d5ea      	bpl.n	800528e <_printf_float+0x1a2>
 80052b8:	1c4b      	adds	r3, r1, #1
 80052ba:	e7e7      	b.n	800528c <_printf_float+0x1a0>
 80052bc:	2900      	cmp	r1, #0
 80052be:	bfd4      	ite	le
 80052c0:	f1c1 0202 	rsble	r2, r1, #2
 80052c4:	2201      	movgt	r2, #1
 80052c6:	4413      	add	r3, r2
 80052c8:	e7e0      	b.n	800528c <_printf_float+0x1a0>
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	055a      	lsls	r2, r3, #21
 80052ce:	d407      	bmi.n	80052e0 <_printf_float+0x1f4>
 80052d0:	6923      	ldr	r3, [r4, #16]
 80052d2:	4642      	mov	r2, r8
 80052d4:	4631      	mov	r1, r6
 80052d6:	4628      	mov	r0, r5
 80052d8:	47b8      	blx	r7
 80052da:	3001      	adds	r0, #1
 80052dc:	d12c      	bne.n	8005338 <_printf_float+0x24c>
 80052de:	e764      	b.n	80051aa <_printf_float+0xbe>
 80052e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80052e4:	f240 80e0 	bls.w	80054a8 <_printf_float+0x3bc>
 80052e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052ec:	2200      	movs	r2, #0
 80052ee:	2300      	movs	r3, #0
 80052f0:	f7fb fbfa 	bl	8000ae8 <__aeabi_dcmpeq>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d034      	beq.n	8005362 <_printf_float+0x276>
 80052f8:	4a37      	ldr	r2, [pc, #220]	; (80053d8 <_printf_float+0x2ec>)
 80052fa:	2301      	movs	r3, #1
 80052fc:	4631      	mov	r1, r6
 80052fe:	4628      	mov	r0, r5
 8005300:	47b8      	blx	r7
 8005302:	3001      	adds	r0, #1
 8005304:	f43f af51 	beq.w	80051aa <_printf_float+0xbe>
 8005308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800530c:	429a      	cmp	r2, r3
 800530e:	db02      	blt.n	8005316 <_printf_float+0x22a>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	07d8      	lsls	r0, r3, #31
 8005314:	d510      	bpl.n	8005338 <_printf_float+0x24c>
 8005316:	ee18 3a10 	vmov	r3, s16
 800531a:	4652      	mov	r2, sl
 800531c:	4631      	mov	r1, r6
 800531e:	4628      	mov	r0, r5
 8005320:	47b8      	blx	r7
 8005322:	3001      	adds	r0, #1
 8005324:	f43f af41 	beq.w	80051aa <_printf_float+0xbe>
 8005328:	f04f 0800 	mov.w	r8, #0
 800532c:	f104 091a 	add.w	r9, r4, #26
 8005330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005332:	3b01      	subs	r3, #1
 8005334:	4543      	cmp	r3, r8
 8005336:	dc09      	bgt.n	800534c <_printf_float+0x260>
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	079b      	lsls	r3, r3, #30
 800533c:	f100 8107 	bmi.w	800554e <_printf_float+0x462>
 8005340:	68e0      	ldr	r0, [r4, #12]
 8005342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005344:	4298      	cmp	r0, r3
 8005346:	bfb8      	it	lt
 8005348:	4618      	movlt	r0, r3
 800534a:	e730      	b.n	80051ae <_printf_float+0xc2>
 800534c:	2301      	movs	r3, #1
 800534e:	464a      	mov	r2, r9
 8005350:	4631      	mov	r1, r6
 8005352:	4628      	mov	r0, r5
 8005354:	47b8      	blx	r7
 8005356:	3001      	adds	r0, #1
 8005358:	f43f af27 	beq.w	80051aa <_printf_float+0xbe>
 800535c:	f108 0801 	add.w	r8, r8, #1
 8005360:	e7e6      	b.n	8005330 <_printf_float+0x244>
 8005362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005364:	2b00      	cmp	r3, #0
 8005366:	dc39      	bgt.n	80053dc <_printf_float+0x2f0>
 8005368:	4a1b      	ldr	r2, [pc, #108]	; (80053d8 <_printf_float+0x2ec>)
 800536a:	2301      	movs	r3, #1
 800536c:	4631      	mov	r1, r6
 800536e:	4628      	mov	r0, r5
 8005370:	47b8      	blx	r7
 8005372:	3001      	adds	r0, #1
 8005374:	f43f af19 	beq.w	80051aa <_printf_float+0xbe>
 8005378:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800537c:	4313      	orrs	r3, r2
 800537e:	d102      	bne.n	8005386 <_printf_float+0x29a>
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	07d9      	lsls	r1, r3, #31
 8005384:	d5d8      	bpl.n	8005338 <_printf_float+0x24c>
 8005386:	ee18 3a10 	vmov	r3, s16
 800538a:	4652      	mov	r2, sl
 800538c:	4631      	mov	r1, r6
 800538e:	4628      	mov	r0, r5
 8005390:	47b8      	blx	r7
 8005392:	3001      	adds	r0, #1
 8005394:	f43f af09 	beq.w	80051aa <_printf_float+0xbe>
 8005398:	f04f 0900 	mov.w	r9, #0
 800539c:	f104 0a1a 	add.w	sl, r4, #26
 80053a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a2:	425b      	negs	r3, r3
 80053a4:	454b      	cmp	r3, r9
 80053a6:	dc01      	bgt.n	80053ac <_printf_float+0x2c0>
 80053a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053aa:	e792      	b.n	80052d2 <_printf_float+0x1e6>
 80053ac:	2301      	movs	r3, #1
 80053ae:	4652      	mov	r2, sl
 80053b0:	4631      	mov	r1, r6
 80053b2:	4628      	mov	r0, r5
 80053b4:	47b8      	blx	r7
 80053b6:	3001      	adds	r0, #1
 80053b8:	f43f aef7 	beq.w	80051aa <_printf_float+0xbe>
 80053bc:	f109 0901 	add.w	r9, r9, #1
 80053c0:	e7ee      	b.n	80053a0 <_printf_float+0x2b4>
 80053c2:	bf00      	nop
 80053c4:	7fefffff 	.word	0x7fefffff
 80053c8:	0800a14c 	.word	0x0800a14c
 80053cc:	0800a150 	.word	0x0800a150
 80053d0:	0800a154 	.word	0x0800a154
 80053d4:	0800a158 	.word	0x0800a158
 80053d8:	0800a4e8 	.word	0x0800a4e8
 80053dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053e0:	429a      	cmp	r2, r3
 80053e2:	bfa8      	it	ge
 80053e4:	461a      	movge	r2, r3
 80053e6:	2a00      	cmp	r2, #0
 80053e8:	4691      	mov	r9, r2
 80053ea:	dc37      	bgt.n	800545c <_printf_float+0x370>
 80053ec:	f04f 0b00 	mov.w	fp, #0
 80053f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053f4:	f104 021a 	add.w	r2, r4, #26
 80053f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053fa:	9305      	str	r3, [sp, #20]
 80053fc:	eba3 0309 	sub.w	r3, r3, r9
 8005400:	455b      	cmp	r3, fp
 8005402:	dc33      	bgt.n	800546c <_printf_float+0x380>
 8005404:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005408:	429a      	cmp	r2, r3
 800540a:	db3b      	blt.n	8005484 <_printf_float+0x398>
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	07da      	lsls	r2, r3, #31
 8005410:	d438      	bmi.n	8005484 <_printf_float+0x398>
 8005412:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005416:	eba2 0903 	sub.w	r9, r2, r3
 800541a:	9b05      	ldr	r3, [sp, #20]
 800541c:	1ad2      	subs	r2, r2, r3
 800541e:	4591      	cmp	r9, r2
 8005420:	bfa8      	it	ge
 8005422:	4691      	movge	r9, r2
 8005424:	f1b9 0f00 	cmp.w	r9, #0
 8005428:	dc35      	bgt.n	8005496 <_printf_float+0x3aa>
 800542a:	f04f 0800 	mov.w	r8, #0
 800542e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005432:	f104 0a1a 	add.w	sl, r4, #26
 8005436:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	eba3 0309 	sub.w	r3, r3, r9
 8005440:	4543      	cmp	r3, r8
 8005442:	f77f af79 	ble.w	8005338 <_printf_float+0x24c>
 8005446:	2301      	movs	r3, #1
 8005448:	4652      	mov	r2, sl
 800544a:	4631      	mov	r1, r6
 800544c:	4628      	mov	r0, r5
 800544e:	47b8      	blx	r7
 8005450:	3001      	adds	r0, #1
 8005452:	f43f aeaa 	beq.w	80051aa <_printf_float+0xbe>
 8005456:	f108 0801 	add.w	r8, r8, #1
 800545a:	e7ec      	b.n	8005436 <_printf_float+0x34a>
 800545c:	4613      	mov	r3, r2
 800545e:	4631      	mov	r1, r6
 8005460:	4642      	mov	r2, r8
 8005462:	4628      	mov	r0, r5
 8005464:	47b8      	blx	r7
 8005466:	3001      	adds	r0, #1
 8005468:	d1c0      	bne.n	80053ec <_printf_float+0x300>
 800546a:	e69e      	b.n	80051aa <_printf_float+0xbe>
 800546c:	2301      	movs	r3, #1
 800546e:	4631      	mov	r1, r6
 8005470:	4628      	mov	r0, r5
 8005472:	9205      	str	r2, [sp, #20]
 8005474:	47b8      	blx	r7
 8005476:	3001      	adds	r0, #1
 8005478:	f43f ae97 	beq.w	80051aa <_printf_float+0xbe>
 800547c:	9a05      	ldr	r2, [sp, #20]
 800547e:	f10b 0b01 	add.w	fp, fp, #1
 8005482:	e7b9      	b.n	80053f8 <_printf_float+0x30c>
 8005484:	ee18 3a10 	vmov	r3, s16
 8005488:	4652      	mov	r2, sl
 800548a:	4631      	mov	r1, r6
 800548c:	4628      	mov	r0, r5
 800548e:	47b8      	blx	r7
 8005490:	3001      	adds	r0, #1
 8005492:	d1be      	bne.n	8005412 <_printf_float+0x326>
 8005494:	e689      	b.n	80051aa <_printf_float+0xbe>
 8005496:	9a05      	ldr	r2, [sp, #20]
 8005498:	464b      	mov	r3, r9
 800549a:	4442      	add	r2, r8
 800549c:	4631      	mov	r1, r6
 800549e:	4628      	mov	r0, r5
 80054a0:	47b8      	blx	r7
 80054a2:	3001      	adds	r0, #1
 80054a4:	d1c1      	bne.n	800542a <_printf_float+0x33e>
 80054a6:	e680      	b.n	80051aa <_printf_float+0xbe>
 80054a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054aa:	2a01      	cmp	r2, #1
 80054ac:	dc01      	bgt.n	80054b2 <_printf_float+0x3c6>
 80054ae:	07db      	lsls	r3, r3, #31
 80054b0:	d53a      	bpl.n	8005528 <_printf_float+0x43c>
 80054b2:	2301      	movs	r3, #1
 80054b4:	4642      	mov	r2, r8
 80054b6:	4631      	mov	r1, r6
 80054b8:	4628      	mov	r0, r5
 80054ba:	47b8      	blx	r7
 80054bc:	3001      	adds	r0, #1
 80054be:	f43f ae74 	beq.w	80051aa <_printf_float+0xbe>
 80054c2:	ee18 3a10 	vmov	r3, s16
 80054c6:	4652      	mov	r2, sl
 80054c8:	4631      	mov	r1, r6
 80054ca:	4628      	mov	r0, r5
 80054cc:	47b8      	blx	r7
 80054ce:	3001      	adds	r0, #1
 80054d0:	f43f ae6b 	beq.w	80051aa <_printf_float+0xbe>
 80054d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054d8:	2200      	movs	r2, #0
 80054da:	2300      	movs	r3, #0
 80054dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80054e0:	f7fb fb02 	bl	8000ae8 <__aeabi_dcmpeq>
 80054e4:	b9d8      	cbnz	r0, 800551e <_printf_float+0x432>
 80054e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80054ea:	f108 0201 	add.w	r2, r8, #1
 80054ee:	4631      	mov	r1, r6
 80054f0:	4628      	mov	r0, r5
 80054f2:	47b8      	blx	r7
 80054f4:	3001      	adds	r0, #1
 80054f6:	d10e      	bne.n	8005516 <_printf_float+0x42a>
 80054f8:	e657      	b.n	80051aa <_printf_float+0xbe>
 80054fa:	2301      	movs	r3, #1
 80054fc:	4652      	mov	r2, sl
 80054fe:	4631      	mov	r1, r6
 8005500:	4628      	mov	r0, r5
 8005502:	47b8      	blx	r7
 8005504:	3001      	adds	r0, #1
 8005506:	f43f ae50 	beq.w	80051aa <_printf_float+0xbe>
 800550a:	f108 0801 	add.w	r8, r8, #1
 800550e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005510:	3b01      	subs	r3, #1
 8005512:	4543      	cmp	r3, r8
 8005514:	dcf1      	bgt.n	80054fa <_printf_float+0x40e>
 8005516:	464b      	mov	r3, r9
 8005518:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800551c:	e6da      	b.n	80052d4 <_printf_float+0x1e8>
 800551e:	f04f 0800 	mov.w	r8, #0
 8005522:	f104 0a1a 	add.w	sl, r4, #26
 8005526:	e7f2      	b.n	800550e <_printf_float+0x422>
 8005528:	2301      	movs	r3, #1
 800552a:	4642      	mov	r2, r8
 800552c:	e7df      	b.n	80054ee <_printf_float+0x402>
 800552e:	2301      	movs	r3, #1
 8005530:	464a      	mov	r2, r9
 8005532:	4631      	mov	r1, r6
 8005534:	4628      	mov	r0, r5
 8005536:	47b8      	blx	r7
 8005538:	3001      	adds	r0, #1
 800553a:	f43f ae36 	beq.w	80051aa <_printf_float+0xbe>
 800553e:	f108 0801 	add.w	r8, r8, #1
 8005542:	68e3      	ldr	r3, [r4, #12]
 8005544:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005546:	1a5b      	subs	r3, r3, r1
 8005548:	4543      	cmp	r3, r8
 800554a:	dcf0      	bgt.n	800552e <_printf_float+0x442>
 800554c:	e6f8      	b.n	8005340 <_printf_float+0x254>
 800554e:	f04f 0800 	mov.w	r8, #0
 8005552:	f104 0919 	add.w	r9, r4, #25
 8005556:	e7f4      	b.n	8005542 <_printf_float+0x456>

08005558 <_printf_common>:
 8005558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800555c:	4616      	mov	r6, r2
 800555e:	4699      	mov	r9, r3
 8005560:	688a      	ldr	r2, [r1, #8]
 8005562:	690b      	ldr	r3, [r1, #16]
 8005564:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005568:	4293      	cmp	r3, r2
 800556a:	bfb8      	it	lt
 800556c:	4613      	movlt	r3, r2
 800556e:	6033      	str	r3, [r6, #0]
 8005570:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005574:	4607      	mov	r7, r0
 8005576:	460c      	mov	r4, r1
 8005578:	b10a      	cbz	r2, 800557e <_printf_common+0x26>
 800557a:	3301      	adds	r3, #1
 800557c:	6033      	str	r3, [r6, #0]
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	0699      	lsls	r1, r3, #26
 8005582:	bf42      	ittt	mi
 8005584:	6833      	ldrmi	r3, [r6, #0]
 8005586:	3302      	addmi	r3, #2
 8005588:	6033      	strmi	r3, [r6, #0]
 800558a:	6825      	ldr	r5, [r4, #0]
 800558c:	f015 0506 	ands.w	r5, r5, #6
 8005590:	d106      	bne.n	80055a0 <_printf_common+0x48>
 8005592:	f104 0a19 	add.w	sl, r4, #25
 8005596:	68e3      	ldr	r3, [r4, #12]
 8005598:	6832      	ldr	r2, [r6, #0]
 800559a:	1a9b      	subs	r3, r3, r2
 800559c:	42ab      	cmp	r3, r5
 800559e:	dc26      	bgt.n	80055ee <_printf_common+0x96>
 80055a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055a4:	1e13      	subs	r3, r2, #0
 80055a6:	6822      	ldr	r2, [r4, #0]
 80055a8:	bf18      	it	ne
 80055aa:	2301      	movne	r3, #1
 80055ac:	0692      	lsls	r2, r2, #26
 80055ae:	d42b      	bmi.n	8005608 <_printf_common+0xb0>
 80055b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055b4:	4649      	mov	r1, r9
 80055b6:	4638      	mov	r0, r7
 80055b8:	47c0      	blx	r8
 80055ba:	3001      	adds	r0, #1
 80055bc:	d01e      	beq.n	80055fc <_printf_common+0xa4>
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	6922      	ldr	r2, [r4, #16]
 80055c2:	f003 0306 	and.w	r3, r3, #6
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	bf02      	ittt	eq
 80055ca:	68e5      	ldreq	r5, [r4, #12]
 80055cc:	6833      	ldreq	r3, [r6, #0]
 80055ce:	1aed      	subeq	r5, r5, r3
 80055d0:	68a3      	ldr	r3, [r4, #8]
 80055d2:	bf0c      	ite	eq
 80055d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055d8:	2500      	movne	r5, #0
 80055da:	4293      	cmp	r3, r2
 80055dc:	bfc4      	itt	gt
 80055de:	1a9b      	subgt	r3, r3, r2
 80055e0:	18ed      	addgt	r5, r5, r3
 80055e2:	2600      	movs	r6, #0
 80055e4:	341a      	adds	r4, #26
 80055e6:	42b5      	cmp	r5, r6
 80055e8:	d11a      	bne.n	8005620 <_printf_common+0xc8>
 80055ea:	2000      	movs	r0, #0
 80055ec:	e008      	b.n	8005600 <_printf_common+0xa8>
 80055ee:	2301      	movs	r3, #1
 80055f0:	4652      	mov	r2, sl
 80055f2:	4649      	mov	r1, r9
 80055f4:	4638      	mov	r0, r7
 80055f6:	47c0      	blx	r8
 80055f8:	3001      	adds	r0, #1
 80055fa:	d103      	bne.n	8005604 <_printf_common+0xac>
 80055fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005604:	3501      	adds	r5, #1
 8005606:	e7c6      	b.n	8005596 <_printf_common+0x3e>
 8005608:	18e1      	adds	r1, r4, r3
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	2030      	movs	r0, #48	; 0x30
 800560e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005612:	4422      	add	r2, r4
 8005614:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005618:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800561c:	3302      	adds	r3, #2
 800561e:	e7c7      	b.n	80055b0 <_printf_common+0x58>
 8005620:	2301      	movs	r3, #1
 8005622:	4622      	mov	r2, r4
 8005624:	4649      	mov	r1, r9
 8005626:	4638      	mov	r0, r7
 8005628:	47c0      	blx	r8
 800562a:	3001      	adds	r0, #1
 800562c:	d0e6      	beq.n	80055fc <_printf_common+0xa4>
 800562e:	3601      	adds	r6, #1
 8005630:	e7d9      	b.n	80055e6 <_printf_common+0x8e>
	...

08005634 <_printf_i>:
 8005634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005638:	7e0f      	ldrb	r7, [r1, #24]
 800563a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800563c:	2f78      	cmp	r7, #120	; 0x78
 800563e:	4691      	mov	r9, r2
 8005640:	4680      	mov	r8, r0
 8005642:	460c      	mov	r4, r1
 8005644:	469a      	mov	sl, r3
 8005646:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800564a:	d807      	bhi.n	800565c <_printf_i+0x28>
 800564c:	2f62      	cmp	r7, #98	; 0x62
 800564e:	d80a      	bhi.n	8005666 <_printf_i+0x32>
 8005650:	2f00      	cmp	r7, #0
 8005652:	f000 80d4 	beq.w	80057fe <_printf_i+0x1ca>
 8005656:	2f58      	cmp	r7, #88	; 0x58
 8005658:	f000 80c0 	beq.w	80057dc <_printf_i+0x1a8>
 800565c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005660:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005664:	e03a      	b.n	80056dc <_printf_i+0xa8>
 8005666:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800566a:	2b15      	cmp	r3, #21
 800566c:	d8f6      	bhi.n	800565c <_printf_i+0x28>
 800566e:	a101      	add	r1, pc, #4	; (adr r1, 8005674 <_printf_i+0x40>)
 8005670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005674:	080056cd 	.word	0x080056cd
 8005678:	080056e1 	.word	0x080056e1
 800567c:	0800565d 	.word	0x0800565d
 8005680:	0800565d 	.word	0x0800565d
 8005684:	0800565d 	.word	0x0800565d
 8005688:	0800565d 	.word	0x0800565d
 800568c:	080056e1 	.word	0x080056e1
 8005690:	0800565d 	.word	0x0800565d
 8005694:	0800565d 	.word	0x0800565d
 8005698:	0800565d 	.word	0x0800565d
 800569c:	0800565d 	.word	0x0800565d
 80056a0:	080057e5 	.word	0x080057e5
 80056a4:	0800570d 	.word	0x0800570d
 80056a8:	0800579f 	.word	0x0800579f
 80056ac:	0800565d 	.word	0x0800565d
 80056b0:	0800565d 	.word	0x0800565d
 80056b4:	08005807 	.word	0x08005807
 80056b8:	0800565d 	.word	0x0800565d
 80056bc:	0800570d 	.word	0x0800570d
 80056c0:	0800565d 	.word	0x0800565d
 80056c4:	0800565d 	.word	0x0800565d
 80056c8:	080057a7 	.word	0x080057a7
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	1d1a      	adds	r2, r3, #4
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	602a      	str	r2, [r5, #0]
 80056d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056dc:	2301      	movs	r3, #1
 80056de:	e09f      	b.n	8005820 <_printf_i+0x1ec>
 80056e0:	6820      	ldr	r0, [r4, #0]
 80056e2:	682b      	ldr	r3, [r5, #0]
 80056e4:	0607      	lsls	r7, r0, #24
 80056e6:	f103 0104 	add.w	r1, r3, #4
 80056ea:	6029      	str	r1, [r5, #0]
 80056ec:	d501      	bpl.n	80056f2 <_printf_i+0xbe>
 80056ee:	681e      	ldr	r6, [r3, #0]
 80056f0:	e003      	b.n	80056fa <_printf_i+0xc6>
 80056f2:	0646      	lsls	r6, r0, #25
 80056f4:	d5fb      	bpl.n	80056ee <_printf_i+0xba>
 80056f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80056fa:	2e00      	cmp	r6, #0
 80056fc:	da03      	bge.n	8005706 <_printf_i+0xd2>
 80056fe:	232d      	movs	r3, #45	; 0x2d
 8005700:	4276      	negs	r6, r6
 8005702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005706:	485a      	ldr	r0, [pc, #360]	; (8005870 <_printf_i+0x23c>)
 8005708:	230a      	movs	r3, #10
 800570a:	e012      	b.n	8005732 <_printf_i+0xfe>
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	6820      	ldr	r0, [r4, #0]
 8005710:	1d19      	adds	r1, r3, #4
 8005712:	6029      	str	r1, [r5, #0]
 8005714:	0605      	lsls	r5, r0, #24
 8005716:	d501      	bpl.n	800571c <_printf_i+0xe8>
 8005718:	681e      	ldr	r6, [r3, #0]
 800571a:	e002      	b.n	8005722 <_printf_i+0xee>
 800571c:	0641      	lsls	r1, r0, #25
 800571e:	d5fb      	bpl.n	8005718 <_printf_i+0xe4>
 8005720:	881e      	ldrh	r6, [r3, #0]
 8005722:	4853      	ldr	r0, [pc, #332]	; (8005870 <_printf_i+0x23c>)
 8005724:	2f6f      	cmp	r7, #111	; 0x6f
 8005726:	bf0c      	ite	eq
 8005728:	2308      	moveq	r3, #8
 800572a:	230a      	movne	r3, #10
 800572c:	2100      	movs	r1, #0
 800572e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005732:	6865      	ldr	r5, [r4, #4]
 8005734:	60a5      	str	r5, [r4, #8]
 8005736:	2d00      	cmp	r5, #0
 8005738:	bfa2      	ittt	ge
 800573a:	6821      	ldrge	r1, [r4, #0]
 800573c:	f021 0104 	bicge.w	r1, r1, #4
 8005740:	6021      	strge	r1, [r4, #0]
 8005742:	b90e      	cbnz	r6, 8005748 <_printf_i+0x114>
 8005744:	2d00      	cmp	r5, #0
 8005746:	d04b      	beq.n	80057e0 <_printf_i+0x1ac>
 8005748:	4615      	mov	r5, r2
 800574a:	fbb6 f1f3 	udiv	r1, r6, r3
 800574e:	fb03 6711 	mls	r7, r3, r1, r6
 8005752:	5dc7      	ldrb	r7, [r0, r7]
 8005754:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005758:	4637      	mov	r7, r6
 800575a:	42bb      	cmp	r3, r7
 800575c:	460e      	mov	r6, r1
 800575e:	d9f4      	bls.n	800574a <_printf_i+0x116>
 8005760:	2b08      	cmp	r3, #8
 8005762:	d10b      	bne.n	800577c <_printf_i+0x148>
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	07de      	lsls	r6, r3, #31
 8005768:	d508      	bpl.n	800577c <_printf_i+0x148>
 800576a:	6923      	ldr	r3, [r4, #16]
 800576c:	6861      	ldr	r1, [r4, #4]
 800576e:	4299      	cmp	r1, r3
 8005770:	bfde      	ittt	le
 8005772:	2330      	movle	r3, #48	; 0x30
 8005774:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005778:	f105 35ff 	addle.w	r5, r5, #4294967295
 800577c:	1b52      	subs	r2, r2, r5
 800577e:	6122      	str	r2, [r4, #16]
 8005780:	f8cd a000 	str.w	sl, [sp]
 8005784:	464b      	mov	r3, r9
 8005786:	aa03      	add	r2, sp, #12
 8005788:	4621      	mov	r1, r4
 800578a:	4640      	mov	r0, r8
 800578c:	f7ff fee4 	bl	8005558 <_printf_common>
 8005790:	3001      	adds	r0, #1
 8005792:	d14a      	bne.n	800582a <_printf_i+0x1f6>
 8005794:	f04f 30ff 	mov.w	r0, #4294967295
 8005798:	b004      	add	sp, #16
 800579a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	f043 0320 	orr.w	r3, r3, #32
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	4833      	ldr	r0, [pc, #204]	; (8005874 <_printf_i+0x240>)
 80057a8:	2778      	movs	r7, #120	; 0x78
 80057aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	6829      	ldr	r1, [r5, #0]
 80057b2:	061f      	lsls	r7, r3, #24
 80057b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80057b8:	d402      	bmi.n	80057c0 <_printf_i+0x18c>
 80057ba:	065f      	lsls	r7, r3, #25
 80057bc:	bf48      	it	mi
 80057be:	b2b6      	uxthmi	r6, r6
 80057c0:	07df      	lsls	r7, r3, #31
 80057c2:	bf48      	it	mi
 80057c4:	f043 0320 	orrmi.w	r3, r3, #32
 80057c8:	6029      	str	r1, [r5, #0]
 80057ca:	bf48      	it	mi
 80057cc:	6023      	strmi	r3, [r4, #0]
 80057ce:	b91e      	cbnz	r6, 80057d8 <_printf_i+0x1a4>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	f023 0320 	bic.w	r3, r3, #32
 80057d6:	6023      	str	r3, [r4, #0]
 80057d8:	2310      	movs	r3, #16
 80057da:	e7a7      	b.n	800572c <_printf_i+0xf8>
 80057dc:	4824      	ldr	r0, [pc, #144]	; (8005870 <_printf_i+0x23c>)
 80057de:	e7e4      	b.n	80057aa <_printf_i+0x176>
 80057e0:	4615      	mov	r5, r2
 80057e2:	e7bd      	b.n	8005760 <_printf_i+0x12c>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	6826      	ldr	r6, [r4, #0]
 80057e8:	6961      	ldr	r1, [r4, #20]
 80057ea:	1d18      	adds	r0, r3, #4
 80057ec:	6028      	str	r0, [r5, #0]
 80057ee:	0635      	lsls	r5, r6, #24
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	d501      	bpl.n	80057f8 <_printf_i+0x1c4>
 80057f4:	6019      	str	r1, [r3, #0]
 80057f6:	e002      	b.n	80057fe <_printf_i+0x1ca>
 80057f8:	0670      	lsls	r0, r6, #25
 80057fa:	d5fb      	bpl.n	80057f4 <_printf_i+0x1c0>
 80057fc:	8019      	strh	r1, [r3, #0]
 80057fe:	2300      	movs	r3, #0
 8005800:	6123      	str	r3, [r4, #16]
 8005802:	4615      	mov	r5, r2
 8005804:	e7bc      	b.n	8005780 <_printf_i+0x14c>
 8005806:	682b      	ldr	r3, [r5, #0]
 8005808:	1d1a      	adds	r2, r3, #4
 800580a:	602a      	str	r2, [r5, #0]
 800580c:	681d      	ldr	r5, [r3, #0]
 800580e:	6862      	ldr	r2, [r4, #4]
 8005810:	2100      	movs	r1, #0
 8005812:	4628      	mov	r0, r5
 8005814:	f7fa fcec 	bl	80001f0 <memchr>
 8005818:	b108      	cbz	r0, 800581e <_printf_i+0x1ea>
 800581a:	1b40      	subs	r0, r0, r5
 800581c:	6060      	str	r0, [r4, #4]
 800581e:	6863      	ldr	r3, [r4, #4]
 8005820:	6123      	str	r3, [r4, #16]
 8005822:	2300      	movs	r3, #0
 8005824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005828:	e7aa      	b.n	8005780 <_printf_i+0x14c>
 800582a:	6923      	ldr	r3, [r4, #16]
 800582c:	462a      	mov	r2, r5
 800582e:	4649      	mov	r1, r9
 8005830:	4640      	mov	r0, r8
 8005832:	47d0      	blx	sl
 8005834:	3001      	adds	r0, #1
 8005836:	d0ad      	beq.n	8005794 <_printf_i+0x160>
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	079b      	lsls	r3, r3, #30
 800583c:	d413      	bmi.n	8005866 <_printf_i+0x232>
 800583e:	68e0      	ldr	r0, [r4, #12]
 8005840:	9b03      	ldr	r3, [sp, #12]
 8005842:	4298      	cmp	r0, r3
 8005844:	bfb8      	it	lt
 8005846:	4618      	movlt	r0, r3
 8005848:	e7a6      	b.n	8005798 <_printf_i+0x164>
 800584a:	2301      	movs	r3, #1
 800584c:	4632      	mov	r2, r6
 800584e:	4649      	mov	r1, r9
 8005850:	4640      	mov	r0, r8
 8005852:	47d0      	blx	sl
 8005854:	3001      	adds	r0, #1
 8005856:	d09d      	beq.n	8005794 <_printf_i+0x160>
 8005858:	3501      	adds	r5, #1
 800585a:	68e3      	ldr	r3, [r4, #12]
 800585c:	9903      	ldr	r1, [sp, #12]
 800585e:	1a5b      	subs	r3, r3, r1
 8005860:	42ab      	cmp	r3, r5
 8005862:	dcf2      	bgt.n	800584a <_printf_i+0x216>
 8005864:	e7eb      	b.n	800583e <_printf_i+0x20a>
 8005866:	2500      	movs	r5, #0
 8005868:	f104 0619 	add.w	r6, r4, #25
 800586c:	e7f5      	b.n	800585a <_printf_i+0x226>
 800586e:	bf00      	nop
 8005870:	0800a15c 	.word	0x0800a15c
 8005874:	0800a16d 	.word	0x0800a16d

08005878 <_scanf_float>:
 8005878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587c:	b087      	sub	sp, #28
 800587e:	4617      	mov	r7, r2
 8005880:	9303      	str	r3, [sp, #12]
 8005882:	688b      	ldr	r3, [r1, #8]
 8005884:	1e5a      	subs	r2, r3, #1
 8005886:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800588a:	bf83      	ittte	hi
 800588c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005890:	195b      	addhi	r3, r3, r5
 8005892:	9302      	strhi	r3, [sp, #8]
 8005894:	2300      	movls	r3, #0
 8005896:	bf86      	itte	hi
 8005898:	f240 135d 	movwhi	r3, #349	; 0x15d
 800589c:	608b      	strhi	r3, [r1, #8]
 800589e:	9302      	strls	r3, [sp, #8]
 80058a0:	680b      	ldr	r3, [r1, #0]
 80058a2:	468b      	mov	fp, r1
 80058a4:	2500      	movs	r5, #0
 80058a6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80058aa:	f84b 3b1c 	str.w	r3, [fp], #28
 80058ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80058b2:	4680      	mov	r8, r0
 80058b4:	460c      	mov	r4, r1
 80058b6:	465e      	mov	r6, fp
 80058b8:	46aa      	mov	sl, r5
 80058ba:	46a9      	mov	r9, r5
 80058bc:	9501      	str	r5, [sp, #4]
 80058be:	68a2      	ldr	r2, [r4, #8]
 80058c0:	b152      	cbz	r2, 80058d8 <_scanf_float+0x60>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b4e      	cmp	r3, #78	; 0x4e
 80058c8:	d864      	bhi.n	8005994 <_scanf_float+0x11c>
 80058ca:	2b40      	cmp	r3, #64	; 0x40
 80058cc:	d83c      	bhi.n	8005948 <_scanf_float+0xd0>
 80058ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80058d2:	b2c8      	uxtb	r0, r1
 80058d4:	280e      	cmp	r0, #14
 80058d6:	d93a      	bls.n	800594e <_scanf_float+0xd6>
 80058d8:	f1b9 0f00 	cmp.w	r9, #0
 80058dc:	d003      	beq.n	80058e6 <_scanf_float+0x6e>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058ea:	f1ba 0f01 	cmp.w	sl, #1
 80058ee:	f200 8113 	bhi.w	8005b18 <_scanf_float+0x2a0>
 80058f2:	455e      	cmp	r6, fp
 80058f4:	f200 8105 	bhi.w	8005b02 <_scanf_float+0x28a>
 80058f8:	2501      	movs	r5, #1
 80058fa:	4628      	mov	r0, r5
 80058fc:	b007      	add	sp, #28
 80058fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005902:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005906:	2a0d      	cmp	r2, #13
 8005908:	d8e6      	bhi.n	80058d8 <_scanf_float+0x60>
 800590a:	a101      	add	r1, pc, #4	; (adr r1, 8005910 <_scanf_float+0x98>)
 800590c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005910:	08005a4f 	.word	0x08005a4f
 8005914:	080058d9 	.word	0x080058d9
 8005918:	080058d9 	.word	0x080058d9
 800591c:	080058d9 	.word	0x080058d9
 8005920:	08005aaf 	.word	0x08005aaf
 8005924:	08005a87 	.word	0x08005a87
 8005928:	080058d9 	.word	0x080058d9
 800592c:	080058d9 	.word	0x080058d9
 8005930:	08005a5d 	.word	0x08005a5d
 8005934:	080058d9 	.word	0x080058d9
 8005938:	080058d9 	.word	0x080058d9
 800593c:	080058d9 	.word	0x080058d9
 8005940:	080058d9 	.word	0x080058d9
 8005944:	08005a15 	.word	0x08005a15
 8005948:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800594c:	e7db      	b.n	8005906 <_scanf_float+0x8e>
 800594e:	290e      	cmp	r1, #14
 8005950:	d8c2      	bhi.n	80058d8 <_scanf_float+0x60>
 8005952:	a001      	add	r0, pc, #4	; (adr r0, 8005958 <_scanf_float+0xe0>)
 8005954:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005958:	08005a07 	.word	0x08005a07
 800595c:	080058d9 	.word	0x080058d9
 8005960:	08005a07 	.word	0x08005a07
 8005964:	08005a9b 	.word	0x08005a9b
 8005968:	080058d9 	.word	0x080058d9
 800596c:	080059b5 	.word	0x080059b5
 8005970:	080059f1 	.word	0x080059f1
 8005974:	080059f1 	.word	0x080059f1
 8005978:	080059f1 	.word	0x080059f1
 800597c:	080059f1 	.word	0x080059f1
 8005980:	080059f1 	.word	0x080059f1
 8005984:	080059f1 	.word	0x080059f1
 8005988:	080059f1 	.word	0x080059f1
 800598c:	080059f1 	.word	0x080059f1
 8005990:	080059f1 	.word	0x080059f1
 8005994:	2b6e      	cmp	r3, #110	; 0x6e
 8005996:	d809      	bhi.n	80059ac <_scanf_float+0x134>
 8005998:	2b60      	cmp	r3, #96	; 0x60
 800599a:	d8b2      	bhi.n	8005902 <_scanf_float+0x8a>
 800599c:	2b54      	cmp	r3, #84	; 0x54
 800599e:	d077      	beq.n	8005a90 <_scanf_float+0x218>
 80059a0:	2b59      	cmp	r3, #89	; 0x59
 80059a2:	d199      	bne.n	80058d8 <_scanf_float+0x60>
 80059a4:	2d07      	cmp	r5, #7
 80059a6:	d197      	bne.n	80058d8 <_scanf_float+0x60>
 80059a8:	2508      	movs	r5, #8
 80059aa:	e029      	b.n	8005a00 <_scanf_float+0x188>
 80059ac:	2b74      	cmp	r3, #116	; 0x74
 80059ae:	d06f      	beq.n	8005a90 <_scanf_float+0x218>
 80059b0:	2b79      	cmp	r3, #121	; 0x79
 80059b2:	e7f6      	b.n	80059a2 <_scanf_float+0x12a>
 80059b4:	6821      	ldr	r1, [r4, #0]
 80059b6:	05c8      	lsls	r0, r1, #23
 80059b8:	d51a      	bpl.n	80059f0 <_scanf_float+0x178>
 80059ba:	9b02      	ldr	r3, [sp, #8]
 80059bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80059c0:	6021      	str	r1, [r4, #0]
 80059c2:	f109 0901 	add.w	r9, r9, #1
 80059c6:	b11b      	cbz	r3, 80059d0 <_scanf_float+0x158>
 80059c8:	3b01      	subs	r3, #1
 80059ca:	3201      	adds	r2, #1
 80059cc:	9302      	str	r3, [sp, #8]
 80059ce:	60a2      	str	r2, [r4, #8]
 80059d0:	68a3      	ldr	r3, [r4, #8]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	60a3      	str	r3, [r4, #8]
 80059d6:	6923      	ldr	r3, [r4, #16]
 80059d8:	3301      	adds	r3, #1
 80059da:	6123      	str	r3, [r4, #16]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3b01      	subs	r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	607b      	str	r3, [r7, #4]
 80059e4:	f340 8084 	ble.w	8005af0 <_scanf_float+0x278>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	3301      	adds	r3, #1
 80059ec:	603b      	str	r3, [r7, #0]
 80059ee:	e766      	b.n	80058be <_scanf_float+0x46>
 80059f0:	eb1a 0f05 	cmn.w	sl, r5
 80059f4:	f47f af70 	bne.w	80058d8 <_scanf_float+0x60>
 80059f8:	6822      	ldr	r2, [r4, #0]
 80059fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80059fe:	6022      	str	r2, [r4, #0]
 8005a00:	f806 3b01 	strb.w	r3, [r6], #1
 8005a04:	e7e4      	b.n	80059d0 <_scanf_float+0x158>
 8005a06:	6822      	ldr	r2, [r4, #0]
 8005a08:	0610      	lsls	r0, r2, #24
 8005a0a:	f57f af65 	bpl.w	80058d8 <_scanf_float+0x60>
 8005a0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a12:	e7f4      	b.n	80059fe <_scanf_float+0x186>
 8005a14:	f1ba 0f00 	cmp.w	sl, #0
 8005a18:	d10e      	bne.n	8005a38 <_scanf_float+0x1c0>
 8005a1a:	f1b9 0f00 	cmp.w	r9, #0
 8005a1e:	d10e      	bne.n	8005a3e <_scanf_float+0x1c6>
 8005a20:	6822      	ldr	r2, [r4, #0]
 8005a22:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005a26:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005a2a:	d108      	bne.n	8005a3e <_scanf_float+0x1c6>
 8005a2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005a30:	6022      	str	r2, [r4, #0]
 8005a32:	f04f 0a01 	mov.w	sl, #1
 8005a36:	e7e3      	b.n	8005a00 <_scanf_float+0x188>
 8005a38:	f1ba 0f02 	cmp.w	sl, #2
 8005a3c:	d055      	beq.n	8005aea <_scanf_float+0x272>
 8005a3e:	2d01      	cmp	r5, #1
 8005a40:	d002      	beq.n	8005a48 <_scanf_float+0x1d0>
 8005a42:	2d04      	cmp	r5, #4
 8005a44:	f47f af48 	bne.w	80058d8 <_scanf_float+0x60>
 8005a48:	3501      	adds	r5, #1
 8005a4a:	b2ed      	uxtb	r5, r5
 8005a4c:	e7d8      	b.n	8005a00 <_scanf_float+0x188>
 8005a4e:	f1ba 0f01 	cmp.w	sl, #1
 8005a52:	f47f af41 	bne.w	80058d8 <_scanf_float+0x60>
 8005a56:	f04f 0a02 	mov.w	sl, #2
 8005a5a:	e7d1      	b.n	8005a00 <_scanf_float+0x188>
 8005a5c:	b97d      	cbnz	r5, 8005a7e <_scanf_float+0x206>
 8005a5e:	f1b9 0f00 	cmp.w	r9, #0
 8005a62:	f47f af3c 	bne.w	80058de <_scanf_float+0x66>
 8005a66:	6822      	ldr	r2, [r4, #0]
 8005a68:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005a6c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005a70:	f47f af39 	bne.w	80058e6 <_scanf_float+0x6e>
 8005a74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005a78:	6022      	str	r2, [r4, #0]
 8005a7a:	2501      	movs	r5, #1
 8005a7c:	e7c0      	b.n	8005a00 <_scanf_float+0x188>
 8005a7e:	2d03      	cmp	r5, #3
 8005a80:	d0e2      	beq.n	8005a48 <_scanf_float+0x1d0>
 8005a82:	2d05      	cmp	r5, #5
 8005a84:	e7de      	b.n	8005a44 <_scanf_float+0x1cc>
 8005a86:	2d02      	cmp	r5, #2
 8005a88:	f47f af26 	bne.w	80058d8 <_scanf_float+0x60>
 8005a8c:	2503      	movs	r5, #3
 8005a8e:	e7b7      	b.n	8005a00 <_scanf_float+0x188>
 8005a90:	2d06      	cmp	r5, #6
 8005a92:	f47f af21 	bne.w	80058d8 <_scanf_float+0x60>
 8005a96:	2507      	movs	r5, #7
 8005a98:	e7b2      	b.n	8005a00 <_scanf_float+0x188>
 8005a9a:	6822      	ldr	r2, [r4, #0]
 8005a9c:	0591      	lsls	r1, r2, #22
 8005a9e:	f57f af1b 	bpl.w	80058d8 <_scanf_float+0x60>
 8005aa2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005aa6:	6022      	str	r2, [r4, #0]
 8005aa8:	f8cd 9004 	str.w	r9, [sp, #4]
 8005aac:	e7a8      	b.n	8005a00 <_scanf_float+0x188>
 8005aae:	6822      	ldr	r2, [r4, #0]
 8005ab0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005ab4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005ab8:	d006      	beq.n	8005ac8 <_scanf_float+0x250>
 8005aba:	0550      	lsls	r0, r2, #21
 8005abc:	f57f af0c 	bpl.w	80058d8 <_scanf_float+0x60>
 8005ac0:	f1b9 0f00 	cmp.w	r9, #0
 8005ac4:	f43f af0f 	beq.w	80058e6 <_scanf_float+0x6e>
 8005ac8:	0591      	lsls	r1, r2, #22
 8005aca:	bf58      	it	pl
 8005acc:	9901      	ldrpl	r1, [sp, #4]
 8005ace:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ad2:	bf58      	it	pl
 8005ad4:	eba9 0101 	subpl.w	r1, r9, r1
 8005ad8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005adc:	bf58      	it	pl
 8005ade:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005ae2:	6022      	str	r2, [r4, #0]
 8005ae4:	f04f 0900 	mov.w	r9, #0
 8005ae8:	e78a      	b.n	8005a00 <_scanf_float+0x188>
 8005aea:	f04f 0a03 	mov.w	sl, #3
 8005aee:	e787      	b.n	8005a00 <_scanf_float+0x188>
 8005af0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005af4:	4639      	mov	r1, r7
 8005af6:	4640      	mov	r0, r8
 8005af8:	4798      	blx	r3
 8005afa:	2800      	cmp	r0, #0
 8005afc:	f43f aedf 	beq.w	80058be <_scanf_float+0x46>
 8005b00:	e6ea      	b.n	80058d8 <_scanf_float+0x60>
 8005b02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b0a:	463a      	mov	r2, r7
 8005b0c:	4640      	mov	r0, r8
 8005b0e:	4798      	blx	r3
 8005b10:	6923      	ldr	r3, [r4, #16]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	6123      	str	r3, [r4, #16]
 8005b16:	e6ec      	b.n	80058f2 <_scanf_float+0x7a>
 8005b18:	1e6b      	subs	r3, r5, #1
 8005b1a:	2b06      	cmp	r3, #6
 8005b1c:	d825      	bhi.n	8005b6a <_scanf_float+0x2f2>
 8005b1e:	2d02      	cmp	r5, #2
 8005b20:	d836      	bhi.n	8005b90 <_scanf_float+0x318>
 8005b22:	455e      	cmp	r6, fp
 8005b24:	f67f aee8 	bls.w	80058f8 <_scanf_float+0x80>
 8005b28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b2c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b30:	463a      	mov	r2, r7
 8005b32:	4640      	mov	r0, r8
 8005b34:	4798      	blx	r3
 8005b36:	6923      	ldr	r3, [r4, #16]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	6123      	str	r3, [r4, #16]
 8005b3c:	e7f1      	b.n	8005b22 <_scanf_float+0x2aa>
 8005b3e:	9802      	ldr	r0, [sp, #8]
 8005b40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b44:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005b48:	9002      	str	r0, [sp, #8]
 8005b4a:	463a      	mov	r2, r7
 8005b4c:	4640      	mov	r0, r8
 8005b4e:	4798      	blx	r3
 8005b50:	6923      	ldr	r3, [r4, #16]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	6123      	str	r3, [r4, #16]
 8005b56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b5a:	fa5f fa8a 	uxtb.w	sl, sl
 8005b5e:	f1ba 0f02 	cmp.w	sl, #2
 8005b62:	d1ec      	bne.n	8005b3e <_scanf_float+0x2c6>
 8005b64:	3d03      	subs	r5, #3
 8005b66:	b2ed      	uxtb	r5, r5
 8005b68:	1b76      	subs	r6, r6, r5
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	05da      	lsls	r2, r3, #23
 8005b6e:	d52f      	bpl.n	8005bd0 <_scanf_float+0x358>
 8005b70:	055b      	lsls	r3, r3, #21
 8005b72:	d510      	bpl.n	8005b96 <_scanf_float+0x31e>
 8005b74:	455e      	cmp	r6, fp
 8005b76:	f67f aebf 	bls.w	80058f8 <_scanf_float+0x80>
 8005b7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b82:	463a      	mov	r2, r7
 8005b84:	4640      	mov	r0, r8
 8005b86:	4798      	blx	r3
 8005b88:	6923      	ldr	r3, [r4, #16]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	6123      	str	r3, [r4, #16]
 8005b8e:	e7f1      	b.n	8005b74 <_scanf_float+0x2fc>
 8005b90:	46aa      	mov	sl, r5
 8005b92:	9602      	str	r6, [sp, #8]
 8005b94:	e7df      	b.n	8005b56 <_scanf_float+0x2de>
 8005b96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005b9a:	6923      	ldr	r3, [r4, #16]
 8005b9c:	2965      	cmp	r1, #101	; 0x65
 8005b9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ba2:	f106 35ff 	add.w	r5, r6, #4294967295
 8005ba6:	6123      	str	r3, [r4, #16]
 8005ba8:	d00c      	beq.n	8005bc4 <_scanf_float+0x34c>
 8005baa:	2945      	cmp	r1, #69	; 0x45
 8005bac:	d00a      	beq.n	8005bc4 <_scanf_float+0x34c>
 8005bae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bb2:	463a      	mov	r2, r7
 8005bb4:	4640      	mov	r0, r8
 8005bb6:	4798      	blx	r3
 8005bb8:	6923      	ldr	r3, [r4, #16]
 8005bba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	1eb5      	subs	r5, r6, #2
 8005bc2:	6123      	str	r3, [r4, #16]
 8005bc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bc8:	463a      	mov	r2, r7
 8005bca:	4640      	mov	r0, r8
 8005bcc:	4798      	blx	r3
 8005bce:	462e      	mov	r6, r5
 8005bd0:	6825      	ldr	r5, [r4, #0]
 8005bd2:	f015 0510 	ands.w	r5, r5, #16
 8005bd6:	d158      	bne.n	8005c8a <_scanf_float+0x412>
 8005bd8:	7035      	strb	r5, [r6, #0]
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be4:	d11c      	bne.n	8005c20 <_scanf_float+0x3a8>
 8005be6:	9b01      	ldr	r3, [sp, #4]
 8005be8:	454b      	cmp	r3, r9
 8005bea:	eba3 0209 	sub.w	r2, r3, r9
 8005bee:	d124      	bne.n	8005c3a <_scanf_float+0x3c2>
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	4659      	mov	r1, fp
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	f002 fc5f 	bl	80084b8 <_strtod_r>
 8005bfa:	9b03      	ldr	r3, [sp, #12]
 8005bfc:	6821      	ldr	r1, [r4, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f011 0f02 	tst.w	r1, #2
 8005c04:	ec57 6b10 	vmov	r6, r7, d0
 8005c08:	f103 0204 	add.w	r2, r3, #4
 8005c0c:	d020      	beq.n	8005c50 <_scanf_float+0x3d8>
 8005c0e:	9903      	ldr	r1, [sp, #12]
 8005c10:	600a      	str	r2, [r1, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	e9c3 6700 	strd	r6, r7, [r3]
 8005c18:	68e3      	ldr	r3, [r4, #12]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	60e3      	str	r3, [r4, #12]
 8005c1e:	e66c      	b.n	80058fa <_scanf_float+0x82>
 8005c20:	9b04      	ldr	r3, [sp, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0e4      	beq.n	8005bf0 <_scanf_float+0x378>
 8005c26:	9905      	ldr	r1, [sp, #20]
 8005c28:	230a      	movs	r3, #10
 8005c2a:	462a      	mov	r2, r5
 8005c2c:	3101      	adds	r1, #1
 8005c2e:	4640      	mov	r0, r8
 8005c30:	f002 fcca 	bl	80085c8 <_strtol_r>
 8005c34:	9b04      	ldr	r3, [sp, #16]
 8005c36:	9e05      	ldr	r6, [sp, #20]
 8005c38:	1ac2      	subs	r2, r0, r3
 8005c3a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005c3e:	429e      	cmp	r6, r3
 8005c40:	bf28      	it	cs
 8005c42:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005c46:	4912      	ldr	r1, [pc, #72]	; (8005c90 <_scanf_float+0x418>)
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f000 f8e7 	bl	8005e1c <siprintf>
 8005c4e:	e7cf      	b.n	8005bf0 <_scanf_float+0x378>
 8005c50:	f011 0f04 	tst.w	r1, #4
 8005c54:	9903      	ldr	r1, [sp, #12]
 8005c56:	600a      	str	r2, [r1, #0]
 8005c58:	d1db      	bne.n	8005c12 <_scanf_float+0x39a>
 8005c5a:	f8d3 8000 	ldr.w	r8, [r3]
 8005c5e:	ee10 2a10 	vmov	r2, s0
 8005c62:	ee10 0a10 	vmov	r0, s0
 8005c66:	463b      	mov	r3, r7
 8005c68:	4639      	mov	r1, r7
 8005c6a:	f7fa ff6f 	bl	8000b4c <__aeabi_dcmpun>
 8005c6e:	b128      	cbz	r0, 8005c7c <_scanf_float+0x404>
 8005c70:	4808      	ldr	r0, [pc, #32]	; (8005c94 <_scanf_float+0x41c>)
 8005c72:	f000 f9e5 	bl	8006040 <nanf>
 8005c76:	ed88 0a00 	vstr	s0, [r8]
 8005c7a:	e7cd      	b.n	8005c18 <_scanf_float+0x3a0>
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	4639      	mov	r1, r7
 8005c80:	f7fa ffc2 	bl	8000c08 <__aeabi_d2f>
 8005c84:	f8c8 0000 	str.w	r0, [r8]
 8005c88:	e7c6      	b.n	8005c18 <_scanf_float+0x3a0>
 8005c8a:	2500      	movs	r5, #0
 8005c8c:	e635      	b.n	80058fa <_scanf_float+0x82>
 8005c8e:	bf00      	nop
 8005c90:	0800a17e 	.word	0x0800a17e
 8005c94:	0800a530 	.word	0x0800a530

08005c98 <std>:
 8005c98:	2300      	movs	r3, #0
 8005c9a:	b510      	push	{r4, lr}
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8005ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ca6:	6083      	str	r3, [r0, #8]
 8005ca8:	8181      	strh	r1, [r0, #12]
 8005caa:	6643      	str	r3, [r0, #100]	; 0x64
 8005cac:	81c2      	strh	r2, [r0, #14]
 8005cae:	6183      	str	r3, [r0, #24]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	2208      	movs	r2, #8
 8005cb4:	305c      	adds	r0, #92	; 0x5c
 8005cb6:	f000 f942 	bl	8005f3e <memset>
 8005cba:	4b0d      	ldr	r3, [pc, #52]	; (8005cf0 <std+0x58>)
 8005cbc:	6263      	str	r3, [r4, #36]	; 0x24
 8005cbe:	4b0d      	ldr	r3, [pc, #52]	; (8005cf4 <std+0x5c>)
 8005cc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cc2:	4b0d      	ldr	r3, [pc, #52]	; (8005cf8 <std+0x60>)
 8005cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <std+0x64>)
 8005cc8:	6323      	str	r3, [r4, #48]	; 0x30
 8005cca:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <std+0x68>)
 8005ccc:	6224      	str	r4, [r4, #32]
 8005cce:	429c      	cmp	r4, r3
 8005cd0:	d006      	beq.n	8005ce0 <std+0x48>
 8005cd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005cd6:	4294      	cmp	r4, r2
 8005cd8:	d002      	beq.n	8005ce0 <std+0x48>
 8005cda:	33d0      	adds	r3, #208	; 0xd0
 8005cdc:	429c      	cmp	r4, r3
 8005cde:	d105      	bne.n	8005cec <std+0x54>
 8005ce0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ce8:	f000 b9a6 	b.w	8006038 <__retarget_lock_init_recursive>
 8005cec:	bd10      	pop	{r4, pc}
 8005cee:	bf00      	nop
 8005cf0:	08005eb5 	.word	0x08005eb5
 8005cf4:	08005edb 	.word	0x08005edb
 8005cf8:	08005f13 	.word	0x08005f13
 8005cfc:	08005f37 	.word	0x08005f37
 8005d00:	2000098c 	.word	0x2000098c

08005d04 <stdio_exit_handler>:
 8005d04:	4a02      	ldr	r2, [pc, #8]	; (8005d10 <stdio_exit_handler+0xc>)
 8005d06:	4903      	ldr	r1, [pc, #12]	; (8005d14 <stdio_exit_handler+0x10>)
 8005d08:	4803      	ldr	r0, [pc, #12]	; (8005d18 <stdio_exit_handler+0x14>)
 8005d0a:	f000 b869 	b.w	8005de0 <_fwalk_sglue>
 8005d0e:	bf00      	nop
 8005d10:	20000010 	.word	0x20000010
 8005d14:	08008fc9 	.word	0x08008fc9
 8005d18:	2000001c 	.word	0x2000001c

08005d1c <cleanup_stdio>:
 8005d1c:	6841      	ldr	r1, [r0, #4]
 8005d1e:	4b0c      	ldr	r3, [pc, #48]	; (8005d50 <cleanup_stdio+0x34>)
 8005d20:	4299      	cmp	r1, r3
 8005d22:	b510      	push	{r4, lr}
 8005d24:	4604      	mov	r4, r0
 8005d26:	d001      	beq.n	8005d2c <cleanup_stdio+0x10>
 8005d28:	f003 f94e 	bl	8008fc8 <_fflush_r>
 8005d2c:	68a1      	ldr	r1, [r4, #8]
 8005d2e:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <cleanup_stdio+0x38>)
 8005d30:	4299      	cmp	r1, r3
 8005d32:	d002      	beq.n	8005d3a <cleanup_stdio+0x1e>
 8005d34:	4620      	mov	r0, r4
 8005d36:	f003 f947 	bl	8008fc8 <_fflush_r>
 8005d3a:	68e1      	ldr	r1, [r4, #12]
 8005d3c:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <cleanup_stdio+0x3c>)
 8005d3e:	4299      	cmp	r1, r3
 8005d40:	d004      	beq.n	8005d4c <cleanup_stdio+0x30>
 8005d42:	4620      	mov	r0, r4
 8005d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d48:	f003 b93e 	b.w	8008fc8 <_fflush_r>
 8005d4c:	bd10      	pop	{r4, pc}
 8005d4e:	bf00      	nop
 8005d50:	2000098c 	.word	0x2000098c
 8005d54:	200009f4 	.word	0x200009f4
 8005d58:	20000a5c 	.word	0x20000a5c

08005d5c <global_stdio_init.part.0>:
 8005d5c:	b510      	push	{r4, lr}
 8005d5e:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <global_stdio_init.part.0+0x30>)
 8005d60:	4c0b      	ldr	r4, [pc, #44]	; (8005d90 <global_stdio_init.part.0+0x34>)
 8005d62:	4a0c      	ldr	r2, [pc, #48]	; (8005d94 <global_stdio_init.part.0+0x38>)
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	4620      	mov	r0, r4
 8005d68:	2200      	movs	r2, #0
 8005d6a:	2104      	movs	r1, #4
 8005d6c:	f7ff ff94 	bl	8005c98 <std>
 8005d70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005d74:	2201      	movs	r2, #1
 8005d76:	2109      	movs	r1, #9
 8005d78:	f7ff ff8e 	bl	8005c98 <std>
 8005d7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005d80:	2202      	movs	r2, #2
 8005d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d86:	2112      	movs	r1, #18
 8005d88:	f7ff bf86 	b.w	8005c98 <std>
 8005d8c:	20000ac4 	.word	0x20000ac4
 8005d90:	2000098c 	.word	0x2000098c
 8005d94:	08005d05 	.word	0x08005d05

08005d98 <__sfp_lock_acquire>:
 8005d98:	4801      	ldr	r0, [pc, #4]	; (8005da0 <__sfp_lock_acquire+0x8>)
 8005d9a:	f000 b94e 	b.w	800603a <__retarget_lock_acquire_recursive>
 8005d9e:	bf00      	nop
 8005da0:	20000acd 	.word	0x20000acd

08005da4 <__sfp_lock_release>:
 8005da4:	4801      	ldr	r0, [pc, #4]	; (8005dac <__sfp_lock_release+0x8>)
 8005da6:	f000 b949 	b.w	800603c <__retarget_lock_release_recursive>
 8005daa:	bf00      	nop
 8005dac:	20000acd 	.word	0x20000acd

08005db0 <__sinit>:
 8005db0:	b510      	push	{r4, lr}
 8005db2:	4604      	mov	r4, r0
 8005db4:	f7ff fff0 	bl	8005d98 <__sfp_lock_acquire>
 8005db8:	6a23      	ldr	r3, [r4, #32]
 8005dba:	b11b      	cbz	r3, 8005dc4 <__sinit+0x14>
 8005dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc0:	f7ff bff0 	b.w	8005da4 <__sfp_lock_release>
 8005dc4:	4b04      	ldr	r3, [pc, #16]	; (8005dd8 <__sinit+0x28>)
 8005dc6:	6223      	str	r3, [r4, #32]
 8005dc8:	4b04      	ldr	r3, [pc, #16]	; (8005ddc <__sinit+0x2c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1f5      	bne.n	8005dbc <__sinit+0xc>
 8005dd0:	f7ff ffc4 	bl	8005d5c <global_stdio_init.part.0>
 8005dd4:	e7f2      	b.n	8005dbc <__sinit+0xc>
 8005dd6:	bf00      	nop
 8005dd8:	08005d1d 	.word	0x08005d1d
 8005ddc:	20000ac4 	.word	0x20000ac4

08005de0 <_fwalk_sglue>:
 8005de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005de4:	4607      	mov	r7, r0
 8005de6:	4688      	mov	r8, r1
 8005de8:	4614      	mov	r4, r2
 8005dea:	2600      	movs	r6, #0
 8005dec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005df0:	f1b9 0901 	subs.w	r9, r9, #1
 8005df4:	d505      	bpl.n	8005e02 <_fwalk_sglue+0x22>
 8005df6:	6824      	ldr	r4, [r4, #0]
 8005df8:	2c00      	cmp	r4, #0
 8005dfa:	d1f7      	bne.n	8005dec <_fwalk_sglue+0xc>
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e02:	89ab      	ldrh	r3, [r5, #12]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d907      	bls.n	8005e18 <_fwalk_sglue+0x38>
 8005e08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	d003      	beq.n	8005e18 <_fwalk_sglue+0x38>
 8005e10:	4629      	mov	r1, r5
 8005e12:	4638      	mov	r0, r7
 8005e14:	47c0      	blx	r8
 8005e16:	4306      	orrs	r6, r0
 8005e18:	3568      	adds	r5, #104	; 0x68
 8005e1a:	e7e9      	b.n	8005df0 <_fwalk_sglue+0x10>

08005e1c <siprintf>:
 8005e1c:	b40e      	push	{r1, r2, r3}
 8005e1e:	b500      	push	{lr}
 8005e20:	b09c      	sub	sp, #112	; 0x70
 8005e22:	ab1d      	add	r3, sp, #116	; 0x74
 8005e24:	9002      	str	r0, [sp, #8]
 8005e26:	9006      	str	r0, [sp, #24]
 8005e28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e2c:	4809      	ldr	r0, [pc, #36]	; (8005e54 <siprintf+0x38>)
 8005e2e:	9107      	str	r1, [sp, #28]
 8005e30:	9104      	str	r1, [sp, #16]
 8005e32:	4909      	ldr	r1, [pc, #36]	; (8005e58 <siprintf+0x3c>)
 8005e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e38:	9105      	str	r1, [sp, #20]
 8005e3a:	6800      	ldr	r0, [r0, #0]
 8005e3c:	9301      	str	r3, [sp, #4]
 8005e3e:	a902      	add	r1, sp, #8
 8005e40:	f002 fc1e 	bl	8008680 <_svfiprintf_r>
 8005e44:	9b02      	ldr	r3, [sp, #8]
 8005e46:	2200      	movs	r2, #0
 8005e48:	701a      	strb	r2, [r3, #0]
 8005e4a:	b01c      	add	sp, #112	; 0x70
 8005e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e50:	b003      	add	sp, #12
 8005e52:	4770      	bx	lr
 8005e54:	20000068 	.word	0x20000068
 8005e58:	ffff0208 	.word	0xffff0208

08005e5c <siscanf>:
 8005e5c:	b40e      	push	{r1, r2, r3}
 8005e5e:	b510      	push	{r4, lr}
 8005e60:	b09f      	sub	sp, #124	; 0x7c
 8005e62:	ac21      	add	r4, sp, #132	; 0x84
 8005e64:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005e68:	f854 2b04 	ldr.w	r2, [r4], #4
 8005e6c:	9201      	str	r2, [sp, #4]
 8005e6e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005e72:	9004      	str	r0, [sp, #16]
 8005e74:	9008      	str	r0, [sp, #32]
 8005e76:	f7fa fa0b 	bl	8000290 <strlen>
 8005e7a:	4b0c      	ldr	r3, [pc, #48]	; (8005eac <siscanf+0x50>)
 8005e7c:	9005      	str	r0, [sp, #20]
 8005e7e:	9009      	str	r0, [sp, #36]	; 0x24
 8005e80:	930d      	str	r3, [sp, #52]	; 0x34
 8005e82:	480b      	ldr	r0, [pc, #44]	; (8005eb0 <siscanf+0x54>)
 8005e84:	9a01      	ldr	r2, [sp, #4]
 8005e86:	6800      	ldr	r0, [r0, #0]
 8005e88:	9403      	str	r4, [sp, #12]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	9311      	str	r3, [sp, #68]	; 0x44
 8005e8e:	9316      	str	r3, [sp, #88]	; 0x58
 8005e90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e94:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005e98:	a904      	add	r1, sp, #16
 8005e9a:	4623      	mov	r3, r4
 8005e9c:	f002 fd48 	bl	8008930 <__ssvfiscanf_r>
 8005ea0:	b01f      	add	sp, #124	; 0x7c
 8005ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ea6:	b003      	add	sp, #12
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	08005ed7 	.word	0x08005ed7
 8005eb0:	20000068 	.word	0x20000068

08005eb4 <__sread>:
 8005eb4:	b510      	push	{r4, lr}
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ebc:	f000 f86e 	bl	8005f9c <_read_r>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	bfab      	itete	ge
 8005ec4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ec8:	181b      	addge	r3, r3, r0
 8005eca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ece:	bfac      	ite	ge
 8005ed0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ed2:	81a3      	strhlt	r3, [r4, #12]
 8005ed4:	bd10      	pop	{r4, pc}

08005ed6 <__seofread>:
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	4770      	bx	lr

08005eda <__swrite>:
 8005eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ede:	461f      	mov	r7, r3
 8005ee0:	898b      	ldrh	r3, [r1, #12]
 8005ee2:	05db      	lsls	r3, r3, #23
 8005ee4:	4605      	mov	r5, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	4616      	mov	r6, r2
 8005eea:	d505      	bpl.n	8005ef8 <__swrite+0x1e>
 8005eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f000 f840 	bl	8005f78 <_lseek_r>
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f02:	81a3      	strh	r3, [r4, #12]
 8005f04:	4632      	mov	r2, r6
 8005f06:	463b      	mov	r3, r7
 8005f08:	4628      	mov	r0, r5
 8005f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0e:	f000 b857 	b.w	8005fc0 <_write_r>

08005f12 <__sseek>:
 8005f12:	b510      	push	{r4, lr}
 8005f14:	460c      	mov	r4, r1
 8005f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1a:	f000 f82d 	bl	8005f78 <_lseek_r>
 8005f1e:	1c43      	adds	r3, r0, #1
 8005f20:	89a3      	ldrh	r3, [r4, #12]
 8005f22:	bf15      	itete	ne
 8005f24:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f2e:	81a3      	strheq	r3, [r4, #12]
 8005f30:	bf18      	it	ne
 8005f32:	81a3      	strhne	r3, [r4, #12]
 8005f34:	bd10      	pop	{r4, pc}

08005f36 <__sclose>:
 8005f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f3a:	f000 b80d 	b.w	8005f58 <_close_r>

08005f3e <memset>:
 8005f3e:	4402      	add	r2, r0
 8005f40:	4603      	mov	r3, r0
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d100      	bne.n	8005f48 <memset+0xa>
 8005f46:	4770      	bx	lr
 8005f48:	f803 1b01 	strb.w	r1, [r3], #1
 8005f4c:	e7f9      	b.n	8005f42 <memset+0x4>
	...

08005f50 <_localeconv_r>:
 8005f50:	4800      	ldr	r0, [pc, #0]	; (8005f54 <_localeconv_r+0x4>)
 8005f52:	4770      	bx	lr
 8005f54:	2000015c 	.word	0x2000015c

08005f58 <_close_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	4d06      	ldr	r5, [pc, #24]	; (8005f74 <_close_r+0x1c>)
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	4604      	mov	r4, r0
 8005f60:	4608      	mov	r0, r1
 8005f62:	602b      	str	r3, [r5, #0]
 8005f64:	f7fb fe51 	bl	8001c0a <_close>
 8005f68:	1c43      	adds	r3, r0, #1
 8005f6a:	d102      	bne.n	8005f72 <_close_r+0x1a>
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	b103      	cbz	r3, 8005f72 <_close_r+0x1a>
 8005f70:	6023      	str	r3, [r4, #0]
 8005f72:	bd38      	pop	{r3, r4, r5, pc}
 8005f74:	20000ac8 	.word	0x20000ac8

08005f78 <_lseek_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	4d07      	ldr	r5, [pc, #28]	; (8005f98 <_lseek_r+0x20>)
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	4608      	mov	r0, r1
 8005f80:	4611      	mov	r1, r2
 8005f82:	2200      	movs	r2, #0
 8005f84:	602a      	str	r2, [r5, #0]
 8005f86:	461a      	mov	r2, r3
 8005f88:	f7fb fe66 	bl	8001c58 <_lseek>
 8005f8c:	1c43      	adds	r3, r0, #1
 8005f8e:	d102      	bne.n	8005f96 <_lseek_r+0x1e>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	b103      	cbz	r3, 8005f96 <_lseek_r+0x1e>
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	bd38      	pop	{r3, r4, r5, pc}
 8005f98:	20000ac8 	.word	0x20000ac8

08005f9c <_read_r>:
 8005f9c:	b538      	push	{r3, r4, r5, lr}
 8005f9e:	4d07      	ldr	r5, [pc, #28]	; (8005fbc <_read_r+0x20>)
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	4608      	mov	r0, r1
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	602a      	str	r2, [r5, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	f7fb fdf4 	bl	8001b98 <_read>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d102      	bne.n	8005fba <_read_r+0x1e>
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	b103      	cbz	r3, 8005fba <_read_r+0x1e>
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	20000ac8 	.word	0x20000ac8

08005fc0 <_write_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4d07      	ldr	r5, [pc, #28]	; (8005fe0 <_write_r+0x20>)
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	4608      	mov	r0, r1
 8005fc8:	4611      	mov	r1, r2
 8005fca:	2200      	movs	r2, #0
 8005fcc:	602a      	str	r2, [r5, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f7fb fdff 	bl	8001bd2 <_write>
 8005fd4:	1c43      	adds	r3, r0, #1
 8005fd6:	d102      	bne.n	8005fde <_write_r+0x1e>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	b103      	cbz	r3, 8005fde <_write_r+0x1e>
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
 8005fe0:	20000ac8 	.word	0x20000ac8

08005fe4 <__errno>:
 8005fe4:	4b01      	ldr	r3, [pc, #4]	; (8005fec <__errno+0x8>)
 8005fe6:	6818      	ldr	r0, [r3, #0]
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	20000068 	.word	0x20000068

08005ff0 <__libc_init_array>:
 8005ff0:	b570      	push	{r4, r5, r6, lr}
 8005ff2:	4d0d      	ldr	r5, [pc, #52]	; (8006028 <__libc_init_array+0x38>)
 8005ff4:	4c0d      	ldr	r4, [pc, #52]	; (800602c <__libc_init_array+0x3c>)
 8005ff6:	1b64      	subs	r4, r4, r5
 8005ff8:	10a4      	asrs	r4, r4, #2
 8005ffa:	2600      	movs	r6, #0
 8005ffc:	42a6      	cmp	r6, r4
 8005ffe:	d109      	bne.n	8006014 <__libc_init_array+0x24>
 8006000:	4d0b      	ldr	r5, [pc, #44]	; (8006030 <__libc_init_array+0x40>)
 8006002:	4c0c      	ldr	r4, [pc, #48]	; (8006034 <__libc_init_array+0x44>)
 8006004:	f004 f87a 	bl	800a0fc <_init>
 8006008:	1b64      	subs	r4, r4, r5
 800600a:	10a4      	asrs	r4, r4, #2
 800600c:	2600      	movs	r6, #0
 800600e:	42a6      	cmp	r6, r4
 8006010:	d105      	bne.n	800601e <__libc_init_array+0x2e>
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	f855 3b04 	ldr.w	r3, [r5], #4
 8006018:	4798      	blx	r3
 800601a:	3601      	adds	r6, #1
 800601c:	e7ee      	b.n	8005ffc <__libc_init_array+0xc>
 800601e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006022:	4798      	blx	r3
 8006024:	3601      	adds	r6, #1
 8006026:	e7f2      	b.n	800600e <__libc_init_array+0x1e>
 8006028:	0800a59c 	.word	0x0800a59c
 800602c:	0800a59c 	.word	0x0800a59c
 8006030:	0800a59c 	.word	0x0800a59c
 8006034:	0800a5a0 	.word	0x0800a5a0

08006038 <__retarget_lock_init_recursive>:
 8006038:	4770      	bx	lr

0800603a <__retarget_lock_acquire_recursive>:
 800603a:	4770      	bx	lr

0800603c <__retarget_lock_release_recursive>:
 800603c:	4770      	bx	lr
	...

08006040 <nanf>:
 8006040:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006048 <nanf+0x8>
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	7fc00000 	.word	0x7fc00000

0800604c <quorem>:
 800604c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006050:	6903      	ldr	r3, [r0, #16]
 8006052:	690c      	ldr	r4, [r1, #16]
 8006054:	42a3      	cmp	r3, r4
 8006056:	4607      	mov	r7, r0
 8006058:	db7e      	blt.n	8006158 <quorem+0x10c>
 800605a:	3c01      	subs	r4, #1
 800605c:	f101 0814 	add.w	r8, r1, #20
 8006060:	f100 0514 	add.w	r5, r0, #20
 8006064:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006068:	9301      	str	r3, [sp, #4]
 800606a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800606e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006072:	3301      	adds	r3, #1
 8006074:	429a      	cmp	r2, r3
 8006076:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800607a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800607e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006082:	d331      	bcc.n	80060e8 <quorem+0x9c>
 8006084:	f04f 0e00 	mov.w	lr, #0
 8006088:	4640      	mov	r0, r8
 800608a:	46ac      	mov	ip, r5
 800608c:	46f2      	mov	sl, lr
 800608e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006092:	b293      	uxth	r3, r2
 8006094:	fb06 e303 	mla	r3, r6, r3, lr
 8006098:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800609c:	0c1a      	lsrs	r2, r3, #16
 800609e:	b29b      	uxth	r3, r3
 80060a0:	ebaa 0303 	sub.w	r3, sl, r3
 80060a4:	f8dc a000 	ldr.w	sl, [ip]
 80060a8:	fa13 f38a 	uxtah	r3, r3, sl
 80060ac:	fb06 220e 	mla	r2, r6, lr, r2
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	9b00      	ldr	r3, [sp, #0]
 80060b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060b8:	b292      	uxth	r2, r2
 80060ba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80060be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060c2:	f8bd 3000 	ldrh.w	r3, [sp]
 80060c6:	4581      	cmp	r9, r0
 80060c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060cc:	f84c 3b04 	str.w	r3, [ip], #4
 80060d0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060d4:	d2db      	bcs.n	800608e <quorem+0x42>
 80060d6:	f855 300b 	ldr.w	r3, [r5, fp]
 80060da:	b92b      	cbnz	r3, 80060e8 <quorem+0x9c>
 80060dc:	9b01      	ldr	r3, [sp, #4]
 80060de:	3b04      	subs	r3, #4
 80060e0:	429d      	cmp	r5, r3
 80060e2:	461a      	mov	r2, r3
 80060e4:	d32c      	bcc.n	8006140 <quorem+0xf4>
 80060e6:	613c      	str	r4, [r7, #16]
 80060e8:	4638      	mov	r0, r7
 80060ea:	f001 f9f1 	bl	80074d0 <__mcmp>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	db22      	blt.n	8006138 <quorem+0xec>
 80060f2:	3601      	adds	r6, #1
 80060f4:	4629      	mov	r1, r5
 80060f6:	2000      	movs	r0, #0
 80060f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80060fc:	f8d1 c000 	ldr.w	ip, [r1]
 8006100:	b293      	uxth	r3, r2
 8006102:	1ac3      	subs	r3, r0, r3
 8006104:	0c12      	lsrs	r2, r2, #16
 8006106:	fa13 f38c 	uxtah	r3, r3, ip
 800610a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800610e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006112:	b29b      	uxth	r3, r3
 8006114:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006118:	45c1      	cmp	r9, r8
 800611a:	f841 3b04 	str.w	r3, [r1], #4
 800611e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006122:	d2e9      	bcs.n	80060f8 <quorem+0xac>
 8006124:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006128:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800612c:	b922      	cbnz	r2, 8006138 <quorem+0xec>
 800612e:	3b04      	subs	r3, #4
 8006130:	429d      	cmp	r5, r3
 8006132:	461a      	mov	r2, r3
 8006134:	d30a      	bcc.n	800614c <quorem+0x100>
 8006136:	613c      	str	r4, [r7, #16]
 8006138:	4630      	mov	r0, r6
 800613a:	b003      	add	sp, #12
 800613c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006140:	6812      	ldr	r2, [r2, #0]
 8006142:	3b04      	subs	r3, #4
 8006144:	2a00      	cmp	r2, #0
 8006146:	d1ce      	bne.n	80060e6 <quorem+0x9a>
 8006148:	3c01      	subs	r4, #1
 800614a:	e7c9      	b.n	80060e0 <quorem+0x94>
 800614c:	6812      	ldr	r2, [r2, #0]
 800614e:	3b04      	subs	r3, #4
 8006150:	2a00      	cmp	r2, #0
 8006152:	d1f0      	bne.n	8006136 <quorem+0xea>
 8006154:	3c01      	subs	r4, #1
 8006156:	e7eb      	b.n	8006130 <quorem+0xe4>
 8006158:	2000      	movs	r0, #0
 800615a:	e7ee      	b.n	800613a <quorem+0xee>
 800615c:	0000      	movs	r0, r0
	...

08006160 <_dtoa_r>:
 8006160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	ed2d 8b04 	vpush	{d8-d9}
 8006168:	69c5      	ldr	r5, [r0, #28]
 800616a:	b093      	sub	sp, #76	; 0x4c
 800616c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006170:	ec57 6b10 	vmov	r6, r7, d0
 8006174:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006178:	9107      	str	r1, [sp, #28]
 800617a:	4604      	mov	r4, r0
 800617c:	920a      	str	r2, [sp, #40]	; 0x28
 800617e:	930d      	str	r3, [sp, #52]	; 0x34
 8006180:	b975      	cbnz	r5, 80061a0 <_dtoa_r+0x40>
 8006182:	2010      	movs	r0, #16
 8006184:	f000 fe2a 	bl	8006ddc <malloc>
 8006188:	4602      	mov	r2, r0
 800618a:	61e0      	str	r0, [r4, #28]
 800618c:	b920      	cbnz	r0, 8006198 <_dtoa_r+0x38>
 800618e:	4bae      	ldr	r3, [pc, #696]	; (8006448 <_dtoa_r+0x2e8>)
 8006190:	21ef      	movs	r1, #239	; 0xef
 8006192:	48ae      	ldr	r0, [pc, #696]	; (800644c <_dtoa_r+0x2ec>)
 8006194:	f003 f808 	bl	80091a8 <__assert_func>
 8006198:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800619c:	6005      	str	r5, [r0, #0]
 800619e:	60c5      	str	r5, [r0, #12]
 80061a0:	69e3      	ldr	r3, [r4, #28]
 80061a2:	6819      	ldr	r1, [r3, #0]
 80061a4:	b151      	cbz	r1, 80061bc <_dtoa_r+0x5c>
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	604a      	str	r2, [r1, #4]
 80061aa:	2301      	movs	r3, #1
 80061ac:	4093      	lsls	r3, r2
 80061ae:	608b      	str	r3, [r1, #8]
 80061b0:	4620      	mov	r0, r4
 80061b2:	f000 ff07 	bl	8006fc4 <_Bfree>
 80061b6:	69e3      	ldr	r3, [r4, #28]
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	1e3b      	subs	r3, r7, #0
 80061be:	bfbb      	ittet	lt
 80061c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80061c4:	9303      	strlt	r3, [sp, #12]
 80061c6:	2300      	movge	r3, #0
 80061c8:	2201      	movlt	r2, #1
 80061ca:	bfac      	ite	ge
 80061cc:	f8c8 3000 	strge.w	r3, [r8]
 80061d0:	f8c8 2000 	strlt.w	r2, [r8]
 80061d4:	4b9e      	ldr	r3, [pc, #632]	; (8006450 <_dtoa_r+0x2f0>)
 80061d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80061da:	ea33 0308 	bics.w	r3, r3, r8
 80061de:	d11b      	bne.n	8006218 <_dtoa_r+0xb8>
 80061e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80061ec:	4333      	orrs	r3, r6
 80061ee:	f000 8593 	beq.w	8006d18 <_dtoa_r+0xbb8>
 80061f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061f4:	b963      	cbnz	r3, 8006210 <_dtoa_r+0xb0>
 80061f6:	4b97      	ldr	r3, [pc, #604]	; (8006454 <_dtoa_r+0x2f4>)
 80061f8:	e027      	b.n	800624a <_dtoa_r+0xea>
 80061fa:	4b97      	ldr	r3, [pc, #604]	; (8006458 <_dtoa_r+0x2f8>)
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	3308      	adds	r3, #8
 8006200:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	9800      	ldr	r0, [sp, #0]
 8006206:	b013      	add	sp, #76	; 0x4c
 8006208:	ecbd 8b04 	vpop	{d8-d9}
 800620c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006210:	4b90      	ldr	r3, [pc, #576]	; (8006454 <_dtoa_r+0x2f4>)
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	3303      	adds	r3, #3
 8006216:	e7f3      	b.n	8006200 <_dtoa_r+0xa0>
 8006218:	ed9d 7b02 	vldr	d7, [sp, #8]
 800621c:	2200      	movs	r2, #0
 800621e:	ec51 0b17 	vmov	r0, r1, d7
 8006222:	eeb0 8a47 	vmov.f32	s16, s14
 8006226:	eef0 8a67 	vmov.f32	s17, s15
 800622a:	2300      	movs	r3, #0
 800622c:	f7fa fc5c 	bl	8000ae8 <__aeabi_dcmpeq>
 8006230:	4681      	mov	r9, r0
 8006232:	b160      	cbz	r0, 800624e <_dtoa_r+0xee>
 8006234:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006236:	2301      	movs	r3, #1
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 8568 	beq.w	8006d12 <_dtoa_r+0xbb2>
 8006242:	4b86      	ldr	r3, [pc, #536]	; (800645c <_dtoa_r+0x2fc>)
 8006244:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	3b01      	subs	r3, #1
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	e7da      	b.n	8006204 <_dtoa_r+0xa4>
 800624e:	aa10      	add	r2, sp, #64	; 0x40
 8006250:	a911      	add	r1, sp, #68	; 0x44
 8006252:	4620      	mov	r0, r4
 8006254:	eeb0 0a48 	vmov.f32	s0, s16
 8006258:	eef0 0a68 	vmov.f32	s1, s17
 800625c:	f001 fa4e 	bl	80076fc <__d2b>
 8006260:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006264:	4682      	mov	sl, r0
 8006266:	2d00      	cmp	r5, #0
 8006268:	d07f      	beq.n	800636a <_dtoa_r+0x20a>
 800626a:	ee18 3a90 	vmov	r3, s17
 800626e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006272:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006276:	ec51 0b18 	vmov	r0, r1, d8
 800627a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800627e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006282:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006286:	4619      	mov	r1, r3
 8006288:	2200      	movs	r2, #0
 800628a:	4b75      	ldr	r3, [pc, #468]	; (8006460 <_dtoa_r+0x300>)
 800628c:	f7fa f80c 	bl	80002a8 <__aeabi_dsub>
 8006290:	a367      	add	r3, pc, #412	; (adr r3, 8006430 <_dtoa_r+0x2d0>)
 8006292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006296:	f7fa f9bf 	bl	8000618 <__aeabi_dmul>
 800629a:	a367      	add	r3, pc, #412	; (adr r3, 8006438 <_dtoa_r+0x2d8>)
 800629c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a0:	f7fa f804 	bl	80002ac <__adddf3>
 80062a4:	4606      	mov	r6, r0
 80062a6:	4628      	mov	r0, r5
 80062a8:	460f      	mov	r7, r1
 80062aa:	f7fa f94b 	bl	8000544 <__aeabi_i2d>
 80062ae:	a364      	add	r3, pc, #400	; (adr r3, 8006440 <_dtoa_r+0x2e0>)
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	f7fa f9b0 	bl	8000618 <__aeabi_dmul>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4630      	mov	r0, r6
 80062be:	4639      	mov	r1, r7
 80062c0:	f7f9 fff4 	bl	80002ac <__adddf3>
 80062c4:	4606      	mov	r6, r0
 80062c6:	460f      	mov	r7, r1
 80062c8:	f7fa fc56 	bl	8000b78 <__aeabi_d2iz>
 80062cc:	2200      	movs	r2, #0
 80062ce:	4683      	mov	fp, r0
 80062d0:	2300      	movs	r3, #0
 80062d2:	4630      	mov	r0, r6
 80062d4:	4639      	mov	r1, r7
 80062d6:	f7fa fc11 	bl	8000afc <__aeabi_dcmplt>
 80062da:	b148      	cbz	r0, 80062f0 <_dtoa_r+0x190>
 80062dc:	4658      	mov	r0, fp
 80062de:	f7fa f931 	bl	8000544 <__aeabi_i2d>
 80062e2:	4632      	mov	r2, r6
 80062e4:	463b      	mov	r3, r7
 80062e6:	f7fa fbff 	bl	8000ae8 <__aeabi_dcmpeq>
 80062ea:	b908      	cbnz	r0, 80062f0 <_dtoa_r+0x190>
 80062ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062f0:	f1bb 0f16 	cmp.w	fp, #22
 80062f4:	d857      	bhi.n	80063a6 <_dtoa_r+0x246>
 80062f6:	4b5b      	ldr	r3, [pc, #364]	; (8006464 <_dtoa_r+0x304>)
 80062f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80062fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006300:	ec51 0b18 	vmov	r0, r1, d8
 8006304:	f7fa fbfa 	bl	8000afc <__aeabi_dcmplt>
 8006308:	2800      	cmp	r0, #0
 800630a:	d04e      	beq.n	80063aa <_dtoa_r+0x24a>
 800630c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006310:	2300      	movs	r3, #0
 8006312:	930c      	str	r3, [sp, #48]	; 0x30
 8006314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006316:	1b5b      	subs	r3, r3, r5
 8006318:	1e5a      	subs	r2, r3, #1
 800631a:	bf45      	ittet	mi
 800631c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006320:	9305      	strmi	r3, [sp, #20]
 8006322:	2300      	movpl	r3, #0
 8006324:	2300      	movmi	r3, #0
 8006326:	9206      	str	r2, [sp, #24]
 8006328:	bf54      	ite	pl
 800632a:	9305      	strpl	r3, [sp, #20]
 800632c:	9306      	strmi	r3, [sp, #24]
 800632e:	f1bb 0f00 	cmp.w	fp, #0
 8006332:	db3c      	blt.n	80063ae <_dtoa_r+0x24e>
 8006334:	9b06      	ldr	r3, [sp, #24]
 8006336:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800633a:	445b      	add	r3, fp
 800633c:	9306      	str	r3, [sp, #24]
 800633e:	2300      	movs	r3, #0
 8006340:	9308      	str	r3, [sp, #32]
 8006342:	9b07      	ldr	r3, [sp, #28]
 8006344:	2b09      	cmp	r3, #9
 8006346:	d868      	bhi.n	800641a <_dtoa_r+0x2ba>
 8006348:	2b05      	cmp	r3, #5
 800634a:	bfc4      	itt	gt
 800634c:	3b04      	subgt	r3, #4
 800634e:	9307      	strgt	r3, [sp, #28]
 8006350:	9b07      	ldr	r3, [sp, #28]
 8006352:	f1a3 0302 	sub.w	r3, r3, #2
 8006356:	bfcc      	ite	gt
 8006358:	2500      	movgt	r5, #0
 800635a:	2501      	movle	r5, #1
 800635c:	2b03      	cmp	r3, #3
 800635e:	f200 8085 	bhi.w	800646c <_dtoa_r+0x30c>
 8006362:	e8df f003 	tbb	[pc, r3]
 8006366:	3b2e      	.short	0x3b2e
 8006368:	5839      	.short	0x5839
 800636a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800636e:	441d      	add	r5, r3
 8006370:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006374:	2b20      	cmp	r3, #32
 8006376:	bfc1      	itttt	gt
 8006378:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800637c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006380:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006384:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006388:	bfd6      	itet	le
 800638a:	f1c3 0320 	rsble	r3, r3, #32
 800638e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006392:	fa06 f003 	lslle.w	r0, r6, r3
 8006396:	f7fa f8c5 	bl	8000524 <__aeabi_ui2d>
 800639a:	2201      	movs	r2, #1
 800639c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80063a0:	3d01      	subs	r5, #1
 80063a2:	920e      	str	r2, [sp, #56]	; 0x38
 80063a4:	e76f      	b.n	8006286 <_dtoa_r+0x126>
 80063a6:	2301      	movs	r3, #1
 80063a8:	e7b3      	b.n	8006312 <_dtoa_r+0x1b2>
 80063aa:	900c      	str	r0, [sp, #48]	; 0x30
 80063ac:	e7b2      	b.n	8006314 <_dtoa_r+0x1b4>
 80063ae:	9b05      	ldr	r3, [sp, #20]
 80063b0:	eba3 030b 	sub.w	r3, r3, fp
 80063b4:	9305      	str	r3, [sp, #20]
 80063b6:	f1cb 0300 	rsb	r3, fp, #0
 80063ba:	9308      	str	r3, [sp, #32]
 80063bc:	2300      	movs	r3, #0
 80063be:	930b      	str	r3, [sp, #44]	; 0x2c
 80063c0:	e7bf      	b.n	8006342 <_dtoa_r+0x1e2>
 80063c2:	2300      	movs	r3, #0
 80063c4:	9309      	str	r3, [sp, #36]	; 0x24
 80063c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	dc52      	bgt.n	8006472 <_dtoa_r+0x312>
 80063cc:	2301      	movs	r3, #1
 80063ce:	9301      	str	r3, [sp, #4]
 80063d0:	9304      	str	r3, [sp, #16]
 80063d2:	461a      	mov	r2, r3
 80063d4:	920a      	str	r2, [sp, #40]	; 0x28
 80063d6:	e00b      	b.n	80063f0 <_dtoa_r+0x290>
 80063d8:	2301      	movs	r3, #1
 80063da:	e7f3      	b.n	80063c4 <_dtoa_r+0x264>
 80063dc:	2300      	movs	r3, #0
 80063de:	9309      	str	r3, [sp, #36]	; 0x24
 80063e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063e2:	445b      	add	r3, fp
 80063e4:	9301      	str	r3, [sp, #4]
 80063e6:	3301      	adds	r3, #1
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	9304      	str	r3, [sp, #16]
 80063ec:	bfb8      	it	lt
 80063ee:	2301      	movlt	r3, #1
 80063f0:	69e0      	ldr	r0, [r4, #28]
 80063f2:	2100      	movs	r1, #0
 80063f4:	2204      	movs	r2, #4
 80063f6:	f102 0614 	add.w	r6, r2, #20
 80063fa:	429e      	cmp	r6, r3
 80063fc:	d93d      	bls.n	800647a <_dtoa_r+0x31a>
 80063fe:	6041      	str	r1, [r0, #4]
 8006400:	4620      	mov	r0, r4
 8006402:	f000 fd9f 	bl	8006f44 <_Balloc>
 8006406:	9000      	str	r0, [sp, #0]
 8006408:	2800      	cmp	r0, #0
 800640a:	d139      	bne.n	8006480 <_dtoa_r+0x320>
 800640c:	4b16      	ldr	r3, [pc, #88]	; (8006468 <_dtoa_r+0x308>)
 800640e:	4602      	mov	r2, r0
 8006410:	f240 11af 	movw	r1, #431	; 0x1af
 8006414:	e6bd      	b.n	8006192 <_dtoa_r+0x32>
 8006416:	2301      	movs	r3, #1
 8006418:	e7e1      	b.n	80063de <_dtoa_r+0x27e>
 800641a:	2501      	movs	r5, #1
 800641c:	2300      	movs	r3, #0
 800641e:	9307      	str	r3, [sp, #28]
 8006420:	9509      	str	r5, [sp, #36]	; 0x24
 8006422:	f04f 33ff 	mov.w	r3, #4294967295
 8006426:	9301      	str	r3, [sp, #4]
 8006428:	9304      	str	r3, [sp, #16]
 800642a:	2200      	movs	r2, #0
 800642c:	2312      	movs	r3, #18
 800642e:	e7d1      	b.n	80063d4 <_dtoa_r+0x274>
 8006430:	636f4361 	.word	0x636f4361
 8006434:	3fd287a7 	.word	0x3fd287a7
 8006438:	8b60c8b3 	.word	0x8b60c8b3
 800643c:	3fc68a28 	.word	0x3fc68a28
 8006440:	509f79fb 	.word	0x509f79fb
 8006444:	3fd34413 	.word	0x3fd34413
 8006448:	0800a190 	.word	0x0800a190
 800644c:	0800a1a7 	.word	0x0800a1a7
 8006450:	7ff00000 	.word	0x7ff00000
 8006454:	0800a18c 	.word	0x0800a18c
 8006458:	0800a183 	.word	0x0800a183
 800645c:	0800a4e9 	.word	0x0800a4e9
 8006460:	3ff80000 	.word	0x3ff80000
 8006464:	0800a298 	.word	0x0800a298
 8006468:	0800a1ff 	.word	0x0800a1ff
 800646c:	2301      	movs	r3, #1
 800646e:	9309      	str	r3, [sp, #36]	; 0x24
 8006470:	e7d7      	b.n	8006422 <_dtoa_r+0x2c2>
 8006472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006474:	9301      	str	r3, [sp, #4]
 8006476:	9304      	str	r3, [sp, #16]
 8006478:	e7ba      	b.n	80063f0 <_dtoa_r+0x290>
 800647a:	3101      	adds	r1, #1
 800647c:	0052      	lsls	r2, r2, #1
 800647e:	e7ba      	b.n	80063f6 <_dtoa_r+0x296>
 8006480:	69e3      	ldr	r3, [r4, #28]
 8006482:	9a00      	ldr	r2, [sp, #0]
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	9b04      	ldr	r3, [sp, #16]
 8006488:	2b0e      	cmp	r3, #14
 800648a:	f200 80a8 	bhi.w	80065de <_dtoa_r+0x47e>
 800648e:	2d00      	cmp	r5, #0
 8006490:	f000 80a5 	beq.w	80065de <_dtoa_r+0x47e>
 8006494:	f1bb 0f00 	cmp.w	fp, #0
 8006498:	dd38      	ble.n	800650c <_dtoa_r+0x3ac>
 800649a:	4bc0      	ldr	r3, [pc, #768]	; (800679c <_dtoa_r+0x63c>)
 800649c:	f00b 020f 	and.w	r2, fp, #15
 80064a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80064a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80064ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 80064b0:	d019      	beq.n	80064e6 <_dtoa_r+0x386>
 80064b2:	4bbb      	ldr	r3, [pc, #748]	; (80067a0 <_dtoa_r+0x640>)
 80064b4:	ec51 0b18 	vmov	r0, r1, d8
 80064b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064bc:	f7fa f9d6 	bl	800086c <__aeabi_ddiv>
 80064c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064c4:	f008 080f 	and.w	r8, r8, #15
 80064c8:	2503      	movs	r5, #3
 80064ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80067a0 <_dtoa_r+0x640>
 80064ce:	f1b8 0f00 	cmp.w	r8, #0
 80064d2:	d10a      	bne.n	80064ea <_dtoa_r+0x38a>
 80064d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064d8:	4632      	mov	r2, r6
 80064da:	463b      	mov	r3, r7
 80064dc:	f7fa f9c6 	bl	800086c <__aeabi_ddiv>
 80064e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064e4:	e02b      	b.n	800653e <_dtoa_r+0x3de>
 80064e6:	2502      	movs	r5, #2
 80064e8:	e7ef      	b.n	80064ca <_dtoa_r+0x36a>
 80064ea:	f018 0f01 	tst.w	r8, #1
 80064ee:	d008      	beq.n	8006502 <_dtoa_r+0x3a2>
 80064f0:	4630      	mov	r0, r6
 80064f2:	4639      	mov	r1, r7
 80064f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80064f8:	f7fa f88e 	bl	8000618 <__aeabi_dmul>
 80064fc:	3501      	adds	r5, #1
 80064fe:	4606      	mov	r6, r0
 8006500:	460f      	mov	r7, r1
 8006502:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006506:	f109 0908 	add.w	r9, r9, #8
 800650a:	e7e0      	b.n	80064ce <_dtoa_r+0x36e>
 800650c:	f000 809f 	beq.w	800664e <_dtoa_r+0x4ee>
 8006510:	f1cb 0600 	rsb	r6, fp, #0
 8006514:	4ba1      	ldr	r3, [pc, #644]	; (800679c <_dtoa_r+0x63c>)
 8006516:	4fa2      	ldr	r7, [pc, #648]	; (80067a0 <_dtoa_r+0x640>)
 8006518:	f006 020f 	and.w	r2, r6, #15
 800651c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	ec51 0b18 	vmov	r0, r1, d8
 8006528:	f7fa f876 	bl	8000618 <__aeabi_dmul>
 800652c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006530:	1136      	asrs	r6, r6, #4
 8006532:	2300      	movs	r3, #0
 8006534:	2502      	movs	r5, #2
 8006536:	2e00      	cmp	r6, #0
 8006538:	d17e      	bne.n	8006638 <_dtoa_r+0x4d8>
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1d0      	bne.n	80064e0 <_dtoa_r+0x380>
 800653e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006540:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 8084 	beq.w	8006652 <_dtoa_r+0x4f2>
 800654a:	4b96      	ldr	r3, [pc, #600]	; (80067a4 <_dtoa_r+0x644>)
 800654c:	2200      	movs	r2, #0
 800654e:	4640      	mov	r0, r8
 8006550:	4649      	mov	r1, r9
 8006552:	f7fa fad3 	bl	8000afc <__aeabi_dcmplt>
 8006556:	2800      	cmp	r0, #0
 8006558:	d07b      	beq.n	8006652 <_dtoa_r+0x4f2>
 800655a:	9b04      	ldr	r3, [sp, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d078      	beq.n	8006652 <_dtoa_r+0x4f2>
 8006560:	9b01      	ldr	r3, [sp, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	dd39      	ble.n	80065da <_dtoa_r+0x47a>
 8006566:	4b90      	ldr	r3, [pc, #576]	; (80067a8 <_dtoa_r+0x648>)
 8006568:	2200      	movs	r2, #0
 800656a:	4640      	mov	r0, r8
 800656c:	4649      	mov	r1, r9
 800656e:	f7fa f853 	bl	8000618 <__aeabi_dmul>
 8006572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006576:	9e01      	ldr	r6, [sp, #4]
 8006578:	f10b 37ff 	add.w	r7, fp, #4294967295
 800657c:	3501      	adds	r5, #1
 800657e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006582:	4628      	mov	r0, r5
 8006584:	f7f9 ffde 	bl	8000544 <__aeabi_i2d>
 8006588:	4642      	mov	r2, r8
 800658a:	464b      	mov	r3, r9
 800658c:	f7fa f844 	bl	8000618 <__aeabi_dmul>
 8006590:	4b86      	ldr	r3, [pc, #536]	; (80067ac <_dtoa_r+0x64c>)
 8006592:	2200      	movs	r2, #0
 8006594:	f7f9 fe8a 	bl	80002ac <__adddf3>
 8006598:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800659c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065a0:	9303      	str	r3, [sp, #12]
 80065a2:	2e00      	cmp	r6, #0
 80065a4:	d158      	bne.n	8006658 <_dtoa_r+0x4f8>
 80065a6:	4b82      	ldr	r3, [pc, #520]	; (80067b0 <_dtoa_r+0x650>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	4640      	mov	r0, r8
 80065ac:	4649      	mov	r1, r9
 80065ae:	f7f9 fe7b 	bl	80002a8 <__aeabi_dsub>
 80065b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065b6:	4680      	mov	r8, r0
 80065b8:	4689      	mov	r9, r1
 80065ba:	f7fa fabd 	bl	8000b38 <__aeabi_dcmpgt>
 80065be:	2800      	cmp	r0, #0
 80065c0:	f040 8296 	bne.w	8006af0 <_dtoa_r+0x990>
 80065c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80065c8:	4640      	mov	r0, r8
 80065ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065ce:	4649      	mov	r1, r9
 80065d0:	f7fa fa94 	bl	8000afc <__aeabi_dcmplt>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	f040 8289 	bne.w	8006aec <_dtoa_r+0x98c>
 80065da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80065de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f2c0 814e 	blt.w	8006882 <_dtoa_r+0x722>
 80065e6:	f1bb 0f0e 	cmp.w	fp, #14
 80065ea:	f300 814a 	bgt.w	8006882 <_dtoa_r+0x722>
 80065ee:	4b6b      	ldr	r3, [pc, #428]	; (800679c <_dtoa_r+0x63c>)
 80065f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80065f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f280 80dc 	bge.w	80067b8 <_dtoa_r+0x658>
 8006600:	9b04      	ldr	r3, [sp, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	f300 80d8 	bgt.w	80067b8 <_dtoa_r+0x658>
 8006608:	f040 826f 	bne.w	8006aea <_dtoa_r+0x98a>
 800660c:	4b68      	ldr	r3, [pc, #416]	; (80067b0 <_dtoa_r+0x650>)
 800660e:	2200      	movs	r2, #0
 8006610:	4640      	mov	r0, r8
 8006612:	4649      	mov	r1, r9
 8006614:	f7fa f800 	bl	8000618 <__aeabi_dmul>
 8006618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800661c:	f7fa fa82 	bl	8000b24 <__aeabi_dcmpge>
 8006620:	9e04      	ldr	r6, [sp, #16]
 8006622:	4637      	mov	r7, r6
 8006624:	2800      	cmp	r0, #0
 8006626:	f040 8245 	bne.w	8006ab4 <_dtoa_r+0x954>
 800662a:	9d00      	ldr	r5, [sp, #0]
 800662c:	2331      	movs	r3, #49	; 0x31
 800662e:	f805 3b01 	strb.w	r3, [r5], #1
 8006632:	f10b 0b01 	add.w	fp, fp, #1
 8006636:	e241      	b.n	8006abc <_dtoa_r+0x95c>
 8006638:	07f2      	lsls	r2, r6, #31
 800663a:	d505      	bpl.n	8006648 <_dtoa_r+0x4e8>
 800663c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006640:	f7f9 ffea 	bl	8000618 <__aeabi_dmul>
 8006644:	3501      	adds	r5, #1
 8006646:	2301      	movs	r3, #1
 8006648:	1076      	asrs	r6, r6, #1
 800664a:	3708      	adds	r7, #8
 800664c:	e773      	b.n	8006536 <_dtoa_r+0x3d6>
 800664e:	2502      	movs	r5, #2
 8006650:	e775      	b.n	800653e <_dtoa_r+0x3de>
 8006652:	9e04      	ldr	r6, [sp, #16]
 8006654:	465f      	mov	r7, fp
 8006656:	e792      	b.n	800657e <_dtoa_r+0x41e>
 8006658:	9900      	ldr	r1, [sp, #0]
 800665a:	4b50      	ldr	r3, [pc, #320]	; (800679c <_dtoa_r+0x63c>)
 800665c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006660:	4431      	add	r1, r6
 8006662:	9102      	str	r1, [sp, #8]
 8006664:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006666:	eeb0 9a47 	vmov.f32	s18, s14
 800666a:	eef0 9a67 	vmov.f32	s19, s15
 800666e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006672:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006676:	2900      	cmp	r1, #0
 8006678:	d044      	beq.n	8006704 <_dtoa_r+0x5a4>
 800667a:	494e      	ldr	r1, [pc, #312]	; (80067b4 <_dtoa_r+0x654>)
 800667c:	2000      	movs	r0, #0
 800667e:	f7fa f8f5 	bl	800086c <__aeabi_ddiv>
 8006682:	ec53 2b19 	vmov	r2, r3, d9
 8006686:	f7f9 fe0f 	bl	80002a8 <__aeabi_dsub>
 800668a:	9d00      	ldr	r5, [sp, #0]
 800668c:	ec41 0b19 	vmov	d9, r0, r1
 8006690:	4649      	mov	r1, r9
 8006692:	4640      	mov	r0, r8
 8006694:	f7fa fa70 	bl	8000b78 <__aeabi_d2iz>
 8006698:	4606      	mov	r6, r0
 800669a:	f7f9 ff53 	bl	8000544 <__aeabi_i2d>
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4640      	mov	r0, r8
 80066a4:	4649      	mov	r1, r9
 80066a6:	f7f9 fdff 	bl	80002a8 <__aeabi_dsub>
 80066aa:	3630      	adds	r6, #48	; 0x30
 80066ac:	f805 6b01 	strb.w	r6, [r5], #1
 80066b0:	ec53 2b19 	vmov	r2, r3, d9
 80066b4:	4680      	mov	r8, r0
 80066b6:	4689      	mov	r9, r1
 80066b8:	f7fa fa20 	bl	8000afc <__aeabi_dcmplt>
 80066bc:	2800      	cmp	r0, #0
 80066be:	d164      	bne.n	800678a <_dtoa_r+0x62a>
 80066c0:	4642      	mov	r2, r8
 80066c2:	464b      	mov	r3, r9
 80066c4:	4937      	ldr	r1, [pc, #220]	; (80067a4 <_dtoa_r+0x644>)
 80066c6:	2000      	movs	r0, #0
 80066c8:	f7f9 fdee 	bl	80002a8 <__aeabi_dsub>
 80066cc:	ec53 2b19 	vmov	r2, r3, d9
 80066d0:	f7fa fa14 	bl	8000afc <__aeabi_dcmplt>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	f040 80b6 	bne.w	8006846 <_dtoa_r+0x6e6>
 80066da:	9b02      	ldr	r3, [sp, #8]
 80066dc:	429d      	cmp	r5, r3
 80066de:	f43f af7c 	beq.w	80065da <_dtoa_r+0x47a>
 80066e2:	4b31      	ldr	r3, [pc, #196]	; (80067a8 <_dtoa_r+0x648>)
 80066e4:	ec51 0b19 	vmov	r0, r1, d9
 80066e8:	2200      	movs	r2, #0
 80066ea:	f7f9 ff95 	bl	8000618 <__aeabi_dmul>
 80066ee:	4b2e      	ldr	r3, [pc, #184]	; (80067a8 <_dtoa_r+0x648>)
 80066f0:	ec41 0b19 	vmov	d9, r0, r1
 80066f4:	2200      	movs	r2, #0
 80066f6:	4640      	mov	r0, r8
 80066f8:	4649      	mov	r1, r9
 80066fa:	f7f9 ff8d 	bl	8000618 <__aeabi_dmul>
 80066fe:	4680      	mov	r8, r0
 8006700:	4689      	mov	r9, r1
 8006702:	e7c5      	b.n	8006690 <_dtoa_r+0x530>
 8006704:	ec51 0b17 	vmov	r0, r1, d7
 8006708:	f7f9 ff86 	bl	8000618 <__aeabi_dmul>
 800670c:	9b02      	ldr	r3, [sp, #8]
 800670e:	9d00      	ldr	r5, [sp, #0]
 8006710:	930f      	str	r3, [sp, #60]	; 0x3c
 8006712:	ec41 0b19 	vmov	d9, r0, r1
 8006716:	4649      	mov	r1, r9
 8006718:	4640      	mov	r0, r8
 800671a:	f7fa fa2d 	bl	8000b78 <__aeabi_d2iz>
 800671e:	4606      	mov	r6, r0
 8006720:	f7f9 ff10 	bl	8000544 <__aeabi_i2d>
 8006724:	3630      	adds	r6, #48	; 0x30
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	4640      	mov	r0, r8
 800672c:	4649      	mov	r1, r9
 800672e:	f7f9 fdbb 	bl	80002a8 <__aeabi_dsub>
 8006732:	f805 6b01 	strb.w	r6, [r5], #1
 8006736:	9b02      	ldr	r3, [sp, #8]
 8006738:	429d      	cmp	r5, r3
 800673a:	4680      	mov	r8, r0
 800673c:	4689      	mov	r9, r1
 800673e:	f04f 0200 	mov.w	r2, #0
 8006742:	d124      	bne.n	800678e <_dtoa_r+0x62e>
 8006744:	4b1b      	ldr	r3, [pc, #108]	; (80067b4 <_dtoa_r+0x654>)
 8006746:	ec51 0b19 	vmov	r0, r1, d9
 800674a:	f7f9 fdaf 	bl	80002ac <__adddf3>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	4640      	mov	r0, r8
 8006754:	4649      	mov	r1, r9
 8006756:	f7fa f9ef 	bl	8000b38 <__aeabi_dcmpgt>
 800675a:	2800      	cmp	r0, #0
 800675c:	d173      	bne.n	8006846 <_dtoa_r+0x6e6>
 800675e:	ec53 2b19 	vmov	r2, r3, d9
 8006762:	4914      	ldr	r1, [pc, #80]	; (80067b4 <_dtoa_r+0x654>)
 8006764:	2000      	movs	r0, #0
 8006766:	f7f9 fd9f 	bl	80002a8 <__aeabi_dsub>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4640      	mov	r0, r8
 8006770:	4649      	mov	r1, r9
 8006772:	f7fa f9c3 	bl	8000afc <__aeabi_dcmplt>
 8006776:	2800      	cmp	r0, #0
 8006778:	f43f af2f 	beq.w	80065da <_dtoa_r+0x47a>
 800677c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800677e:	1e6b      	subs	r3, r5, #1
 8006780:	930f      	str	r3, [sp, #60]	; 0x3c
 8006782:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006786:	2b30      	cmp	r3, #48	; 0x30
 8006788:	d0f8      	beq.n	800677c <_dtoa_r+0x61c>
 800678a:	46bb      	mov	fp, r7
 800678c:	e04a      	b.n	8006824 <_dtoa_r+0x6c4>
 800678e:	4b06      	ldr	r3, [pc, #24]	; (80067a8 <_dtoa_r+0x648>)
 8006790:	f7f9 ff42 	bl	8000618 <__aeabi_dmul>
 8006794:	4680      	mov	r8, r0
 8006796:	4689      	mov	r9, r1
 8006798:	e7bd      	b.n	8006716 <_dtoa_r+0x5b6>
 800679a:	bf00      	nop
 800679c:	0800a298 	.word	0x0800a298
 80067a0:	0800a270 	.word	0x0800a270
 80067a4:	3ff00000 	.word	0x3ff00000
 80067a8:	40240000 	.word	0x40240000
 80067ac:	401c0000 	.word	0x401c0000
 80067b0:	40140000 	.word	0x40140000
 80067b4:	3fe00000 	.word	0x3fe00000
 80067b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067bc:	9d00      	ldr	r5, [sp, #0]
 80067be:	4642      	mov	r2, r8
 80067c0:	464b      	mov	r3, r9
 80067c2:	4630      	mov	r0, r6
 80067c4:	4639      	mov	r1, r7
 80067c6:	f7fa f851 	bl	800086c <__aeabi_ddiv>
 80067ca:	f7fa f9d5 	bl	8000b78 <__aeabi_d2iz>
 80067ce:	9001      	str	r0, [sp, #4]
 80067d0:	f7f9 feb8 	bl	8000544 <__aeabi_i2d>
 80067d4:	4642      	mov	r2, r8
 80067d6:	464b      	mov	r3, r9
 80067d8:	f7f9 ff1e 	bl	8000618 <__aeabi_dmul>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	f7f9 fd60 	bl	80002a8 <__aeabi_dsub>
 80067e8:	9e01      	ldr	r6, [sp, #4]
 80067ea:	9f04      	ldr	r7, [sp, #16]
 80067ec:	3630      	adds	r6, #48	; 0x30
 80067ee:	f805 6b01 	strb.w	r6, [r5], #1
 80067f2:	9e00      	ldr	r6, [sp, #0]
 80067f4:	1bae      	subs	r6, r5, r6
 80067f6:	42b7      	cmp	r7, r6
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	d134      	bne.n	8006868 <_dtoa_r+0x708>
 80067fe:	f7f9 fd55 	bl	80002ac <__adddf3>
 8006802:	4642      	mov	r2, r8
 8006804:	464b      	mov	r3, r9
 8006806:	4606      	mov	r6, r0
 8006808:	460f      	mov	r7, r1
 800680a:	f7fa f995 	bl	8000b38 <__aeabi_dcmpgt>
 800680e:	b9c8      	cbnz	r0, 8006844 <_dtoa_r+0x6e4>
 8006810:	4642      	mov	r2, r8
 8006812:	464b      	mov	r3, r9
 8006814:	4630      	mov	r0, r6
 8006816:	4639      	mov	r1, r7
 8006818:	f7fa f966 	bl	8000ae8 <__aeabi_dcmpeq>
 800681c:	b110      	cbz	r0, 8006824 <_dtoa_r+0x6c4>
 800681e:	9b01      	ldr	r3, [sp, #4]
 8006820:	07db      	lsls	r3, r3, #31
 8006822:	d40f      	bmi.n	8006844 <_dtoa_r+0x6e4>
 8006824:	4651      	mov	r1, sl
 8006826:	4620      	mov	r0, r4
 8006828:	f000 fbcc 	bl	8006fc4 <_Bfree>
 800682c:	2300      	movs	r3, #0
 800682e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006830:	702b      	strb	r3, [r5, #0]
 8006832:	f10b 0301 	add.w	r3, fp, #1
 8006836:	6013      	str	r3, [r2, #0]
 8006838:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800683a:	2b00      	cmp	r3, #0
 800683c:	f43f ace2 	beq.w	8006204 <_dtoa_r+0xa4>
 8006840:	601d      	str	r5, [r3, #0]
 8006842:	e4df      	b.n	8006204 <_dtoa_r+0xa4>
 8006844:	465f      	mov	r7, fp
 8006846:	462b      	mov	r3, r5
 8006848:	461d      	mov	r5, r3
 800684a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800684e:	2a39      	cmp	r2, #57	; 0x39
 8006850:	d106      	bne.n	8006860 <_dtoa_r+0x700>
 8006852:	9a00      	ldr	r2, [sp, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d1f7      	bne.n	8006848 <_dtoa_r+0x6e8>
 8006858:	9900      	ldr	r1, [sp, #0]
 800685a:	2230      	movs	r2, #48	; 0x30
 800685c:	3701      	adds	r7, #1
 800685e:	700a      	strb	r2, [r1, #0]
 8006860:	781a      	ldrb	r2, [r3, #0]
 8006862:	3201      	adds	r2, #1
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	e790      	b.n	800678a <_dtoa_r+0x62a>
 8006868:	4ba3      	ldr	r3, [pc, #652]	; (8006af8 <_dtoa_r+0x998>)
 800686a:	2200      	movs	r2, #0
 800686c:	f7f9 fed4 	bl	8000618 <__aeabi_dmul>
 8006870:	2200      	movs	r2, #0
 8006872:	2300      	movs	r3, #0
 8006874:	4606      	mov	r6, r0
 8006876:	460f      	mov	r7, r1
 8006878:	f7fa f936 	bl	8000ae8 <__aeabi_dcmpeq>
 800687c:	2800      	cmp	r0, #0
 800687e:	d09e      	beq.n	80067be <_dtoa_r+0x65e>
 8006880:	e7d0      	b.n	8006824 <_dtoa_r+0x6c4>
 8006882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006884:	2a00      	cmp	r2, #0
 8006886:	f000 80ca 	beq.w	8006a1e <_dtoa_r+0x8be>
 800688a:	9a07      	ldr	r2, [sp, #28]
 800688c:	2a01      	cmp	r2, #1
 800688e:	f300 80ad 	bgt.w	80069ec <_dtoa_r+0x88c>
 8006892:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006894:	2a00      	cmp	r2, #0
 8006896:	f000 80a5 	beq.w	80069e4 <_dtoa_r+0x884>
 800689a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800689e:	9e08      	ldr	r6, [sp, #32]
 80068a0:	9d05      	ldr	r5, [sp, #20]
 80068a2:	9a05      	ldr	r2, [sp, #20]
 80068a4:	441a      	add	r2, r3
 80068a6:	9205      	str	r2, [sp, #20]
 80068a8:	9a06      	ldr	r2, [sp, #24]
 80068aa:	2101      	movs	r1, #1
 80068ac:	441a      	add	r2, r3
 80068ae:	4620      	mov	r0, r4
 80068b0:	9206      	str	r2, [sp, #24]
 80068b2:	f000 fc87 	bl	80071c4 <__i2b>
 80068b6:	4607      	mov	r7, r0
 80068b8:	b165      	cbz	r5, 80068d4 <_dtoa_r+0x774>
 80068ba:	9b06      	ldr	r3, [sp, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	dd09      	ble.n	80068d4 <_dtoa_r+0x774>
 80068c0:	42ab      	cmp	r3, r5
 80068c2:	9a05      	ldr	r2, [sp, #20]
 80068c4:	bfa8      	it	ge
 80068c6:	462b      	movge	r3, r5
 80068c8:	1ad2      	subs	r2, r2, r3
 80068ca:	9205      	str	r2, [sp, #20]
 80068cc:	9a06      	ldr	r2, [sp, #24]
 80068ce:	1aed      	subs	r5, r5, r3
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	9306      	str	r3, [sp, #24]
 80068d4:	9b08      	ldr	r3, [sp, #32]
 80068d6:	b1f3      	cbz	r3, 8006916 <_dtoa_r+0x7b6>
 80068d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 80a3 	beq.w	8006a26 <_dtoa_r+0x8c6>
 80068e0:	2e00      	cmp	r6, #0
 80068e2:	dd10      	ble.n	8006906 <_dtoa_r+0x7a6>
 80068e4:	4639      	mov	r1, r7
 80068e6:	4632      	mov	r2, r6
 80068e8:	4620      	mov	r0, r4
 80068ea:	f000 fd2b 	bl	8007344 <__pow5mult>
 80068ee:	4652      	mov	r2, sl
 80068f0:	4601      	mov	r1, r0
 80068f2:	4607      	mov	r7, r0
 80068f4:	4620      	mov	r0, r4
 80068f6:	f000 fc7b 	bl	80071f0 <__multiply>
 80068fa:	4651      	mov	r1, sl
 80068fc:	4680      	mov	r8, r0
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 fb60 	bl	8006fc4 <_Bfree>
 8006904:	46c2      	mov	sl, r8
 8006906:	9b08      	ldr	r3, [sp, #32]
 8006908:	1b9a      	subs	r2, r3, r6
 800690a:	d004      	beq.n	8006916 <_dtoa_r+0x7b6>
 800690c:	4651      	mov	r1, sl
 800690e:	4620      	mov	r0, r4
 8006910:	f000 fd18 	bl	8007344 <__pow5mult>
 8006914:	4682      	mov	sl, r0
 8006916:	2101      	movs	r1, #1
 8006918:	4620      	mov	r0, r4
 800691a:	f000 fc53 	bl	80071c4 <__i2b>
 800691e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006920:	2b00      	cmp	r3, #0
 8006922:	4606      	mov	r6, r0
 8006924:	f340 8081 	ble.w	8006a2a <_dtoa_r+0x8ca>
 8006928:	461a      	mov	r2, r3
 800692a:	4601      	mov	r1, r0
 800692c:	4620      	mov	r0, r4
 800692e:	f000 fd09 	bl	8007344 <__pow5mult>
 8006932:	9b07      	ldr	r3, [sp, #28]
 8006934:	2b01      	cmp	r3, #1
 8006936:	4606      	mov	r6, r0
 8006938:	dd7a      	ble.n	8006a30 <_dtoa_r+0x8d0>
 800693a:	f04f 0800 	mov.w	r8, #0
 800693e:	6933      	ldr	r3, [r6, #16]
 8006940:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006944:	6918      	ldr	r0, [r3, #16]
 8006946:	f000 fbef 	bl	8007128 <__hi0bits>
 800694a:	f1c0 0020 	rsb	r0, r0, #32
 800694e:	9b06      	ldr	r3, [sp, #24]
 8006950:	4418      	add	r0, r3
 8006952:	f010 001f 	ands.w	r0, r0, #31
 8006956:	f000 8094 	beq.w	8006a82 <_dtoa_r+0x922>
 800695a:	f1c0 0320 	rsb	r3, r0, #32
 800695e:	2b04      	cmp	r3, #4
 8006960:	f340 8085 	ble.w	8006a6e <_dtoa_r+0x90e>
 8006964:	9b05      	ldr	r3, [sp, #20]
 8006966:	f1c0 001c 	rsb	r0, r0, #28
 800696a:	4403      	add	r3, r0
 800696c:	9305      	str	r3, [sp, #20]
 800696e:	9b06      	ldr	r3, [sp, #24]
 8006970:	4403      	add	r3, r0
 8006972:	4405      	add	r5, r0
 8006974:	9306      	str	r3, [sp, #24]
 8006976:	9b05      	ldr	r3, [sp, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	dd05      	ble.n	8006988 <_dtoa_r+0x828>
 800697c:	4651      	mov	r1, sl
 800697e:	461a      	mov	r2, r3
 8006980:	4620      	mov	r0, r4
 8006982:	f000 fd39 	bl	80073f8 <__lshift>
 8006986:	4682      	mov	sl, r0
 8006988:	9b06      	ldr	r3, [sp, #24]
 800698a:	2b00      	cmp	r3, #0
 800698c:	dd05      	ble.n	800699a <_dtoa_r+0x83a>
 800698e:	4631      	mov	r1, r6
 8006990:	461a      	mov	r2, r3
 8006992:	4620      	mov	r0, r4
 8006994:	f000 fd30 	bl	80073f8 <__lshift>
 8006998:	4606      	mov	r6, r0
 800699a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800699c:	2b00      	cmp	r3, #0
 800699e:	d072      	beq.n	8006a86 <_dtoa_r+0x926>
 80069a0:	4631      	mov	r1, r6
 80069a2:	4650      	mov	r0, sl
 80069a4:	f000 fd94 	bl	80074d0 <__mcmp>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	da6c      	bge.n	8006a86 <_dtoa_r+0x926>
 80069ac:	2300      	movs	r3, #0
 80069ae:	4651      	mov	r1, sl
 80069b0:	220a      	movs	r2, #10
 80069b2:	4620      	mov	r0, r4
 80069b4:	f000 fb28 	bl	8007008 <__multadd>
 80069b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069be:	4682      	mov	sl, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 81b0 	beq.w	8006d26 <_dtoa_r+0xbc6>
 80069c6:	2300      	movs	r3, #0
 80069c8:	4639      	mov	r1, r7
 80069ca:	220a      	movs	r2, #10
 80069cc:	4620      	mov	r0, r4
 80069ce:	f000 fb1b 	bl	8007008 <__multadd>
 80069d2:	9b01      	ldr	r3, [sp, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	4607      	mov	r7, r0
 80069d8:	f300 8096 	bgt.w	8006b08 <_dtoa_r+0x9a8>
 80069dc:	9b07      	ldr	r3, [sp, #28]
 80069de:	2b02      	cmp	r3, #2
 80069e0:	dc59      	bgt.n	8006a96 <_dtoa_r+0x936>
 80069e2:	e091      	b.n	8006b08 <_dtoa_r+0x9a8>
 80069e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069ea:	e758      	b.n	800689e <_dtoa_r+0x73e>
 80069ec:	9b04      	ldr	r3, [sp, #16]
 80069ee:	1e5e      	subs	r6, r3, #1
 80069f0:	9b08      	ldr	r3, [sp, #32]
 80069f2:	42b3      	cmp	r3, r6
 80069f4:	bfbf      	itttt	lt
 80069f6:	9b08      	ldrlt	r3, [sp, #32]
 80069f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80069fa:	9608      	strlt	r6, [sp, #32]
 80069fc:	1af3      	sublt	r3, r6, r3
 80069fe:	bfb4      	ite	lt
 8006a00:	18d2      	addlt	r2, r2, r3
 8006a02:	1b9e      	subge	r6, r3, r6
 8006a04:	9b04      	ldr	r3, [sp, #16]
 8006a06:	bfbc      	itt	lt
 8006a08:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006a0a:	2600      	movlt	r6, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	bfb7      	itett	lt
 8006a10:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006a14:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006a18:	1a9d      	sublt	r5, r3, r2
 8006a1a:	2300      	movlt	r3, #0
 8006a1c:	e741      	b.n	80068a2 <_dtoa_r+0x742>
 8006a1e:	9e08      	ldr	r6, [sp, #32]
 8006a20:	9d05      	ldr	r5, [sp, #20]
 8006a22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006a24:	e748      	b.n	80068b8 <_dtoa_r+0x758>
 8006a26:	9a08      	ldr	r2, [sp, #32]
 8006a28:	e770      	b.n	800690c <_dtoa_r+0x7ac>
 8006a2a:	9b07      	ldr	r3, [sp, #28]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	dc19      	bgt.n	8006a64 <_dtoa_r+0x904>
 8006a30:	9b02      	ldr	r3, [sp, #8]
 8006a32:	b9bb      	cbnz	r3, 8006a64 <_dtoa_r+0x904>
 8006a34:	9b03      	ldr	r3, [sp, #12]
 8006a36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a3a:	b99b      	cbnz	r3, 8006a64 <_dtoa_r+0x904>
 8006a3c:	9b03      	ldr	r3, [sp, #12]
 8006a3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a42:	0d1b      	lsrs	r3, r3, #20
 8006a44:	051b      	lsls	r3, r3, #20
 8006a46:	b183      	cbz	r3, 8006a6a <_dtoa_r+0x90a>
 8006a48:	9b05      	ldr	r3, [sp, #20]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	9305      	str	r3, [sp, #20]
 8006a4e:	9b06      	ldr	r3, [sp, #24]
 8006a50:	3301      	adds	r3, #1
 8006a52:	9306      	str	r3, [sp, #24]
 8006a54:	f04f 0801 	mov.w	r8, #1
 8006a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f47f af6f 	bne.w	800693e <_dtoa_r+0x7de>
 8006a60:	2001      	movs	r0, #1
 8006a62:	e774      	b.n	800694e <_dtoa_r+0x7ee>
 8006a64:	f04f 0800 	mov.w	r8, #0
 8006a68:	e7f6      	b.n	8006a58 <_dtoa_r+0x8f8>
 8006a6a:	4698      	mov	r8, r3
 8006a6c:	e7f4      	b.n	8006a58 <_dtoa_r+0x8f8>
 8006a6e:	d082      	beq.n	8006976 <_dtoa_r+0x816>
 8006a70:	9a05      	ldr	r2, [sp, #20]
 8006a72:	331c      	adds	r3, #28
 8006a74:	441a      	add	r2, r3
 8006a76:	9205      	str	r2, [sp, #20]
 8006a78:	9a06      	ldr	r2, [sp, #24]
 8006a7a:	441a      	add	r2, r3
 8006a7c:	441d      	add	r5, r3
 8006a7e:	9206      	str	r2, [sp, #24]
 8006a80:	e779      	b.n	8006976 <_dtoa_r+0x816>
 8006a82:	4603      	mov	r3, r0
 8006a84:	e7f4      	b.n	8006a70 <_dtoa_r+0x910>
 8006a86:	9b04      	ldr	r3, [sp, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	dc37      	bgt.n	8006afc <_dtoa_r+0x99c>
 8006a8c:	9b07      	ldr	r3, [sp, #28]
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	dd34      	ble.n	8006afc <_dtoa_r+0x99c>
 8006a92:	9b04      	ldr	r3, [sp, #16]
 8006a94:	9301      	str	r3, [sp, #4]
 8006a96:	9b01      	ldr	r3, [sp, #4]
 8006a98:	b963      	cbnz	r3, 8006ab4 <_dtoa_r+0x954>
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	2205      	movs	r2, #5
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f000 fab2 	bl	8007008 <__multadd>
 8006aa4:	4601      	mov	r1, r0
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	4650      	mov	r0, sl
 8006aaa:	f000 fd11 	bl	80074d0 <__mcmp>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	f73f adbb 	bgt.w	800662a <_dtoa_r+0x4ca>
 8006ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ab6:	9d00      	ldr	r5, [sp, #0]
 8006ab8:	ea6f 0b03 	mvn.w	fp, r3
 8006abc:	f04f 0800 	mov.w	r8, #0
 8006ac0:	4631      	mov	r1, r6
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f000 fa7e 	bl	8006fc4 <_Bfree>
 8006ac8:	2f00      	cmp	r7, #0
 8006aca:	f43f aeab 	beq.w	8006824 <_dtoa_r+0x6c4>
 8006ace:	f1b8 0f00 	cmp.w	r8, #0
 8006ad2:	d005      	beq.n	8006ae0 <_dtoa_r+0x980>
 8006ad4:	45b8      	cmp	r8, r7
 8006ad6:	d003      	beq.n	8006ae0 <_dtoa_r+0x980>
 8006ad8:	4641      	mov	r1, r8
 8006ada:	4620      	mov	r0, r4
 8006adc:	f000 fa72 	bl	8006fc4 <_Bfree>
 8006ae0:	4639      	mov	r1, r7
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f000 fa6e 	bl	8006fc4 <_Bfree>
 8006ae8:	e69c      	b.n	8006824 <_dtoa_r+0x6c4>
 8006aea:	2600      	movs	r6, #0
 8006aec:	4637      	mov	r7, r6
 8006aee:	e7e1      	b.n	8006ab4 <_dtoa_r+0x954>
 8006af0:	46bb      	mov	fp, r7
 8006af2:	4637      	mov	r7, r6
 8006af4:	e599      	b.n	800662a <_dtoa_r+0x4ca>
 8006af6:	bf00      	nop
 8006af8:	40240000 	.word	0x40240000
 8006afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 80c8 	beq.w	8006c94 <_dtoa_r+0xb34>
 8006b04:	9b04      	ldr	r3, [sp, #16]
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	2d00      	cmp	r5, #0
 8006b0a:	dd05      	ble.n	8006b18 <_dtoa_r+0x9b8>
 8006b0c:	4639      	mov	r1, r7
 8006b0e:	462a      	mov	r2, r5
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 fc71 	bl	80073f8 <__lshift>
 8006b16:	4607      	mov	r7, r0
 8006b18:	f1b8 0f00 	cmp.w	r8, #0
 8006b1c:	d05b      	beq.n	8006bd6 <_dtoa_r+0xa76>
 8006b1e:	6879      	ldr	r1, [r7, #4]
 8006b20:	4620      	mov	r0, r4
 8006b22:	f000 fa0f 	bl	8006f44 <_Balloc>
 8006b26:	4605      	mov	r5, r0
 8006b28:	b928      	cbnz	r0, 8006b36 <_dtoa_r+0x9d6>
 8006b2a:	4b83      	ldr	r3, [pc, #524]	; (8006d38 <_dtoa_r+0xbd8>)
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006b32:	f7ff bb2e 	b.w	8006192 <_dtoa_r+0x32>
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	3202      	adds	r2, #2
 8006b3a:	0092      	lsls	r2, r2, #2
 8006b3c:	f107 010c 	add.w	r1, r7, #12
 8006b40:	300c      	adds	r0, #12
 8006b42:	f002 fb19 	bl	8009178 <memcpy>
 8006b46:	2201      	movs	r2, #1
 8006b48:	4629      	mov	r1, r5
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f000 fc54 	bl	80073f8 <__lshift>
 8006b50:	9b00      	ldr	r3, [sp, #0]
 8006b52:	3301      	adds	r3, #1
 8006b54:	9304      	str	r3, [sp, #16]
 8006b56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	9308      	str	r3, [sp, #32]
 8006b5e:	9b02      	ldr	r3, [sp, #8]
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	46b8      	mov	r8, r7
 8006b66:	9306      	str	r3, [sp, #24]
 8006b68:	4607      	mov	r7, r0
 8006b6a:	9b04      	ldr	r3, [sp, #16]
 8006b6c:	4631      	mov	r1, r6
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	4650      	mov	r0, sl
 8006b72:	9301      	str	r3, [sp, #4]
 8006b74:	f7ff fa6a 	bl	800604c <quorem>
 8006b78:	4641      	mov	r1, r8
 8006b7a:	9002      	str	r0, [sp, #8]
 8006b7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b80:	4650      	mov	r0, sl
 8006b82:	f000 fca5 	bl	80074d0 <__mcmp>
 8006b86:	463a      	mov	r2, r7
 8006b88:	9005      	str	r0, [sp, #20]
 8006b8a:	4631      	mov	r1, r6
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f000 fcbb 	bl	8007508 <__mdiff>
 8006b92:	68c2      	ldr	r2, [r0, #12]
 8006b94:	4605      	mov	r5, r0
 8006b96:	bb02      	cbnz	r2, 8006bda <_dtoa_r+0xa7a>
 8006b98:	4601      	mov	r1, r0
 8006b9a:	4650      	mov	r0, sl
 8006b9c:	f000 fc98 	bl	80074d0 <__mcmp>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ba8:	f000 fa0c 	bl	8006fc4 <_Bfree>
 8006bac:	9b07      	ldr	r3, [sp, #28]
 8006bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bb0:	9d04      	ldr	r5, [sp, #16]
 8006bb2:	ea43 0102 	orr.w	r1, r3, r2
 8006bb6:	9b06      	ldr	r3, [sp, #24]
 8006bb8:	4319      	orrs	r1, r3
 8006bba:	d110      	bne.n	8006bde <_dtoa_r+0xa7e>
 8006bbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006bc0:	d029      	beq.n	8006c16 <_dtoa_r+0xab6>
 8006bc2:	9b05      	ldr	r3, [sp, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	dd02      	ble.n	8006bce <_dtoa_r+0xa6e>
 8006bc8:	9b02      	ldr	r3, [sp, #8]
 8006bca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006bce:	9b01      	ldr	r3, [sp, #4]
 8006bd0:	f883 9000 	strb.w	r9, [r3]
 8006bd4:	e774      	b.n	8006ac0 <_dtoa_r+0x960>
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	e7ba      	b.n	8006b50 <_dtoa_r+0x9f0>
 8006bda:	2201      	movs	r2, #1
 8006bdc:	e7e1      	b.n	8006ba2 <_dtoa_r+0xa42>
 8006bde:	9b05      	ldr	r3, [sp, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	db04      	blt.n	8006bee <_dtoa_r+0xa8e>
 8006be4:	9907      	ldr	r1, [sp, #28]
 8006be6:	430b      	orrs	r3, r1
 8006be8:	9906      	ldr	r1, [sp, #24]
 8006bea:	430b      	orrs	r3, r1
 8006bec:	d120      	bne.n	8006c30 <_dtoa_r+0xad0>
 8006bee:	2a00      	cmp	r2, #0
 8006bf0:	dded      	ble.n	8006bce <_dtoa_r+0xa6e>
 8006bf2:	4651      	mov	r1, sl
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f000 fbfe 	bl	80073f8 <__lshift>
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	4682      	mov	sl, r0
 8006c00:	f000 fc66 	bl	80074d0 <__mcmp>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	dc03      	bgt.n	8006c10 <_dtoa_r+0xab0>
 8006c08:	d1e1      	bne.n	8006bce <_dtoa_r+0xa6e>
 8006c0a:	f019 0f01 	tst.w	r9, #1
 8006c0e:	d0de      	beq.n	8006bce <_dtoa_r+0xa6e>
 8006c10:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c14:	d1d8      	bne.n	8006bc8 <_dtoa_r+0xa68>
 8006c16:	9a01      	ldr	r2, [sp, #4]
 8006c18:	2339      	movs	r3, #57	; 0x39
 8006c1a:	7013      	strb	r3, [r2, #0]
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	461d      	mov	r5, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006c26:	2a39      	cmp	r2, #57	; 0x39
 8006c28:	d06c      	beq.n	8006d04 <_dtoa_r+0xba4>
 8006c2a:	3201      	adds	r2, #1
 8006c2c:	701a      	strb	r2, [r3, #0]
 8006c2e:	e747      	b.n	8006ac0 <_dtoa_r+0x960>
 8006c30:	2a00      	cmp	r2, #0
 8006c32:	dd07      	ble.n	8006c44 <_dtoa_r+0xae4>
 8006c34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c38:	d0ed      	beq.n	8006c16 <_dtoa_r+0xab6>
 8006c3a:	9a01      	ldr	r2, [sp, #4]
 8006c3c:	f109 0301 	add.w	r3, r9, #1
 8006c40:	7013      	strb	r3, [r2, #0]
 8006c42:	e73d      	b.n	8006ac0 <_dtoa_r+0x960>
 8006c44:	9b04      	ldr	r3, [sp, #16]
 8006c46:	9a08      	ldr	r2, [sp, #32]
 8006c48:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d043      	beq.n	8006cd8 <_dtoa_r+0xb78>
 8006c50:	4651      	mov	r1, sl
 8006c52:	2300      	movs	r3, #0
 8006c54:	220a      	movs	r2, #10
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 f9d6 	bl	8007008 <__multadd>
 8006c5c:	45b8      	cmp	r8, r7
 8006c5e:	4682      	mov	sl, r0
 8006c60:	f04f 0300 	mov.w	r3, #0
 8006c64:	f04f 020a 	mov.w	r2, #10
 8006c68:	4641      	mov	r1, r8
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	d107      	bne.n	8006c7e <_dtoa_r+0xb1e>
 8006c6e:	f000 f9cb 	bl	8007008 <__multadd>
 8006c72:	4680      	mov	r8, r0
 8006c74:	4607      	mov	r7, r0
 8006c76:	9b04      	ldr	r3, [sp, #16]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	9304      	str	r3, [sp, #16]
 8006c7c:	e775      	b.n	8006b6a <_dtoa_r+0xa0a>
 8006c7e:	f000 f9c3 	bl	8007008 <__multadd>
 8006c82:	4639      	mov	r1, r7
 8006c84:	4680      	mov	r8, r0
 8006c86:	2300      	movs	r3, #0
 8006c88:	220a      	movs	r2, #10
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f000 f9bc 	bl	8007008 <__multadd>
 8006c90:	4607      	mov	r7, r0
 8006c92:	e7f0      	b.n	8006c76 <_dtoa_r+0xb16>
 8006c94:	9b04      	ldr	r3, [sp, #16]
 8006c96:	9301      	str	r3, [sp, #4]
 8006c98:	9d00      	ldr	r5, [sp, #0]
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	4650      	mov	r0, sl
 8006c9e:	f7ff f9d5 	bl	800604c <quorem>
 8006ca2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ca6:	9b00      	ldr	r3, [sp, #0]
 8006ca8:	f805 9b01 	strb.w	r9, [r5], #1
 8006cac:	1aea      	subs	r2, r5, r3
 8006cae:	9b01      	ldr	r3, [sp, #4]
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	dd07      	ble.n	8006cc4 <_dtoa_r+0xb64>
 8006cb4:	4651      	mov	r1, sl
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	220a      	movs	r2, #10
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f000 f9a4 	bl	8007008 <__multadd>
 8006cc0:	4682      	mov	sl, r0
 8006cc2:	e7ea      	b.n	8006c9a <_dtoa_r+0xb3a>
 8006cc4:	9b01      	ldr	r3, [sp, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	bfc8      	it	gt
 8006cca:	461d      	movgt	r5, r3
 8006ccc:	9b00      	ldr	r3, [sp, #0]
 8006cce:	bfd8      	it	le
 8006cd0:	2501      	movle	r5, #1
 8006cd2:	441d      	add	r5, r3
 8006cd4:	f04f 0800 	mov.w	r8, #0
 8006cd8:	4651      	mov	r1, sl
 8006cda:	2201      	movs	r2, #1
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f000 fb8b 	bl	80073f8 <__lshift>
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4682      	mov	sl, r0
 8006ce6:	f000 fbf3 	bl	80074d0 <__mcmp>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	dc96      	bgt.n	8006c1c <_dtoa_r+0xabc>
 8006cee:	d102      	bne.n	8006cf6 <_dtoa_r+0xb96>
 8006cf0:	f019 0f01 	tst.w	r9, #1
 8006cf4:	d192      	bne.n	8006c1c <_dtoa_r+0xabc>
 8006cf6:	462b      	mov	r3, r5
 8006cf8:	461d      	mov	r5, r3
 8006cfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cfe:	2a30      	cmp	r2, #48	; 0x30
 8006d00:	d0fa      	beq.n	8006cf8 <_dtoa_r+0xb98>
 8006d02:	e6dd      	b.n	8006ac0 <_dtoa_r+0x960>
 8006d04:	9a00      	ldr	r2, [sp, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d189      	bne.n	8006c1e <_dtoa_r+0xabe>
 8006d0a:	f10b 0b01 	add.w	fp, fp, #1
 8006d0e:	2331      	movs	r3, #49	; 0x31
 8006d10:	e796      	b.n	8006c40 <_dtoa_r+0xae0>
 8006d12:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <_dtoa_r+0xbdc>)
 8006d14:	f7ff ba99 	b.w	800624a <_dtoa_r+0xea>
 8006d18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f47f aa6d 	bne.w	80061fa <_dtoa_r+0x9a>
 8006d20:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <_dtoa_r+0xbe0>)
 8006d22:	f7ff ba92 	b.w	800624a <_dtoa_r+0xea>
 8006d26:	9b01      	ldr	r3, [sp, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	dcb5      	bgt.n	8006c98 <_dtoa_r+0xb38>
 8006d2c:	9b07      	ldr	r3, [sp, #28]
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	f73f aeb1 	bgt.w	8006a96 <_dtoa_r+0x936>
 8006d34:	e7b0      	b.n	8006c98 <_dtoa_r+0xb38>
 8006d36:	bf00      	nop
 8006d38:	0800a1ff 	.word	0x0800a1ff
 8006d3c:	0800a4e8 	.word	0x0800a4e8
 8006d40:	0800a183 	.word	0x0800a183

08006d44 <_free_r>:
 8006d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d46:	2900      	cmp	r1, #0
 8006d48:	d044      	beq.n	8006dd4 <_free_r+0x90>
 8006d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d4e:	9001      	str	r0, [sp, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f1a1 0404 	sub.w	r4, r1, #4
 8006d56:	bfb8      	it	lt
 8006d58:	18e4      	addlt	r4, r4, r3
 8006d5a:	f000 f8e7 	bl	8006f2c <__malloc_lock>
 8006d5e:	4a1e      	ldr	r2, [pc, #120]	; (8006dd8 <_free_r+0x94>)
 8006d60:	9801      	ldr	r0, [sp, #4]
 8006d62:	6813      	ldr	r3, [r2, #0]
 8006d64:	b933      	cbnz	r3, 8006d74 <_free_r+0x30>
 8006d66:	6063      	str	r3, [r4, #4]
 8006d68:	6014      	str	r4, [r2, #0]
 8006d6a:	b003      	add	sp, #12
 8006d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d70:	f000 b8e2 	b.w	8006f38 <__malloc_unlock>
 8006d74:	42a3      	cmp	r3, r4
 8006d76:	d908      	bls.n	8006d8a <_free_r+0x46>
 8006d78:	6825      	ldr	r5, [r4, #0]
 8006d7a:	1961      	adds	r1, r4, r5
 8006d7c:	428b      	cmp	r3, r1
 8006d7e:	bf01      	itttt	eq
 8006d80:	6819      	ldreq	r1, [r3, #0]
 8006d82:	685b      	ldreq	r3, [r3, #4]
 8006d84:	1949      	addeq	r1, r1, r5
 8006d86:	6021      	streq	r1, [r4, #0]
 8006d88:	e7ed      	b.n	8006d66 <_free_r+0x22>
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	b10b      	cbz	r3, 8006d94 <_free_r+0x50>
 8006d90:	42a3      	cmp	r3, r4
 8006d92:	d9fa      	bls.n	8006d8a <_free_r+0x46>
 8006d94:	6811      	ldr	r1, [r2, #0]
 8006d96:	1855      	adds	r5, r2, r1
 8006d98:	42a5      	cmp	r5, r4
 8006d9a:	d10b      	bne.n	8006db4 <_free_r+0x70>
 8006d9c:	6824      	ldr	r4, [r4, #0]
 8006d9e:	4421      	add	r1, r4
 8006da0:	1854      	adds	r4, r2, r1
 8006da2:	42a3      	cmp	r3, r4
 8006da4:	6011      	str	r1, [r2, #0]
 8006da6:	d1e0      	bne.n	8006d6a <_free_r+0x26>
 8006da8:	681c      	ldr	r4, [r3, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	6053      	str	r3, [r2, #4]
 8006dae:	440c      	add	r4, r1
 8006db0:	6014      	str	r4, [r2, #0]
 8006db2:	e7da      	b.n	8006d6a <_free_r+0x26>
 8006db4:	d902      	bls.n	8006dbc <_free_r+0x78>
 8006db6:	230c      	movs	r3, #12
 8006db8:	6003      	str	r3, [r0, #0]
 8006dba:	e7d6      	b.n	8006d6a <_free_r+0x26>
 8006dbc:	6825      	ldr	r5, [r4, #0]
 8006dbe:	1961      	adds	r1, r4, r5
 8006dc0:	428b      	cmp	r3, r1
 8006dc2:	bf04      	itt	eq
 8006dc4:	6819      	ldreq	r1, [r3, #0]
 8006dc6:	685b      	ldreq	r3, [r3, #4]
 8006dc8:	6063      	str	r3, [r4, #4]
 8006dca:	bf04      	itt	eq
 8006dcc:	1949      	addeq	r1, r1, r5
 8006dce:	6021      	streq	r1, [r4, #0]
 8006dd0:	6054      	str	r4, [r2, #4]
 8006dd2:	e7ca      	b.n	8006d6a <_free_r+0x26>
 8006dd4:	b003      	add	sp, #12
 8006dd6:	bd30      	pop	{r4, r5, pc}
 8006dd8:	20000ad0 	.word	0x20000ad0

08006ddc <malloc>:
 8006ddc:	4b02      	ldr	r3, [pc, #8]	; (8006de8 <malloc+0xc>)
 8006dde:	4601      	mov	r1, r0
 8006de0:	6818      	ldr	r0, [r3, #0]
 8006de2:	f000 b823 	b.w	8006e2c <_malloc_r>
 8006de6:	bf00      	nop
 8006de8:	20000068 	.word	0x20000068

08006dec <sbrk_aligned>:
 8006dec:	b570      	push	{r4, r5, r6, lr}
 8006dee:	4e0e      	ldr	r6, [pc, #56]	; (8006e28 <sbrk_aligned+0x3c>)
 8006df0:	460c      	mov	r4, r1
 8006df2:	6831      	ldr	r1, [r6, #0]
 8006df4:	4605      	mov	r5, r0
 8006df6:	b911      	cbnz	r1, 8006dfe <sbrk_aligned+0x12>
 8006df8:	f002 f9ae 	bl	8009158 <_sbrk_r>
 8006dfc:	6030      	str	r0, [r6, #0]
 8006dfe:	4621      	mov	r1, r4
 8006e00:	4628      	mov	r0, r5
 8006e02:	f002 f9a9 	bl	8009158 <_sbrk_r>
 8006e06:	1c43      	adds	r3, r0, #1
 8006e08:	d00a      	beq.n	8006e20 <sbrk_aligned+0x34>
 8006e0a:	1cc4      	adds	r4, r0, #3
 8006e0c:	f024 0403 	bic.w	r4, r4, #3
 8006e10:	42a0      	cmp	r0, r4
 8006e12:	d007      	beq.n	8006e24 <sbrk_aligned+0x38>
 8006e14:	1a21      	subs	r1, r4, r0
 8006e16:	4628      	mov	r0, r5
 8006e18:	f002 f99e 	bl	8009158 <_sbrk_r>
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d101      	bne.n	8006e24 <sbrk_aligned+0x38>
 8006e20:	f04f 34ff 	mov.w	r4, #4294967295
 8006e24:	4620      	mov	r0, r4
 8006e26:	bd70      	pop	{r4, r5, r6, pc}
 8006e28:	20000ad4 	.word	0x20000ad4

08006e2c <_malloc_r>:
 8006e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e30:	1ccd      	adds	r5, r1, #3
 8006e32:	f025 0503 	bic.w	r5, r5, #3
 8006e36:	3508      	adds	r5, #8
 8006e38:	2d0c      	cmp	r5, #12
 8006e3a:	bf38      	it	cc
 8006e3c:	250c      	movcc	r5, #12
 8006e3e:	2d00      	cmp	r5, #0
 8006e40:	4607      	mov	r7, r0
 8006e42:	db01      	blt.n	8006e48 <_malloc_r+0x1c>
 8006e44:	42a9      	cmp	r1, r5
 8006e46:	d905      	bls.n	8006e54 <_malloc_r+0x28>
 8006e48:	230c      	movs	r3, #12
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	2600      	movs	r6, #0
 8006e4e:	4630      	mov	r0, r6
 8006e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f28 <_malloc_r+0xfc>
 8006e58:	f000 f868 	bl	8006f2c <__malloc_lock>
 8006e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e60:	461c      	mov	r4, r3
 8006e62:	bb5c      	cbnz	r4, 8006ebc <_malloc_r+0x90>
 8006e64:	4629      	mov	r1, r5
 8006e66:	4638      	mov	r0, r7
 8006e68:	f7ff ffc0 	bl	8006dec <sbrk_aligned>
 8006e6c:	1c43      	adds	r3, r0, #1
 8006e6e:	4604      	mov	r4, r0
 8006e70:	d155      	bne.n	8006f1e <_malloc_r+0xf2>
 8006e72:	f8d8 4000 	ldr.w	r4, [r8]
 8006e76:	4626      	mov	r6, r4
 8006e78:	2e00      	cmp	r6, #0
 8006e7a:	d145      	bne.n	8006f08 <_malloc_r+0xdc>
 8006e7c:	2c00      	cmp	r4, #0
 8006e7e:	d048      	beq.n	8006f12 <_malloc_r+0xe6>
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	4631      	mov	r1, r6
 8006e84:	4638      	mov	r0, r7
 8006e86:	eb04 0903 	add.w	r9, r4, r3
 8006e8a:	f002 f965 	bl	8009158 <_sbrk_r>
 8006e8e:	4581      	cmp	r9, r0
 8006e90:	d13f      	bne.n	8006f12 <_malloc_r+0xe6>
 8006e92:	6821      	ldr	r1, [r4, #0]
 8006e94:	1a6d      	subs	r5, r5, r1
 8006e96:	4629      	mov	r1, r5
 8006e98:	4638      	mov	r0, r7
 8006e9a:	f7ff ffa7 	bl	8006dec <sbrk_aligned>
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d037      	beq.n	8006f12 <_malloc_r+0xe6>
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	442b      	add	r3, r5
 8006ea6:	6023      	str	r3, [r4, #0]
 8006ea8:	f8d8 3000 	ldr.w	r3, [r8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d038      	beq.n	8006f22 <_malloc_r+0xf6>
 8006eb0:	685a      	ldr	r2, [r3, #4]
 8006eb2:	42a2      	cmp	r2, r4
 8006eb4:	d12b      	bne.n	8006f0e <_malloc_r+0xe2>
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	605a      	str	r2, [r3, #4]
 8006eba:	e00f      	b.n	8006edc <_malloc_r+0xb0>
 8006ebc:	6822      	ldr	r2, [r4, #0]
 8006ebe:	1b52      	subs	r2, r2, r5
 8006ec0:	d41f      	bmi.n	8006f02 <_malloc_r+0xd6>
 8006ec2:	2a0b      	cmp	r2, #11
 8006ec4:	d917      	bls.n	8006ef6 <_malloc_r+0xca>
 8006ec6:	1961      	adds	r1, r4, r5
 8006ec8:	42a3      	cmp	r3, r4
 8006eca:	6025      	str	r5, [r4, #0]
 8006ecc:	bf18      	it	ne
 8006ece:	6059      	strne	r1, [r3, #4]
 8006ed0:	6863      	ldr	r3, [r4, #4]
 8006ed2:	bf08      	it	eq
 8006ed4:	f8c8 1000 	streq.w	r1, [r8]
 8006ed8:	5162      	str	r2, [r4, r5]
 8006eda:	604b      	str	r3, [r1, #4]
 8006edc:	4638      	mov	r0, r7
 8006ede:	f104 060b 	add.w	r6, r4, #11
 8006ee2:	f000 f829 	bl	8006f38 <__malloc_unlock>
 8006ee6:	f026 0607 	bic.w	r6, r6, #7
 8006eea:	1d23      	adds	r3, r4, #4
 8006eec:	1af2      	subs	r2, r6, r3
 8006eee:	d0ae      	beq.n	8006e4e <_malloc_r+0x22>
 8006ef0:	1b9b      	subs	r3, r3, r6
 8006ef2:	50a3      	str	r3, [r4, r2]
 8006ef4:	e7ab      	b.n	8006e4e <_malloc_r+0x22>
 8006ef6:	42a3      	cmp	r3, r4
 8006ef8:	6862      	ldr	r2, [r4, #4]
 8006efa:	d1dd      	bne.n	8006eb8 <_malloc_r+0x8c>
 8006efc:	f8c8 2000 	str.w	r2, [r8]
 8006f00:	e7ec      	b.n	8006edc <_malloc_r+0xb0>
 8006f02:	4623      	mov	r3, r4
 8006f04:	6864      	ldr	r4, [r4, #4]
 8006f06:	e7ac      	b.n	8006e62 <_malloc_r+0x36>
 8006f08:	4634      	mov	r4, r6
 8006f0a:	6876      	ldr	r6, [r6, #4]
 8006f0c:	e7b4      	b.n	8006e78 <_malloc_r+0x4c>
 8006f0e:	4613      	mov	r3, r2
 8006f10:	e7cc      	b.n	8006eac <_malloc_r+0x80>
 8006f12:	230c      	movs	r3, #12
 8006f14:	603b      	str	r3, [r7, #0]
 8006f16:	4638      	mov	r0, r7
 8006f18:	f000 f80e 	bl	8006f38 <__malloc_unlock>
 8006f1c:	e797      	b.n	8006e4e <_malloc_r+0x22>
 8006f1e:	6025      	str	r5, [r4, #0]
 8006f20:	e7dc      	b.n	8006edc <_malloc_r+0xb0>
 8006f22:	605b      	str	r3, [r3, #4]
 8006f24:	deff      	udf	#255	; 0xff
 8006f26:	bf00      	nop
 8006f28:	20000ad0 	.word	0x20000ad0

08006f2c <__malloc_lock>:
 8006f2c:	4801      	ldr	r0, [pc, #4]	; (8006f34 <__malloc_lock+0x8>)
 8006f2e:	f7ff b884 	b.w	800603a <__retarget_lock_acquire_recursive>
 8006f32:	bf00      	nop
 8006f34:	20000acc 	.word	0x20000acc

08006f38 <__malloc_unlock>:
 8006f38:	4801      	ldr	r0, [pc, #4]	; (8006f40 <__malloc_unlock+0x8>)
 8006f3a:	f7ff b87f 	b.w	800603c <__retarget_lock_release_recursive>
 8006f3e:	bf00      	nop
 8006f40:	20000acc 	.word	0x20000acc

08006f44 <_Balloc>:
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	69c6      	ldr	r6, [r0, #28]
 8006f48:	4604      	mov	r4, r0
 8006f4a:	460d      	mov	r5, r1
 8006f4c:	b976      	cbnz	r6, 8006f6c <_Balloc+0x28>
 8006f4e:	2010      	movs	r0, #16
 8006f50:	f7ff ff44 	bl	8006ddc <malloc>
 8006f54:	4602      	mov	r2, r0
 8006f56:	61e0      	str	r0, [r4, #28]
 8006f58:	b920      	cbnz	r0, 8006f64 <_Balloc+0x20>
 8006f5a:	4b18      	ldr	r3, [pc, #96]	; (8006fbc <_Balloc+0x78>)
 8006f5c:	4818      	ldr	r0, [pc, #96]	; (8006fc0 <_Balloc+0x7c>)
 8006f5e:	216b      	movs	r1, #107	; 0x6b
 8006f60:	f002 f922 	bl	80091a8 <__assert_func>
 8006f64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f68:	6006      	str	r6, [r0, #0]
 8006f6a:	60c6      	str	r6, [r0, #12]
 8006f6c:	69e6      	ldr	r6, [r4, #28]
 8006f6e:	68f3      	ldr	r3, [r6, #12]
 8006f70:	b183      	cbz	r3, 8006f94 <_Balloc+0x50>
 8006f72:	69e3      	ldr	r3, [r4, #28]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f7a:	b9b8      	cbnz	r0, 8006fac <_Balloc+0x68>
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	fa01 f605 	lsl.w	r6, r1, r5
 8006f82:	1d72      	adds	r2, r6, #5
 8006f84:	0092      	lsls	r2, r2, #2
 8006f86:	4620      	mov	r0, r4
 8006f88:	f002 f92c 	bl	80091e4 <_calloc_r>
 8006f8c:	b160      	cbz	r0, 8006fa8 <_Balloc+0x64>
 8006f8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f92:	e00e      	b.n	8006fb2 <_Balloc+0x6e>
 8006f94:	2221      	movs	r2, #33	; 0x21
 8006f96:	2104      	movs	r1, #4
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f002 f923 	bl	80091e4 <_calloc_r>
 8006f9e:	69e3      	ldr	r3, [r4, #28]
 8006fa0:	60f0      	str	r0, [r6, #12]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e4      	bne.n	8006f72 <_Balloc+0x2e>
 8006fa8:	2000      	movs	r0, #0
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	6802      	ldr	r2, [r0, #0]
 8006fae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fb8:	e7f7      	b.n	8006faa <_Balloc+0x66>
 8006fba:	bf00      	nop
 8006fbc:	0800a190 	.word	0x0800a190
 8006fc0:	0800a210 	.word	0x0800a210

08006fc4 <_Bfree>:
 8006fc4:	b570      	push	{r4, r5, r6, lr}
 8006fc6:	69c6      	ldr	r6, [r0, #28]
 8006fc8:	4605      	mov	r5, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	b976      	cbnz	r6, 8006fec <_Bfree+0x28>
 8006fce:	2010      	movs	r0, #16
 8006fd0:	f7ff ff04 	bl	8006ddc <malloc>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	61e8      	str	r0, [r5, #28]
 8006fd8:	b920      	cbnz	r0, 8006fe4 <_Bfree+0x20>
 8006fda:	4b09      	ldr	r3, [pc, #36]	; (8007000 <_Bfree+0x3c>)
 8006fdc:	4809      	ldr	r0, [pc, #36]	; (8007004 <_Bfree+0x40>)
 8006fde:	218f      	movs	r1, #143	; 0x8f
 8006fe0:	f002 f8e2 	bl	80091a8 <__assert_func>
 8006fe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fe8:	6006      	str	r6, [r0, #0]
 8006fea:	60c6      	str	r6, [r0, #12]
 8006fec:	b13c      	cbz	r4, 8006ffe <_Bfree+0x3a>
 8006fee:	69eb      	ldr	r3, [r5, #28]
 8006ff0:	6862      	ldr	r2, [r4, #4]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ff8:	6021      	str	r1, [r4, #0]
 8006ffa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
 8007000:	0800a190 	.word	0x0800a190
 8007004:	0800a210 	.word	0x0800a210

08007008 <__multadd>:
 8007008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800700c:	690d      	ldr	r5, [r1, #16]
 800700e:	4607      	mov	r7, r0
 8007010:	460c      	mov	r4, r1
 8007012:	461e      	mov	r6, r3
 8007014:	f101 0c14 	add.w	ip, r1, #20
 8007018:	2000      	movs	r0, #0
 800701a:	f8dc 3000 	ldr.w	r3, [ip]
 800701e:	b299      	uxth	r1, r3
 8007020:	fb02 6101 	mla	r1, r2, r1, r6
 8007024:	0c1e      	lsrs	r6, r3, #16
 8007026:	0c0b      	lsrs	r3, r1, #16
 8007028:	fb02 3306 	mla	r3, r2, r6, r3
 800702c:	b289      	uxth	r1, r1
 800702e:	3001      	adds	r0, #1
 8007030:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007034:	4285      	cmp	r5, r0
 8007036:	f84c 1b04 	str.w	r1, [ip], #4
 800703a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800703e:	dcec      	bgt.n	800701a <__multadd+0x12>
 8007040:	b30e      	cbz	r6, 8007086 <__multadd+0x7e>
 8007042:	68a3      	ldr	r3, [r4, #8]
 8007044:	42ab      	cmp	r3, r5
 8007046:	dc19      	bgt.n	800707c <__multadd+0x74>
 8007048:	6861      	ldr	r1, [r4, #4]
 800704a:	4638      	mov	r0, r7
 800704c:	3101      	adds	r1, #1
 800704e:	f7ff ff79 	bl	8006f44 <_Balloc>
 8007052:	4680      	mov	r8, r0
 8007054:	b928      	cbnz	r0, 8007062 <__multadd+0x5a>
 8007056:	4602      	mov	r2, r0
 8007058:	4b0c      	ldr	r3, [pc, #48]	; (800708c <__multadd+0x84>)
 800705a:	480d      	ldr	r0, [pc, #52]	; (8007090 <__multadd+0x88>)
 800705c:	21ba      	movs	r1, #186	; 0xba
 800705e:	f002 f8a3 	bl	80091a8 <__assert_func>
 8007062:	6922      	ldr	r2, [r4, #16]
 8007064:	3202      	adds	r2, #2
 8007066:	f104 010c 	add.w	r1, r4, #12
 800706a:	0092      	lsls	r2, r2, #2
 800706c:	300c      	adds	r0, #12
 800706e:	f002 f883 	bl	8009178 <memcpy>
 8007072:	4621      	mov	r1, r4
 8007074:	4638      	mov	r0, r7
 8007076:	f7ff ffa5 	bl	8006fc4 <_Bfree>
 800707a:	4644      	mov	r4, r8
 800707c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007080:	3501      	adds	r5, #1
 8007082:	615e      	str	r6, [r3, #20]
 8007084:	6125      	str	r5, [r4, #16]
 8007086:	4620      	mov	r0, r4
 8007088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800708c:	0800a1ff 	.word	0x0800a1ff
 8007090:	0800a210 	.word	0x0800a210

08007094 <__s2b>:
 8007094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007098:	460c      	mov	r4, r1
 800709a:	4615      	mov	r5, r2
 800709c:	461f      	mov	r7, r3
 800709e:	2209      	movs	r2, #9
 80070a0:	3308      	adds	r3, #8
 80070a2:	4606      	mov	r6, r0
 80070a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80070a8:	2100      	movs	r1, #0
 80070aa:	2201      	movs	r2, #1
 80070ac:	429a      	cmp	r2, r3
 80070ae:	db09      	blt.n	80070c4 <__s2b+0x30>
 80070b0:	4630      	mov	r0, r6
 80070b2:	f7ff ff47 	bl	8006f44 <_Balloc>
 80070b6:	b940      	cbnz	r0, 80070ca <__s2b+0x36>
 80070b8:	4602      	mov	r2, r0
 80070ba:	4b19      	ldr	r3, [pc, #100]	; (8007120 <__s2b+0x8c>)
 80070bc:	4819      	ldr	r0, [pc, #100]	; (8007124 <__s2b+0x90>)
 80070be:	21d3      	movs	r1, #211	; 0xd3
 80070c0:	f002 f872 	bl	80091a8 <__assert_func>
 80070c4:	0052      	lsls	r2, r2, #1
 80070c6:	3101      	adds	r1, #1
 80070c8:	e7f0      	b.n	80070ac <__s2b+0x18>
 80070ca:	9b08      	ldr	r3, [sp, #32]
 80070cc:	6143      	str	r3, [r0, #20]
 80070ce:	2d09      	cmp	r5, #9
 80070d0:	f04f 0301 	mov.w	r3, #1
 80070d4:	6103      	str	r3, [r0, #16]
 80070d6:	dd16      	ble.n	8007106 <__s2b+0x72>
 80070d8:	f104 0909 	add.w	r9, r4, #9
 80070dc:	46c8      	mov	r8, r9
 80070de:	442c      	add	r4, r5
 80070e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80070e4:	4601      	mov	r1, r0
 80070e6:	3b30      	subs	r3, #48	; 0x30
 80070e8:	220a      	movs	r2, #10
 80070ea:	4630      	mov	r0, r6
 80070ec:	f7ff ff8c 	bl	8007008 <__multadd>
 80070f0:	45a0      	cmp	r8, r4
 80070f2:	d1f5      	bne.n	80070e0 <__s2b+0x4c>
 80070f4:	f1a5 0408 	sub.w	r4, r5, #8
 80070f8:	444c      	add	r4, r9
 80070fa:	1b2d      	subs	r5, r5, r4
 80070fc:	1963      	adds	r3, r4, r5
 80070fe:	42bb      	cmp	r3, r7
 8007100:	db04      	blt.n	800710c <__s2b+0x78>
 8007102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007106:	340a      	adds	r4, #10
 8007108:	2509      	movs	r5, #9
 800710a:	e7f6      	b.n	80070fa <__s2b+0x66>
 800710c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007110:	4601      	mov	r1, r0
 8007112:	3b30      	subs	r3, #48	; 0x30
 8007114:	220a      	movs	r2, #10
 8007116:	4630      	mov	r0, r6
 8007118:	f7ff ff76 	bl	8007008 <__multadd>
 800711c:	e7ee      	b.n	80070fc <__s2b+0x68>
 800711e:	bf00      	nop
 8007120:	0800a1ff 	.word	0x0800a1ff
 8007124:	0800a210 	.word	0x0800a210

08007128 <__hi0bits>:
 8007128:	0c03      	lsrs	r3, r0, #16
 800712a:	041b      	lsls	r3, r3, #16
 800712c:	b9d3      	cbnz	r3, 8007164 <__hi0bits+0x3c>
 800712e:	0400      	lsls	r0, r0, #16
 8007130:	2310      	movs	r3, #16
 8007132:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007136:	bf04      	itt	eq
 8007138:	0200      	lsleq	r0, r0, #8
 800713a:	3308      	addeq	r3, #8
 800713c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007140:	bf04      	itt	eq
 8007142:	0100      	lsleq	r0, r0, #4
 8007144:	3304      	addeq	r3, #4
 8007146:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800714a:	bf04      	itt	eq
 800714c:	0080      	lsleq	r0, r0, #2
 800714e:	3302      	addeq	r3, #2
 8007150:	2800      	cmp	r0, #0
 8007152:	db05      	blt.n	8007160 <__hi0bits+0x38>
 8007154:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007158:	f103 0301 	add.w	r3, r3, #1
 800715c:	bf08      	it	eq
 800715e:	2320      	moveq	r3, #32
 8007160:	4618      	mov	r0, r3
 8007162:	4770      	bx	lr
 8007164:	2300      	movs	r3, #0
 8007166:	e7e4      	b.n	8007132 <__hi0bits+0xa>

08007168 <__lo0bits>:
 8007168:	6803      	ldr	r3, [r0, #0]
 800716a:	f013 0207 	ands.w	r2, r3, #7
 800716e:	d00c      	beq.n	800718a <__lo0bits+0x22>
 8007170:	07d9      	lsls	r1, r3, #31
 8007172:	d422      	bmi.n	80071ba <__lo0bits+0x52>
 8007174:	079a      	lsls	r2, r3, #30
 8007176:	bf49      	itett	mi
 8007178:	085b      	lsrmi	r3, r3, #1
 800717a:	089b      	lsrpl	r3, r3, #2
 800717c:	6003      	strmi	r3, [r0, #0]
 800717e:	2201      	movmi	r2, #1
 8007180:	bf5c      	itt	pl
 8007182:	6003      	strpl	r3, [r0, #0]
 8007184:	2202      	movpl	r2, #2
 8007186:	4610      	mov	r0, r2
 8007188:	4770      	bx	lr
 800718a:	b299      	uxth	r1, r3
 800718c:	b909      	cbnz	r1, 8007192 <__lo0bits+0x2a>
 800718e:	0c1b      	lsrs	r3, r3, #16
 8007190:	2210      	movs	r2, #16
 8007192:	b2d9      	uxtb	r1, r3
 8007194:	b909      	cbnz	r1, 800719a <__lo0bits+0x32>
 8007196:	3208      	adds	r2, #8
 8007198:	0a1b      	lsrs	r3, r3, #8
 800719a:	0719      	lsls	r1, r3, #28
 800719c:	bf04      	itt	eq
 800719e:	091b      	lsreq	r3, r3, #4
 80071a0:	3204      	addeq	r2, #4
 80071a2:	0799      	lsls	r1, r3, #30
 80071a4:	bf04      	itt	eq
 80071a6:	089b      	lsreq	r3, r3, #2
 80071a8:	3202      	addeq	r2, #2
 80071aa:	07d9      	lsls	r1, r3, #31
 80071ac:	d403      	bmi.n	80071b6 <__lo0bits+0x4e>
 80071ae:	085b      	lsrs	r3, r3, #1
 80071b0:	f102 0201 	add.w	r2, r2, #1
 80071b4:	d003      	beq.n	80071be <__lo0bits+0x56>
 80071b6:	6003      	str	r3, [r0, #0]
 80071b8:	e7e5      	b.n	8007186 <__lo0bits+0x1e>
 80071ba:	2200      	movs	r2, #0
 80071bc:	e7e3      	b.n	8007186 <__lo0bits+0x1e>
 80071be:	2220      	movs	r2, #32
 80071c0:	e7e1      	b.n	8007186 <__lo0bits+0x1e>
	...

080071c4 <__i2b>:
 80071c4:	b510      	push	{r4, lr}
 80071c6:	460c      	mov	r4, r1
 80071c8:	2101      	movs	r1, #1
 80071ca:	f7ff febb 	bl	8006f44 <_Balloc>
 80071ce:	4602      	mov	r2, r0
 80071d0:	b928      	cbnz	r0, 80071de <__i2b+0x1a>
 80071d2:	4b05      	ldr	r3, [pc, #20]	; (80071e8 <__i2b+0x24>)
 80071d4:	4805      	ldr	r0, [pc, #20]	; (80071ec <__i2b+0x28>)
 80071d6:	f240 1145 	movw	r1, #325	; 0x145
 80071da:	f001 ffe5 	bl	80091a8 <__assert_func>
 80071de:	2301      	movs	r3, #1
 80071e0:	6144      	str	r4, [r0, #20]
 80071e2:	6103      	str	r3, [r0, #16]
 80071e4:	bd10      	pop	{r4, pc}
 80071e6:	bf00      	nop
 80071e8:	0800a1ff 	.word	0x0800a1ff
 80071ec:	0800a210 	.word	0x0800a210

080071f0 <__multiply>:
 80071f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f4:	4691      	mov	r9, r2
 80071f6:	690a      	ldr	r2, [r1, #16]
 80071f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	bfb8      	it	lt
 8007200:	460b      	movlt	r3, r1
 8007202:	460c      	mov	r4, r1
 8007204:	bfbc      	itt	lt
 8007206:	464c      	movlt	r4, r9
 8007208:	4699      	movlt	r9, r3
 800720a:	6927      	ldr	r7, [r4, #16]
 800720c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007210:	68a3      	ldr	r3, [r4, #8]
 8007212:	6861      	ldr	r1, [r4, #4]
 8007214:	eb07 060a 	add.w	r6, r7, sl
 8007218:	42b3      	cmp	r3, r6
 800721a:	b085      	sub	sp, #20
 800721c:	bfb8      	it	lt
 800721e:	3101      	addlt	r1, #1
 8007220:	f7ff fe90 	bl	8006f44 <_Balloc>
 8007224:	b930      	cbnz	r0, 8007234 <__multiply+0x44>
 8007226:	4602      	mov	r2, r0
 8007228:	4b44      	ldr	r3, [pc, #272]	; (800733c <__multiply+0x14c>)
 800722a:	4845      	ldr	r0, [pc, #276]	; (8007340 <__multiply+0x150>)
 800722c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007230:	f001 ffba 	bl	80091a8 <__assert_func>
 8007234:	f100 0514 	add.w	r5, r0, #20
 8007238:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800723c:	462b      	mov	r3, r5
 800723e:	2200      	movs	r2, #0
 8007240:	4543      	cmp	r3, r8
 8007242:	d321      	bcc.n	8007288 <__multiply+0x98>
 8007244:	f104 0314 	add.w	r3, r4, #20
 8007248:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800724c:	f109 0314 	add.w	r3, r9, #20
 8007250:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007254:	9202      	str	r2, [sp, #8]
 8007256:	1b3a      	subs	r2, r7, r4
 8007258:	3a15      	subs	r2, #21
 800725a:	f022 0203 	bic.w	r2, r2, #3
 800725e:	3204      	adds	r2, #4
 8007260:	f104 0115 	add.w	r1, r4, #21
 8007264:	428f      	cmp	r7, r1
 8007266:	bf38      	it	cc
 8007268:	2204      	movcc	r2, #4
 800726a:	9201      	str	r2, [sp, #4]
 800726c:	9a02      	ldr	r2, [sp, #8]
 800726e:	9303      	str	r3, [sp, #12]
 8007270:	429a      	cmp	r2, r3
 8007272:	d80c      	bhi.n	800728e <__multiply+0x9e>
 8007274:	2e00      	cmp	r6, #0
 8007276:	dd03      	ble.n	8007280 <__multiply+0x90>
 8007278:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800727c:	2b00      	cmp	r3, #0
 800727e:	d05b      	beq.n	8007338 <__multiply+0x148>
 8007280:	6106      	str	r6, [r0, #16]
 8007282:	b005      	add	sp, #20
 8007284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007288:	f843 2b04 	str.w	r2, [r3], #4
 800728c:	e7d8      	b.n	8007240 <__multiply+0x50>
 800728e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007292:	f1ba 0f00 	cmp.w	sl, #0
 8007296:	d024      	beq.n	80072e2 <__multiply+0xf2>
 8007298:	f104 0e14 	add.w	lr, r4, #20
 800729c:	46a9      	mov	r9, r5
 800729e:	f04f 0c00 	mov.w	ip, #0
 80072a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80072a6:	f8d9 1000 	ldr.w	r1, [r9]
 80072aa:	fa1f fb82 	uxth.w	fp, r2
 80072ae:	b289      	uxth	r1, r1
 80072b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80072b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80072b8:	f8d9 2000 	ldr.w	r2, [r9]
 80072bc:	4461      	add	r1, ip
 80072be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80072c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80072ca:	b289      	uxth	r1, r1
 80072cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072d0:	4577      	cmp	r7, lr
 80072d2:	f849 1b04 	str.w	r1, [r9], #4
 80072d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072da:	d8e2      	bhi.n	80072a2 <__multiply+0xb2>
 80072dc:	9a01      	ldr	r2, [sp, #4]
 80072de:	f845 c002 	str.w	ip, [r5, r2]
 80072e2:	9a03      	ldr	r2, [sp, #12]
 80072e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80072e8:	3304      	adds	r3, #4
 80072ea:	f1b9 0f00 	cmp.w	r9, #0
 80072ee:	d021      	beq.n	8007334 <__multiply+0x144>
 80072f0:	6829      	ldr	r1, [r5, #0]
 80072f2:	f104 0c14 	add.w	ip, r4, #20
 80072f6:	46ae      	mov	lr, r5
 80072f8:	f04f 0a00 	mov.w	sl, #0
 80072fc:	f8bc b000 	ldrh.w	fp, [ip]
 8007300:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007304:	fb09 220b 	mla	r2, r9, fp, r2
 8007308:	4452      	add	r2, sl
 800730a:	b289      	uxth	r1, r1
 800730c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007310:	f84e 1b04 	str.w	r1, [lr], #4
 8007314:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007318:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800731c:	f8be 1000 	ldrh.w	r1, [lr]
 8007320:	fb09 110a 	mla	r1, r9, sl, r1
 8007324:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007328:	4567      	cmp	r7, ip
 800732a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800732e:	d8e5      	bhi.n	80072fc <__multiply+0x10c>
 8007330:	9a01      	ldr	r2, [sp, #4]
 8007332:	50a9      	str	r1, [r5, r2]
 8007334:	3504      	adds	r5, #4
 8007336:	e799      	b.n	800726c <__multiply+0x7c>
 8007338:	3e01      	subs	r6, #1
 800733a:	e79b      	b.n	8007274 <__multiply+0x84>
 800733c:	0800a1ff 	.word	0x0800a1ff
 8007340:	0800a210 	.word	0x0800a210

08007344 <__pow5mult>:
 8007344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007348:	4615      	mov	r5, r2
 800734a:	f012 0203 	ands.w	r2, r2, #3
 800734e:	4606      	mov	r6, r0
 8007350:	460f      	mov	r7, r1
 8007352:	d007      	beq.n	8007364 <__pow5mult+0x20>
 8007354:	4c25      	ldr	r4, [pc, #148]	; (80073ec <__pow5mult+0xa8>)
 8007356:	3a01      	subs	r2, #1
 8007358:	2300      	movs	r3, #0
 800735a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800735e:	f7ff fe53 	bl	8007008 <__multadd>
 8007362:	4607      	mov	r7, r0
 8007364:	10ad      	asrs	r5, r5, #2
 8007366:	d03d      	beq.n	80073e4 <__pow5mult+0xa0>
 8007368:	69f4      	ldr	r4, [r6, #28]
 800736a:	b97c      	cbnz	r4, 800738c <__pow5mult+0x48>
 800736c:	2010      	movs	r0, #16
 800736e:	f7ff fd35 	bl	8006ddc <malloc>
 8007372:	4602      	mov	r2, r0
 8007374:	61f0      	str	r0, [r6, #28]
 8007376:	b928      	cbnz	r0, 8007384 <__pow5mult+0x40>
 8007378:	4b1d      	ldr	r3, [pc, #116]	; (80073f0 <__pow5mult+0xac>)
 800737a:	481e      	ldr	r0, [pc, #120]	; (80073f4 <__pow5mult+0xb0>)
 800737c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007380:	f001 ff12 	bl	80091a8 <__assert_func>
 8007384:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007388:	6004      	str	r4, [r0, #0]
 800738a:	60c4      	str	r4, [r0, #12]
 800738c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007390:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007394:	b94c      	cbnz	r4, 80073aa <__pow5mult+0x66>
 8007396:	f240 2171 	movw	r1, #625	; 0x271
 800739a:	4630      	mov	r0, r6
 800739c:	f7ff ff12 	bl	80071c4 <__i2b>
 80073a0:	2300      	movs	r3, #0
 80073a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80073a6:	4604      	mov	r4, r0
 80073a8:	6003      	str	r3, [r0, #0]
 80073aa:	f04f 0900 	mov.w	r9, #0
 80073ae:	07eb      	lsls	r3, r5, #31
 80073b0:	d50a      	bpl.n	80073c8 <__pow5mult+0x84>
 80073b2:	4639      	mov	r1, r7
 80073b4:	4622      	mov	r2, r4
 80073b6:	4630      	mov	r0, r6
 80073b8:	f7ff ff1a 	bl	80071f0 <__multiply>
 80073bc:	4639      	mov	r1, r7
 80073be:	4680      	mov	r8, r0
 80073c0:	4630      	mov	r0, r6
 80073c2:	f7ff fdff 	bl	8006fc4 <_Bfree>
 80073c6:	4647      	mov	r7, r8
 80073c8:	106d      	asrs	r5, r5, #1
 80073ca:	d00b      	beq.n	80073e4 <__pow5mult+0xa0>
 80073cc:	6820      	ldr	r0, [r4, #0]
 80073ce:	b938      	cbnz	r0, 80073e0 <__pow5mult+0x9c>
 80073d0:	4622      	mov	r2, r4
 80073d2:	4621      	mov	r1, r4
 80073d4:	4630      	mov	r0, r6
 80073d6:	f7ff ff0b 	bl	80071f0 <__multiply>
 80073da:	6020      	str	r0, [r4, #0]
 80073dc:	f8c0 9000 	str.w	r9, [r0]
 80073e0:	4604      	mov	r4, r0
 80073e2:	e7e4      	b.n	80073ae <__pow5mult+0x6a>
 80073e4:	4638      	mov	r0, r7
 80073e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ea:	bf00      	nop
 80073ec:	0800a360 	.word	0x0800a360
 80073f0:	0800a190 	.word	0x0800a190
 80073f4:	0800a210 	.word	0x0800a210

080073f8 <__lshift>:
 80073f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073fc:	460c      	mov	r4, r1
 80073fe:	6849      	ldr	r1, [r1, #4]
 8007400:	6923      	ldr	r3, [r4, #16]
 8007402:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007406:	68a3      	ldr	r3, [r4, #8]
 8007408:	4607      	mov	r7, r0
 800740a:	4691      	mov	r9, r2
 800740c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007410:	f108 0601 	add.w	r6, r8, #1
 8007414:	42b3      	cmp	r3, r6
 8007416:	db0b      	blt.n	8007430 <__lshift+0x38>
 8007418:	4638      	mov	r0, r7
 800741a:	f7ff fd93 	bl	8006f44 <_Balloc>
 800741e:	4605      	mov	r5, r0
 8007420:	b948      	cbnz	r0, 8007436 <__lshift+0x3e>
 8007422:	4602      	mov	r2, r0
 8007424:	4b28      	ldr	r3, [pc, #160]	; (80074c8 <__lshift+0xd0>)
 8007426:	4829      	ldr	r0, [pc, #164]	; (80074cc <__lshift+0xd4>)
 8007428:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800742c:	f001 febc 	bl	80091a8 <__assert_func>
 8007430:	3101      	adds	r1, #1
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	e7ee      	b.n	8007414 <__lshift+0x1c>
 8007436:	2300      	movs	r3, #0
 8007438:	f100 0114 	add.w	r1, r0, #20
 800743c:	f100 0210 	add.w	r2, r0, #16
 8007440:	4618      	mov	r0, r3
 8007442:	4553      	cmp	r3, sl
 8007444:	db33      	blt.n	80074ae <__lshift+0xb6>
 8007446:	6920      	ldr	r0, [r4, #16]
 8007448:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800744c:	f104 0314 	add.w	r3, r4, #20
 8007450:	f019 091f 	ands.w	r9, r9, #31
 8007454:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007458:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800745c:	d02b      	beq.n	80074b6 <__lshift+0xbe>
 800745e:	f1c9 0e20 	rsb	lr, r9, #32
 8007462:	468a      	mov	sl, r1
 8007464:	2200      	movs	r2, #0
 8007466:	6818      	ldr	r0, [r3, #0]
 8007468:	fa00 f009 	lsl.w	r0, r0, r9
 800746c:	4310      	orrs	r0, r2
 800746e:	f84a 0b04 	str.w	r0, [sl], #4
 8007472:	f853 2b04 	ldr.w	r2, [r3], #4
 8007476:	459c      	cmp	ip, r3
 8007478:	fa22 f20e 	lsr.w	r2, r2, lr
 800747c:	d8f3      	bhi.n	8007466 <__lshift+0x6e>
 800747e:	ebac 0304 	sub.w	r3, ip, r4
 8007482:	3b15      	subs	r3, #21
 8007484:	f023 0303 	bic.w	r3, r3, #3
 8007488:	3304      	adds	r3, #4
 800748a:	f104 0015 	add.w	r0, r4, #21
 800748e:	4584      	cmp	ip, r0
 8007490:	bf38      	it	cc
 8007492:	2304      	movcc	r3, #4
 8007494:	50ca      	str	r2, [r1, r3]
 8007496:	b10a      	cbz	r2, 800749c <__lshift+0xa4>
 8007498:	f108 0602 	add.w	r6, r8, #2
 800749c:	3e01      	subs	r6, #1
 800749e:	4638      	mov	r0, r7
 80074a0:	612e      	str	r6, [r5, #16]
 80074a2:	4621      	mov	r1, r4
 80074a4:	f7ff fd8e 	bl	8006fc4 <_Bfree>
 80074a8:	4628      	mov	r0, r5
 80074aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80074b2:	3301      	adds	r3, #1
 80074b4:	e7c5      	b.n	8007442 <__lshift+0x4a>
 80074b6:	3904      	subs	r1, #4
 80074b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80074bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80074c0:	459c      	cmp	ip, r3
 80074c2:	d8f9      	bhi.n	80074b8 <__lshift+0xc0>
 80074c4:	e7ea      	b.n	800749c <__lshift+0xa4>
 80074c6:	bf00      	nop
 80074c8:	0800a1ff 	.word	0x0800a1ff
 80074cc:	0800a210 	.word	0x0800a210

080074d0 <__mcmp>:
 80074d0:	b530      	push	{r4, r5, lr}
 80074d2:	6902      	ldr	r2, [r0, #16]
 80074d4:	690c      	ldr	r4, [r1, #16]
 80074d6:	1b12      	subs	r2, r2, r4
 80074d8:	d10e      	bne.n	80074f8 <__mcmp+0x28>
 80074da:	f100 0314 	add.w	r3, r0, #20
 80074de:	3114      	adds	r1, #20
 80074e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80074e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80074e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80074ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80074f0:	42a5      	cmp	r5, r4
 80074f2:	d003      	beq.n	80074fc <__mcmp+0x2c>
 80074f4:	d305      	bcc.n	8007502 <__mcmp+0x32>
 80074f6:	2201      	movs	r2, #1
 80074f8:	4610      	mov	r0, r2
 80074fa:	bd30      	pop	{r4, r5, pc}
 80074fc:	4283      	cmp	r3, r0
 80074fe:	d3f3      	bcc.n	80074e8 <__mcmp+0x18>
 8007500:	e7fa      	b.n	80074f8 <__mcmp+0x28>
 8007502:	f04f 32ff 	mov.w	r2, #4294967295
 8007506:	e7f7      	b.n	80074f8 <__mcmp+0x28>

08007508 <__mdiff>:
 8007508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750c:	460c      	mov	r4, r1
 800750e:	4606      	mov	r6, r0
 8007510:	4611      	mov	r1, r2
 8007512:	4620      	mov	r0, r4
 8007514:	4690      	mov	r8, r2
 8007516:	f7ff ffdb 	bl	80074d0 <__mcmp>
 800751a:	1e05      	subs	r5, r0, #0
 800751c:	d110      	bne.n	8007540 <__mdiff+0x38>
 800751e:	4629      	mov	r1, r5
 8007520:	4630      	mov	r0, r6
 8007522:	f7ff fd0f 	bl	8006f44 <_Balloc>
 8007526:	b930      	cbnz	r0, 8007536 <__mdiff+0x2e>
 8007528:	4b3a      	ldr	r3, [pc, #232]	; (8007614 <__mdiff+0x10c>)
 800752a:	4602      	mov	r2, r0
 800752c:	f240 2137 	movw	r1, #567	; 0x237
 8007530:	4839      	ldr	r0, [pc, #228]	; (8007618 <__mdiff+0x110>)
 8007532:	f001 fe39 	bl	80091a8 <__assert_func>
 8007536:	2301      	movs	r3, #1
 8007538:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800753c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007540:	bfa4      	itt	ge
 8007542:	4643      	movge	r3, r8
 8007544:	46a0      	movge	r8, r4
 8007546:	4630      	mov	r0, r6
 8007548:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800754c:	bfa6      	itte	ge
 800754e:	461c      	movge	r4, r3
 8007550:	2500      	movge	r5, #0
 8007552:	2501      	movlt	r5, #1
 8007554:	f7ff fcf6 	bl	8006f44 <_Balloc>
 8007558:	b920      	cbnz	r0, 8007564 <__mdiff+0x5c>
 800755a:	4b2e      	ldr	r3, [pc, #184]	; (8007614 <__mdiff+0x10c>)
 800755c:	4602      	mov	r2, r0
 800755e:	f240 2145 	movw	r1, #581	; 0x245
 8007562:	e7e5      	b.n	8007530 <__mdiff+0x28>
 8007564:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007568:	6926      	ldr	r6, [r4, #16]
 800756a:	60c5      	str	r5, [r0, #12]
 800756c:	f104 0914 	add.w	r9, r4, #20
 8007570:	f108 0514 	add.w	r5, r8, #20
 8007574:	f100 0e14 	add.w	lr, r0, #20
 8007578:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800757c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007580:	f108 0210 	add.w	r2, r8, #16
 8007584:	46f2      	mov	sl, lr
 8007586:	2100      	movs	r1, #0
 8007588:	f859 3b04 	ldr.w	r3, [r9], #4
 800758c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007590:	fa11 f88b 	uxtah	r8, r1, fp
 8007594:	b299      	uxth	r1, r3
 8007596:	0c1b      	lsrs	r3, r3, #16
 8007598:	eba8 0801 	sub.w	r8, r8, r1
 800759c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80075a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80075a4:	fa1f f888 	uxth.w	r8, r8
 80075a8:	1419      	asrs	r1, r3, #16
 80075aa:	454e      	cmp	r6, r9
 80075ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80075b0:	f84a 3b04 	str.w	r3, [sl], #4
 80075b4:	d8e8      	bhi.n	8007588 <__mdiff+0x80>
 80075b6:	1b33      	subs	r3, r6, r4
 80075b8:	3b15      	subs	r3, #21
 80075ba:	f023 0303 	bic.w	r3, r3, #3
 80075be:	3304      	adds	r3, #4
 80075c0:	3415      	adds	r4, #21
 80075c2:	42a6      	cmp	r6, r4
 80075c4:	bf38      	it	cc
 80075c6:	2304      	movcc	r3, #4
 80075c8:	441d      	add	r5, r3
 80075ca:	4473      	add	r3, lr
 80075cc:	469e      	mov	lr, r3
 80075ce:	462e      	mov	r6, r5
 80075d0:	4566      	cmp	r6, ip
 80075d2:	d30e      	bcc.n	80075f2 <__mdiff+0xea>
 80075d4:	f10c 0203 	add.w	r2, ip, #3
 80075d8:	1b52      	subs	r2, r2, r5
 80075da:	f022 0203 	bic.w	r2, r2, #3
 80075de:	3d03      	subs	r5, #3
 80075e0:	45ac      	cmp	ip, r5
 80075e2:	bf38      	it	cc
 80075e4:	2200      	movcc	r2, #0
 80075e6:	4413      	add	r3, r2
 80075e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80075ec:	b17a      	cbz	r2, 800760e <__mdiff+0x106>
 80075ee:	6107      	str	r7, [r0, #16]
 80075f0:	e7a4      	b.n	800753c <__mdiff+0x34>
 80075f2:	f856 8b04 	ldr.w	r8, [r6], #4
 80075f6:	fa11 f288 	uxtah	r2, r1, r8
 80075fa:	1414      	asrs	r4, r2, #16
 80075fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007600:	b292      	uxth	r2, r2
 8007602:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007606:	f84e 2b04 	str.w	r2, [lr], #4
 800760a:	1421      	asrs	r1, r4, #16
 800760c:	e7e0      	b.n	80075d0 <__mdiff+0xc8>
 800760e:	3f01      	subs	r7, #1
 8007610:	e7ea      	b.n	80075e8 <__mdiff+0xe0>
 8007612:	bf00      	nop
 8007614:	0800a1ff 	.word	0x0800a1ff
 8007618:	0800a210 	.word	0x0800a210

0800761c <__ulp>:
 800761c:	b082      	sub	sp, #8
 800761e:	ed8d 0b00 	vstr	d0, [sp]
 8007622:	9a01      	ldr	r2, [sp, #4]
 8007624:	4b0f      	ldr	r3, [pc, #60]	; (8007664 <__ulp+0x48>)
 8007626:	4013      	ands	r3, r2
 8007628:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800762c:	2b00      	cmp	r3, #0
 800762e:	dc08      	bgt.n	8007642 <__ulp+0x26>
 8007630:	425b      	negs	r3, r3
 8007632:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007636:	ea4f 5223 	mov.w	r2, r3, asr #20
 800763a:	da04      	bge.n	8007646 <__ulp+0x2a>
 800763c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007640:	4113      	asrs	r3, r2
 8007642:	2200      	movs	r2, #0
 8007644:	e008      	b.n	8007658 <__ulp+0x3c>
 8007646:	f1a2 0314 	sub.w	r3, r2, #20
 800764a:	2b1e      	cmp	r3, #30
 800764c:	bfda      	itte	le
 800764e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007652:	40da      	lsrle	r2, r3
 8007654:	2201      	movgt	r2, #1
 8007656:	2300      	movs	r3, #0
 8007658:	4619      	mov	r1, r3
 800765a:	4610      	mov	r0, r2
 800765c:	ec41 0b10 	vmov	d0, r0, r1
 8007660:	b002      	add	sp, #8
 8007662:	4770      	bx	lr
 8007664:	7ff00000 	.word	0x7ff00000

08007668 <__b2d>:
 8007668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800766c:	6906      	ldr	r6, [r0, #16]
 800766e:	f100 0814 	add.w	r8, r0, #20
 8007672:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007676:	1f37      	subs	r7, r6, #4
 8007678:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800767c:	4610      	mov	r0, r2
 800767e:	f7ff fd53 	bl	8007128 <__hi0bits>
 8007682:	f1c0 0320 	rsb	r3, r0, #32
 8007686:	280a      	cmp	r0, #10
 8007688:	600b      	str	r3, [r1, #0]
 800768a:	491b      	ldr	r1, [pc, #108]	; (80076f8 <__b2d+0x90>)
 800768c:	dc15      	bgt.n	80076ba <__b2d+0x52>
 800768e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007692:	fa22 f30c 	lsr.w	r3, r2, ip
 8007696:	45b8      	cmp	r8, r7
 8007698:	ea43 0501 	orr.w	r5, r3, r1
 800769c:	bf34      	ite	cc
 800769e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80076a2:	2300      	movcs	r3, #0
 80076a4:	3015      	adds	r0, #21
 80076a6:	fa02 f000 	lsl.w	r0, r2, r0
 80076aa:	fa23 f30c 	lsr.w	r3, r3, ip
 80076ae:	4303      	orrs	r3, r0
 80076b0:	461c      	mov	r4, r3
 80076b2:	ec45 4b10 	vmov	d0, r4, r5
 80076b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ba:	45b8      	cmp	r8, r7
 80076bc:	bf3a      	itte	cc
 80076be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80076c2:	f1a6 0708 	subcc.w	r7, r6, #8
 80076c6:	2300      	movcs	r3, #0
 80076c8:	380b      	subs	r0, #11
 80076ca:	d012      	beq.n	80076f2 <__b2d+0x8a>
 80076cc:	f1c0 0120 	rsb	r1, r0, #32
 80076d0:	fa23 f401 	lsr.w	r4, r3, r1
 80076d4:	4082      	lsls	r2, r0
 80076d6:	4322      	orrs	r2, r4
 80076d8:	4547      	cmp	r7, r8
 80076da:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80076de:	bf8c      	ite	hi
 80076e0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80076e4:	2200      	movls	r2, #0
 80076e6:	4083      	lsls	r3, r0
 80076e8:	40ca      	lsrs	r2, r1
 80076ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80076ee:	4313      	orrs	r3, r2
 80076f0:	e7de      	b.n	80076b0 <__b2d+0x48>
 80076f2:	ea42 0501 	orr.w	r5, r2, r1
 80076f6:	e7db      	b.n	80076b0 <__b2d+0x48>
 80076f8:	3ff00000 	.word	0x3ff00000

080076fc <__d2b>:
 80076fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007700:	460f      	mov	r7, r1
 8007702:	2101      	movs	r1, #1
 8007704:	ec59 8b10 	vmov	r8, r9, d0
 8007708:	4616      	mov	r6, r2
 800770a:	f7ff fc1b 	bl	8006f44 <_Balloc>
 800770e:	4604      	mov	r4, r0
 8007710:	b930      	cbnz	r0, 8007720 <__d2b+0x24>
 8007712:	4602      	mov	r2, r0
 8007714:	4b24      	ldr	r3, [pc, #144]	; (80077a8 <__d2b+0xac>)
 8007716:	4825      	ldr	r0, [pc, #148]	; (80077ac <__d2b+0xb0>)
 8007718:	f240 310f 	movw	r1, #783	; 0x30f
 800771c:	f001 fd44 	bl	80091a8 <__assert_func>
 8007720:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007724:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007728:	bb2d      	cbnz	r5, 8007776 <__d2b+0x7a>
 800772a:	9301      	str	r3, [sp, #4]
 800772c:	f1b8 0300 	subs.w	r3, r8, #0
 8007730:	d026      	beq.n	8007780 <__d2b+0x84>
 8007732:	4668      	mov	r0, sp
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	f7ff fd17 	bl	8007168 <__lo0bits>
 800773a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800773e:	b1e8      	cbz	r0, 800777c <__d2b+0x80>
 8007740:	f1c0 0320 	rsb	r3, r0, #32
 8007744:	fa02 f303 	lsl.w	r3, r2, r3
 8007748:	430b      	orrs	r3, r1
 800774a:	40c2      	lsrs	r2, r0
 800774c:	6163      	str	r3, [r4, #20]
 800774e:	9201      	str	r2, [sp, #4]
 8007750:	9b01      	ldr	r3, [sp, #4]
 8007752:	61a3      	str	r3, [r4, #24]
 8007754:	2b00      	cmp	r3, #0
 8007756:	bf14      	ite	ne
 8007758:	2202      	movne	r2, #2
 800775a:	2201      	moveq	r2, #1
 800775c:	6122      	str	r2, [r4, #16]
 800775e:	b1bd      	cbz	r5, 8007790 <__d2b+0x94>
 8007760:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007764:	4405      	add	r5, r0
 8007766:	603d      	str	r5, [r7, #0]
 8007768:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800776c:	6030      	str	r0, [r6, #0]
 800776e:	4620      	mov	r0, r4
 8007770:	b003      	add	sp, #12
 8007772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800777a:	e7d6      	b.n	800772a <__d2b+0x2e>
 800777c:	6161      	str	r1, [r4, #20]
 800777e:	e7e7      	b.n	8007750 <__d2b+0x54>
 8007780:	a801      	add	r0, sp, #4
 8007782:	f7ff fcf1 	bl	8007168 <__lo0bits>
 8007786:	9b01      	ldr	r3, [sp, #4]
 8007788:	6163      	str	r3, [r4, #20]
 800778a:	3020      	adds	r0, #32
 800778c:	2201      	movs	r2, #1
 800778e:	e7e5      	b.n	800775c <__d2b+0x60>
 8007790:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007794:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007798:	6038      	str	r0, [r7, #0]
 800779a:	6918      	ldr	r0, [r3, #16]
 800779c:	f7ff fcc4 	bl	8007128 <__hi0bits>
 80077a0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077a4:	e7e2      	b.n	800776c <__d2b+0x70>
 80077a6:	bf00      	nop
 80077a8:	0800a1ff 	.word	0x0800a1ff
 80077ac:	0800a210 	.word	0x0800a210

080077b0 <__ratio>:
 80077b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b4:	4688      	mov	r8, r1
 80077b6:	4669      	mov	r1, sp
 80077b8:	4681      	mov	r9, r0
 80077ba:	f7ff ff55 	bl	8007668 <__b2d>
 80077be:	a901      	add	r1, sp, #4
 80077c0:	4640      	mov	r0, r8
 80077c2:	ec55 4b10 	vmov	r4, r5, d0
 80077c6:	f7ff ff4f 	bl	8007668 <__b2d>
 80077ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80077d2:	eba3 0c02 	sub.w	ip, r3, r2
 80077d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80077da:	1a9b      	subs	r3, r3, r2
 80077dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80077e0:	ec51 0b10 	vmov	r0, r1, d0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	bfd6      	itet	le
 80077e8:	460a      	movle	r2, r1
 80077ea:	462a      	movgt	r2, r5
 80077ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80077f0:	468b      	mov	fp, r1
 80077f2:	462f      	mov	r7, r5
 80077f4:	bfd4      	ite	le
 80077f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80077fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80077fe:	4620      	mov	r0, r4
 8007800:	ee10 2a10 	vmov	r2, s0
 8007804:	465b      	mov	r3, fp
 8007806:	4639      	mov	r1, r7
 8007808:	f7f9 f830 	bl	800086c <__aeabi_ddiv>
 800780c:	ec41 0b10 	vmov	d0, r0, r1
 8007810:	b003      	add	sp, #12
 8007812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007816 <__copybits>:
 8007816:	3901      	subs	r1, #1
 8007818:	b570      	push	{r4, r5, r6, lr}
 800781a:	1149      	asrs	r1, r1, #5
 800781c:	6914      	ldr	r4, [r2, #16]
 800781e:	3101      	adds	r1, #1
 8007820:	f102 0314 	add.w	r3, r2, #20
 8007824:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007828:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800782c:	1f05      	subs	r5, r0, #4
 800782e:	42a3      	cmp	r3, r4
 8007830:	d30c      	bcc.n	800784c <__copybits+0x36>
 8007832:	1aa3      	subs	r3, r4, r2
 8007834:	3b11      	subs	r3, #17
 8007836:	f023 0303 	bic.w	r3, r3, #3
 800783a:	3211      	adds	r2, #17
 800783c:	42a2      	cmp	r2, r4
 800783e:	bf88      	it	hi
 8007840:	2300      	movhi	r3, #0
 8007842:	4418      	add	r0, r3
 8007844:	2300      	movs	r3, #0
 8007846:	4288      	cmp	r0, r1
 8007848:	d305      	bcc.n	8007856 <__copybits+0x40>
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007850:	f845 6f04 	str.w	r6, [r5, #4]!
 8007854:	e7eb      	b.n	800782e <__copybits+0x18>
 8007856:	f840 3b04 	str.w	r3, [r0], #4
 800785a:	e7f4      	b.n	8007846 <__copybits+0x30>

0800785c <__any_on>:
 800785c:	f100 0214 	add.w	r2, r0, #20
 8007860:	6900      	ldr	r0, [r0, #16]
 8007862:	114b      	asrs	r3, r1, #5
 8007864:	4298      	cmp	r0, r3
 8007866:	b510      	push	{r4, lr}
 8007868:	db11      	blt.n	800788e <__any_on+0x32>
 800786a:	dd0a      	ble.n	8007882 <__any_on+0x26>
 800786c:	f011 011f 	ands.w	r1, r1, #31
 8007870:	d007      	beq.n	8007882 <__any_on+0x26>
 8007872:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007876:	fa24 f001 	lsr.w	r0, r4, r1
 800787a:	fa00 f101 	lsl.w	r1, r0, r1
 800787e:	428c      	cmp	r4, r1
 8007880:	d10b      	bne.n	800789a <__any_on+0x3e>
 8007882:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007886:	4293      	cmp	r3, r2
 8007888:	d803      	bhi.n	8007892 <__any_on+0x36>
 800788a:	2000      	movs	r0, #0
 800788c:	bd10      	pop	{r4, pc}
 800788e:	4603      	mov	r3, r0
 8007890:	e7f7      	b.n	8007882 <__any_on+0x26>
 8007892:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007896:	2900      	cmp	r1, #0
 8007898:	d0f5      	beq.n	8007886 <__any_on+0x2a>
 800789a:	2001      	movs	r0, #1
 800789c:	e7f6      	b.n	800788c <__any_on+0x30>

0800789e <sulp>:
 800789e:	b570      	push	{r4, r5, r6, lr}
 80078a0:	4604      	mov	r4, r0
 80078a2:	460d      	mov	r5, r1
 80078a4:	ec45 4b10 	vmov	d0, r4, r5
 80078a8:	4616      	mov	r6, r2
 80078aa:	f7ff feb7 	bl	800761c <__ulp>
 80078ae:	ec51 0b10 	vmov	r0, r1, d0
 80078b2:	b17e      	cbz	r6, 80078d4 <sulp+0x36>
 80078b4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80078b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078bc:	2b00      	cmp	r3, #0
 80078be:	dd09      	ble.n	80078d4 <sulp+0x36>
 80078c0:	051b      	lsls	r3, r3, #20
 80078c2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80078c6:	2400      	movs	r4, #0
 80078c8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80078cc:	4622      	mov	r2, r4
 80078ce:	462b      	mov	r3, r5
 80078d0:	f7f8 fea2 	bl	8000618 <__aeabi_dmul>
 80078d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080078d8 <_strtod_l>:
 80078d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078dc:	ed2d 8b02 	vpush	{d8}
 80078e0:	b09b      	sub	sp, #108	; 0x6c
 80078e2:	4604      	mov	r4, r0
 80078e4:	9213      	str	r2, [sp, #76]	; 0x4c
 80078e6:	2200      	movs	r2, #0
 80078e8:	9216      	str	r2, [sp, #88]	; 0x58
 80078ea:	460d      	mov	r5, r1
 80078ec:	f04f 0800 	mov.w	r8, #0
 80078f0:	f04f 0900 	mov.w	r9, #0
 80078f4:	460a      	mov	r2, r1
 80078f6:	9215      	str	r2, [sp, #84]	; 0x54
 80078f8:	7811      	ldrb	r1, [r2, #0]
 80078fa:	292b      	cmp	r1, #43	; 0x2b
 80078fc:	d04c      	beq.n	8007998 <_strtod_l+0xc0>
 80078fe:	d83a      	bhi.n	8007976 <_strtod_l+0x9e>
 8007900:	290d      	cmp	r1, #13
 8007902:	d834      	bhi.n	800796e <_strtod_l+0x96>
 8007904:	2908      	cmp	r1, #8
 8007906:	d834      	bhi.n	8007972 <_strtod_l+0x9a>
 8007908:	2900      	cmp	r1, #0
 800790a:	d03d      	beq.n	8007988 <_strtod_l+0xb0>
 800790c:	2200      	movs	r2, #0
 800790e:	920a      	str	r2, [sp, #40]	; 0x28
 8007910:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007912:	7832      	ldrb	r2, [r6, #0]
 8007914:	2a30      	cmp	r2, #48	; 0x30
 8007916:	f040 80b4 	bne.w	8007a82 <_strtod_l+0x1aa>
 800791a:	7872      	ldrb	r2, [r6, #1]
 800791c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007920:	2a58      	cmp	r2, #88	; 0x58
 8007922:	d170      	bne.n	8007a06 <_strtod_l+0x12e>
 8007924:	9302      	str	r3, [sp, #8]
 8007926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007928:	9301      	str	r3, [sp, #4]
 800792a:	ab16      	add	r3, sp, #88	; 0x58
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	4a8e      	ldr	r2, [pc, #568]	; (8007b68 <_strtod_l+0x290>)
 8007930:	ab17      	add	r3, sp, #92	; 0x5c
 8007932:	a915      	add	r1, sp, #84	; 0x54
 8007934:	4620      	mov	r0, r4
 8007936:	f001 fcd3 	bl	80092e0 <__gethex>
 800793a:	f010 070f 	ands.w	r7, r0, #15
 800793e:	4605      	mov	r5, r0
 8007940:	d005      	beq.n	800794e <_strtod_l+0x76>
 8007942:	2f06      	cmp	r7, #6
 8007944:	d12a      	bne.n	800799c <_strtod_l+0xc4>
 8007946:	3601      	adds	r6, #1
 8007948:	2300      	movs	r3, #0
 800794a:	9615      	str	r6, [sp, #84]	; 0x54
 800794c:	930a      	str	r3, [sp, #40]	; 0x28
 800794e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007950:	2b00      	cmp	r3, #0
 8007952:	f040 857f 	bne.w	8008454 <_strtod_l+0xb7c>
 8007956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007958:	b1db      	cbz	r3, 8007992 <_strtod_l+0xba>
 800795a:	4642      	mov	r2, r8
 800795c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007960:	ec43 2b10 	vmov	d0, r2, r3
 8007964:	b01b      	add	sp, #108	; 0x6c
 8007966:	ecbd 8b02 	vpop	{d8}
 800796a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796e:	2920      	cmp	r1, #32
 8007970:	d1cc      	bne.n	800790c <_strtod_l+0x34>
 8007972:	3201      	adds	r2, #1
 8007974:	e7bf      	b.n	80078f6 <_strtod_l+0x1e>
 8007976:	292d      	cmp	r1, #45	; 0x2d
 8007978:	d1c8      	bne.n	800790c <_strtod_l+0x34>
 800797a:	2101      	movs	r1, #1
 800797c:	910a      	str	r1, [sp, #40]	; 0x28
 800797e:	1c51      	adds	r1, r2, #1
 8007980:	9115      	str	r1, [sp, #84]	; 0x54
 8007982:	7852      	ldrb	r2, [r2, #1]
 8007984:	2a00      	cmp	r2, #0
 8007986:	d1c3      	bne.n	8007910 <_strtod_l+0x38>
 8007988:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800798a:	9515      	str	r5, [sp, #84]	; 0x54
 800798c:	2b00      	cmp	r3, #0
 800798e:	f040 855f 	bne.w	8008450 <_strtod_l+0xb78>
 8007992:	4642      	mov	r2, r8
 8007994:	464b      	mov	r3, r9
 8007996:	e7e3      	b.n	8007960 <_strtod_l+0x88>
 8007998:	2100      	movs	r1, #0
 800799a:	e7ef      	b.n	800797c <_strtod_l+0xa4>
 800799c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800799e:	b13a      	cbz	r2, 80079b0 <_strtod_l+0xd8>
 80079a0:	2135      	movs	r1, #53	; 0x35
 80079a2:	a818      	add	r0, sp, #96	; 0x60
 80079a4:	f7ff ff37 	bl	8007816 <__copybits>
 80079a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80079aa:	4620      	mov	r0, r4
 80079ac:	f7ff fb0a 	bl	8006fc4 <_Bfree>
 80079b0:	3f01      	subs	r7, #1
 80079b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80079b4:	2f04      	cmp	r7, #4
 80079b6:	d806      	bhi.n	80079c6 <_strtod_l+0xee>
 80079b8:	e8df f007 	tbb	[pc, r7]
 80079bc:	201d0314 	.word	0x201d0314
 80079c0:	14          	.byte	0x14
 80079c1:	00          	.byte	0x00
 80079c2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80079c6:	05e9      	lsls	r1, r5, #23
 80079c8:	bf48      	it	mi
 80079ca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80079ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079d2:	0d1b      	lsrs	r3, r3, #20
 80079d4:	051b      	lsls	r3, r3, #20
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1b9      	bne.n	800794e <_strtod_l+0x76>
 80079da:	f7fe fb03 	bl	8005fe4 <__errno>
 80079de:	2322      	movs	r3, #34	; 0x22
 80079e0:	6003      	str	r3, [r0, #0]
 80079e2:	e7b4      	b.n	800794e <_strtod_l+0x76>
 80079e4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80079e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80079ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80079f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80079f4:	e7e7      	b.n	80079c6 <_strtod_l+0xee>
 80079f6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007b70 <_strtod_l+0x298>
 80079fa:	e7e4      	b.n	80079c6 <_strtod_l+0xee>
 80079fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007a00:	f04f 38ff 	mov.w	r8, #4294967295
 8007a04:	e7df      	b.n	80079c6 <_strtod_l+0xee>
 8007a06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	9215      	str	r2, [sp, #84]	; 0x54
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	2b30      	cmp	r3, #48	; 0x30
 8007a10:	d0f9      	beq.n	8007a06 <_strtod_l+0x12e>
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d09b      	beq.n	800794e <_strtod_l+0x76>
 8007a16:	2301      	movs	r3, #1
 8007a18:	f04f 0a00 	mov.w	sl, #0
 8007a1c:	9304      	str	r3, [sp, #16]
 8007a1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a20:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a22:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007a26:	46d3      	mov	fp, sl
 8007a28:	220a      	movs	r2, #10
 8007a2a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007a2c:	7806      	ldrb	r6, [r0, #0]
 8007a2e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007a32:	b2d9      	uxtb	r1, r3
 8007a34:	2909      	cmp	r1, #9
 8007a36:	d926      	bls.n	8007a86 <_strtod_l+0x1ae>
 8007a38:	494c      	ldr	r1, [pc, #304]	; (8007b6c <_strtod_l+0x294>)
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f001 fb79 	bl	8009132 <strncmp>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d030      	beq.n	8007aa6 <_strtod_l+0x1ce>
 8007a44:	2000      	movs	r0, #0
 8007a46:	4632      	mov	r2, r6
 8007a48:	9005      	str	r0, [sp, #20]
 8007a4a:	465e      	mov	r6, fp
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2a65      	cmp	r2, #101	; 0x65
 8007a50:	d001      	beq.n	8007a56 <_strtod_l+0x17e>
 8007a52:	2a45      	cmp	r2, #69	; 0x45
 8007a54:	d113      	bne.n	8007a7e <_strtod_l+0x1a6>
 8007a56:	b91e      	cbnz	r6, 8007a60 <_strtod_l+0x188>
 8007a58:	9a04      	ldr	r2, [sp, #16]
 8007a5a:	4302      	orrs	r2, r0
 8007a5c:	d094      	beq.n	8007988 <_strtod_l+0xb0>
 8007a5e:	2600      	movs	r6, #0
 8007a60:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007a62:	1c6a      	adds	r2, r5, #1
 8007a64:	9215      	str	r2, [sp, #84]	; 0x54
 8007a66:	786a      	ldrb	r2, [r5, #1]
 8007a68:	2a2b      	cmp	r2, #43	; 0x2b
 8007a6a:	d074      	beq.n	8007b56 <_strtod_l+0x27e>
 8007a6c:	2a2d      	cmp	r2, #45	; 0x2d
 8007a6e:	d078      	beq.n	8007b62 <_strtod_l+0x28a>
 8007a70:	f04f 0c00 	mov.w	ip, #0
 8007a74:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007a78:	2909      	cmp	r1, #9
 8007a7a:	d97f      	bls.n	8007b7c <_strtod_l+0x2a4>
 8007a7c:	9515      	str	r5, [sp, #84]	; 0x54
 8007a7e:	2700      	movs	r7, #0
 8007a80:	e09e      	b.n	8007bc0 <_strtod_l+0x2e8>
 8007a82:	2300      	movs	r3, #0
 8007a84:	e7c8      	b.n	8007a18 <_strtod_l+0x140>
 8007a86:	f1bb 0f08 	cmp.w	fp, #8
 8007a8a:	bfd8      	it	le
 8007a8c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007a8e:	f100 0001 	add.w	r0, r0, #1
 8007a92:	bfda      	itte	le
 8007a94:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a98:	9309      	strle	r3, [sp, #36]	; 0x24
 8007a9a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007a9e:	f10b 0b01 	add.w	fp, fp, #1
 8007aa2:	9015      	str	r0, [sp, #84]	; 0x54
 8007aa4:	e7c1      	b.n	8007a2a <_strtod_l+0x152>
 8007aa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	9215      	str	r2, [sp, #84]	; 0x54
 8007aac:	785a      	ldrb	r2, [r3, #1]
 8007aae:	f1bb 0f00 	cmp.w	fp, #0
 8007ab2:	d037      	beq.n	8007b24 <_strtod_l+0x24c>
 8007ab4:	9005      	str	r0, [sp, #20]
 8007ab6:	465e      	mov	r6, fp
 8007ab8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007abc:	2b09      	cmp	r3, #9
 8007abe:	d912      	bls.n	8007ae6 <_strtod_l+0x20e>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e7c4      	b.n	8007a4e <_strtod_l+0x176>
 8007ac4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ac6:	1c5a      	adds	r2, r3, #1
 8007ac8:	9215      	str	r2, [sp, #84]	; 0x54
 8007aca:	785a      	ldrb	r2, [r3, #1]
 8007acc:	3001      	adds	r0, #1
 8007ace:	2a30      	cmp	r2, #48	; 0x30
 8007ad0:	d0f8      	beq.n	8007ac4 <_strtod_l+0x1ec>
 8007ad2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007ad6:	2b08      	cmp	r3, #8
 8007ad8:	f200 84c1 	bhi.w	800845e <_strtod_l+0xb86>
 8007adc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ade:	9005      	str	r0, [sp, #20]
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ae4:	4606      	mov	r6, r0
 8007ae6:	3a30      	subs	r2, #48	; 0x30
 8007ae8:	f100 0301 	add.w	r3, r0, #1
 8007aec:	d014      	beq.n	8007b18 <_strtod_l+0x240>
 8007aee:	9905      	ldr	r1, [sp, #20]
 8007af0:	4419      	add	r1, r3
 8007af2:	9105      	str	r1, [sp, #20]
 8007af4:	4633      	mov	r3, r6
 8007af6:	eb00 0c06 	add.w	ip, r0, r6
 8007afa:	210a      	movs	r1, #10
 8007afc:	4563      	cmp	r3, ip
 8007afe:	d113      	bne.n	8007b28 <_strtod_l+0x250>
 8007b00:	1833      	adds	r3, r6, r0
 8007b02:	2b08      	cmp	r3, #8
 8007b04:	f106 0601 	add.w	r6, r6, #1
 8007b08:	4406      	add	r6, r0
 8007b0a:	dc1a      	bgt.n	8007b42 <_strtod_l+0x26a>
 8007b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b0e:	230a      	movs	r3, #10
 8007b10:	fb03 2301 	mla	r3, r3, r1, r2
 8007b14:	9309      	str	r3, [sp, #36]	; 0x24
 8007b16:	2300      	movs	r3, #0
 8007b18:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007b1a:	1c51      	adds	r1, r2, #1
 8007b1c:	9115      	str	r1, [sp, #84]	; 0x54
 8007b1e:	7852      	ldrb	r2, [r2, #1]
 8007b20:	4618      	mov	r0, r3
 8007b22:	e7c9      	b.n	8007ab8 <_strtod_l+0x1e0>
 8007b24:	4658      	mov	r0, fp
 8007b26:	e7d2      	b.n	8007ace <_strtod_l+0x1f6>
 8007b28:	2b08      	cmp	r3, #8
 8007b2a:	f103 0301 	add.w	r3, r3, #1
 8007b2e:	dc03      	bgt.n	8007b38 <_strtod_l+0x260>
 8007b30:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007b32:	434f      	muls	r7, r1
 8007b34:	9709      	str	r7, [sp, #36]	; 0x24
 8007b36:	e7e1      	b.n	8007afc <_strtod_l+0x224>
 8007b38:	2b10      	cmp	r3, #16
 8007b3a:	bfd8      	it	le
 8007b3c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007b40:	e7dc      	b.n	8007afc <_strtod_l+0x224>
 8007b42:	2e10      	cmp	r6, #16
 8007b44:	bfdc      	itt	le
 8007b46:	230a      	movle	r3, #10
 8007b48:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007b4c:	e7e3      	b.n	8007b16 <_strtod_l+0x23e>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	9305      	str	r3, [sp, #20]
 8007b52:	2301      	movs	r3, #1
 8007b54:	e780      	b.n	8007a58 <_strtod_l+0x180>
 8007b56:	f04f 0c00 	mov.w	ip, #0
 8007b5a:	1caa      	adds	r2, r5, #2
 8007b5c:	9215      	str	r2, [sp, #84]	; 0x54
 8007b5e:	78aa      	ldrb	r2, [r5, #2]
 8007b60:	e788      	b.n	8007a74 <_strtod_l+0x19c>
 8007b62:	f04f 0c01 	mov.w	ip, #1
 8007b66:	e7f8      	b.n	8007b5a <_strtod_l+0x282>
 8007b68:	0800a370 	.word	0x0800a370
 8007b6c:	0800a36c 	.word	0x0800a36c
 8007b70:	7ff00000 	.word	0x7ff00000
 8007b74:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007b76:	1c51      	adds	r1, r2, #1
 8007b78:	9115      	str	r1, [sp, #84]	; 0x54
 8007b7a:	7852      	ldrb	r2, [r2, #1]
 8007b7c:	2a30      	cmp	r2, #48	; 0x30
 8007b7e:	d0f9      	beq.n	8007b74 <_strtod_l+0x29c>
 8007b80:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007b84:	2908      	cmp	r1, #8
 8007b86:	f63f af7a 	bhi.w	8007a7e <_strtod_l+0x1a6>
 8007b8a:	3a30      	subs	r2, #48	; 0x30
 8007b8c:	9208      	str	r2, [sp, #32]
 8007b8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007b90:	920c      	str	r2, [sp, #48]	; 0x30
 8007b92:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007b94:	1c57      	adds	r7, r2, #1
 8007b96:	9715      	str	r7, [sp, #84]	; 0x54
 8007b98:	7852      	ldrb	r2, [r2, #1]
 8007b9a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007b9e:	f1be 0f09 	cmp.w	lr, #9
 8007ba2:	d938      	bls.n	8007c16 <_strtod_l+0x33e>
 8007ba4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007ba6:	1a7f      	subs	r7, r7, r1
 8007ba8:	2f08      	cmp	r7, #8
 8007baa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007bae:	dc03      	bgt.n	8007bb8 <_strtod_l+0x2e0>
 8007bb0:	9908      	ldr	r1, [sp, #32]
 8007bb2:	428f      	cmp	r7, r1
 8007bb4:	bfa8      	it	ge
 8007bb6:	460f      	movge	r7, r1
 8007bb8:	f1bc 0f00 	cmp.w	ip, #0
 8007bbc:	d000      	beq.n	8007bc0 <_strtod_l+0x2e8>
 8007bbe:	427f      	negs	r7, r7
 8007bc0:	2e00      	cmp	r6, #0
 8007bc2:	d14f      	bne.n	8007c64 <_strtod_l+0x38c>
 8007bc4:	9904      	ldr	r1, [sp, #16]
 8007bc6:	4301      	orrs	r1, r0
 8007bc8:	f47f aec1 	bne.w	800794e <_strtod_l+0x76>
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f47f aedb 	bne.w	8007988 <_strtod_l+0xb0>
 8007bd2:	2a69      	cmp	r2, #105	; 0x69
 8007bd4:	d029      	beq.n	8007c2a <_strtod_l+0x352>
 8007bd6:	dc26      	bgt.n	8007c26 <_strtod_l+0x34e>
 8007bd8:	2a49      	cmp	r2, #73	; 0x49
 8007bda:	d026      	beq.n	8007c2a <_strtod_l+0x352>
 8007bdc:	2a4e      	cmp	r2, #78	; 0x4e
 8007bde:	f47f aed3 	bne.w	8007988 <_strtod_l+0xb0>
 8007be2:	499b      	ldr	r1, [pc, #620]	; (8007e50 <_strtod_l+0x578>)
 8007be4:	a815      	add	r0, sp, #84	; 0x54
 8007be6:	f001 fdbb 	bl	8009760 <__match>
 8007bea:	2800      	cmp	r0, #0
 8007bec:	f43f aecc 	beq.w	8007988 <_strtod_l+0xb0>
 8007bf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b28      	cmp	r3, #40	; 0x28
 8007bf6:	d12f      	bne.n	8007c58 <_strtod_l+0x380>
 8007bf8:	4996      	ldr	r1, [pc, #600]	; (8007e54 <_strtod_l+0x57c>)
 8007bfa:	aa18      	add	r2, sp, #96	; 0x60
 8007bfc:	a815      	add	r0, sp, #84	; 0x54
 8007bfe:	f001 fdc3 	bl	8009788 <__hexnan>
 8007c02:	2805      	cmp	r0, #5
 8007c04:	d128      	bne.n	8007c58 <_strtod_l+0x380>
 8007c06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c0c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007c10:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007c14:	e69b      	b.n	800794e <_strtod_l+0x76>
 8007c16:	9f08      	ldr	r7, [sp, #32]
 8007c18:	210a      	movs	r1, #10
 8007c1a:	fb01 2107 	mla	r1, r1, r7, r2
 8007c1e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007c22:	9208      	str	r2, [sp, #32]
 8007c24:	e7b5      	b.n	8007b92 <_strtod_l+0x2ba>
 8007c26:	2a6e      	cmp	r2, #110	; 0x6e
 8007c28:	e7d9      	b.n	8007bde <_strtod_l+0x306>
 8007c2a:	498b      	ldr	r1, [pc, #556]	; (8007e58 <_strtod_l+0x580>)
 8007c2c:	a815      	add	r0, sp, #84	; 0x54
 8007c2e:	f001 fd97 	bl	8009760 <__match>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	f43f aea8 	beq.w	8007988 <_strtod_l+0xb0>
 8007c38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c3a:	4988      	ldr	r1, [pc, #544]	; (8007e5c <_strtod_l+0x584>)
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	a815      	add	r0, sp, #84	; 0x54
 8007c40:	9315      	str	r3, [sp, #84]	; 0x54
 8007c42:	f001 fd8d 	bl	8009760 <__match>
 8007c46:	b910      	cbnz	r0, 8007c4e <_strtod_l+0x376>
 8007c48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	9315      	str	r3, [sp, #84]	; 0x54
 8007c4e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007e6c <_strtod_l+0x594>
 8007c52:	f04f 0800 	mov.w	r8, #0
 8007c56:	e67a      	b.n	800794e <_strtod_l+0x76>
 8007c58:	4881      	ldr	r0, [pc, #516]	; (8007e60 <_strtod_l+0x588>)
 8007c5a:	f001 fa9d 	bl	8009198 <nan>
 8007c5e:	ec59 8b10 	vmov	r8, r9, d0
 8007c62:	e674      	b.n	800794e <_strtod_l+0x76>
 8007c64:	9b05      	ldr	r3, [sp, #20]
 8007c66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c68:	1afb      	subs	r3, r7, r3
 8007c6a:	f1bb 0f00 	cmp.w	fp, #0
 8007c6e:	bf08      	it	eq
 8007c70:	46b3      	moveq	fp, r6
 8007c72:	2e10      	cmp	r6, #16
 8007c74:	9308      	str	r3, [sp, #32]
 8007c76:	4635      	mov	r5, r6
 8007c78:	bfa8      	it	ge
 8007c7a:	2510      	movge	r5, #16
 8007c7c:	f7f8 fc52 	bl	8000524 <__aeabi_ui2d>
 8007c80:	2e09      	cmp	r6, #9
 8007c82:	4680      	mov	r8, r0
 8007c84:	4689      	mov	r9, r1
 8007c86:	dd13      	ble.n	8007cb0 <_strtod_l+0x3d8>
 8007c88:	4b76      	ldr	r3, [pc, #472]	; (8007e64 <_strtod_l+0x58c>)
 8007c8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007c8e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007c92:	f7f8 fcc1 	bl	8000618 <__aeabi_dmul>
 8007c96:	4680      	mov	r8, r0
 8007c98:	4650      	mov	r0, sl
 8007c9a:	4689      	mov	r9, r1
 8007c9c:	f7f8 fc42 	bl	8000524 <__aeabi_ui2d>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4640      	mov	r0, r8
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	f7f8 fb00 	bl	80002ac <__adddf3>
 8007cac:	4680      	mov	r8, r0
 8007cae:	4689      	mov	r9, r1
 8007cb0:	2e0f      	cmp	r6, #15
 8007cb2:	dc38      	bgt.n	8007d26 <_strtod_l+0x44e>
 8007cb4:	9b08      	ldr	r3, [sp, #32]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f43f ae49 	beq.w	800794e <_strtod_l+0x76>
 8007cbc:	dd24      	ble.n	8007d08 <_strtod_l+0x430>
 8007cbe:	2b16      	cmp	r3, #22
 8007cc0:	dc0b      	bgt.n	8007cda <_strtod_l+0x402>
 8007cc2:	4968      	ldr	r1, [pc, #416]	; (8007e64 <_strtod_l+0x58c>)
 8007cc4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ccc:	4642      	mov	r2, r8
 8007cce:	464b      	mov	r3, r9
 8007cd0:	f7f8 fca2 	bl	8000618 <__aeabi_dmul>
 8007cd4:	4680      	mov	r8, r0
 8007cd6:	4689      	mov	r9, r1
 8007cd8:	e639      	b.n	800794e <_strtod_l+0x76>
 8007cda:	9a08      	ldr	r2, [sp, #32]
 8007cdc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	db20      	blt.n	8007d26 <_strtod_l+0x44e>
 8007ce4:	4c5f      	ldr	r4, [pc, #380]	; (8007e64 <_strtod_l+0x58c>)
 8007ce6:	f1c6 060f 	rsb	r6, r6, #15
 8007cea:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007cee:	4642      	mov	r2, r8
 8007cf0:	464b      	mov	r3, r9
 8007cf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cf6:	f7f8 fc8f 	bl	8000618 <__aeabi_dmul>
 8007cfa:	9b08      	ldr	r3, [sp, #32]
 8007cfc:	1b9e      	subs	r6, r3, r6
 8007cfe:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007d02:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007d06:	e7e3      	b.n	8007cd0 <_strtod_l+0x3f8>
 8007d08:	9b08      	ldr	r3, [sp, #32]
 8007d0a:	3316      	adds	r3, #22
 8007d0c:	db0b      	blt.n	8007d26 <_strtod_l+0x44e>
 8007d0e:	9b05      	ldr	r3, [sp, #20]
 8007d10:	1bdf      	subs	r7, r3, r7
 8007d12:	4b54      	ldr	r3, [pc, #336]	; (8007e64 <_strtod_l+0x58c>)
 8007d14:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	4649      	mov	r1, r9
 8007d20:	f7f8 fda4 	bl	800086c <__aeabi_ddiv>
 8007d24:	e7d6      	b.n	8007cd4 <_strtod_l+0x3fc>
 8007d26:	9b08      	ldr	r3, [sp, #32]
 8007d28:	1b75      	subs	r5, r6, r5
 8007d2a:	441d      	add	r5, r3
 8007d2c:	2d00      	cmp	r5, #0
 8007d2e:	dd70      	ble.n	8007e12 <_strtod_l+0x53a>
 8007d30:	f015 030f 	ands.w	r3, r5, #15
 8007d34:	d00a      	beq.n	8007d4c <_strtod_l+0x474>
 8007d36:	494b      	ldr	r1, [pc, #300]	; (8007e64 <_strtod_l+0x58c>)
 8007d38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d3c:	4642      	mov	r2, r8
 8007d3e:	464b      	mov	r3, r9
 8007d40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d44:	f7f8 fc68 	bl	8000618 <__aeabi_dmul>
 8007d48:	4680      	mov	r8, r0
 8007d4a:	4689      	mov	r9, r1
 8007d4c:	f035 050f 	bics.w	r5, r5, #15
 8007d50:	d04d      	beq.n	8007dee <_strtod_l+0x516>
 8007d52:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007d56:	dd22      	ble.n	8007d9e <_strtod_l+0x4c6>
 8007d58:	2500      	movs	r5, #0
 8007d5a:	46ab      	mov	fp, r5
 8007d5c:	9509      	str	r5, [sp, #36]	; 0x24
 8007d5e:	9505      	str	r5, [sp, #20]
 8007d60:	2322      	movs	r3, #34	; 0x22
 8007d62:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007e6c <_strtod_l+0x594>
 8007d66:	6023      	str	r3, [r4, #0]
 8007d68:	f04f 0800 	mov.w	r8, #0
 8007d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f43f aded 	beq.w	800794e <_strtod_l+0x76>
 8007d74:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007d76:	4620      	mov	r0, r4
 8007d78:	f7ff f924 	bl	8006fc4 <_Bfree>
 8007d7c:	9905      	ldr	r1, [sp, #20]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f7ff f920 	bl	8006fc4 <_Bfree>
 8007d84:	4659      	mov	r1, fp
 8007d86:	4620      	mov	r0, r4
 8007d88:	f7ff f91c 	bl	8006fc4 <_Bfree>
 8007d8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f7ff f918 	bl	8006fc4 <_Bfree>
 8007d94:	4629      	mov	r1, r5
 8007d96:	4620      	mov	r0, r4
 8007d98:	f7ff f914 	bl	8006fc4 <_Bfree>
 8007d9c:	e5d7      	b.n	800794e <_strtod_l+0x76>
 8007d9e:	4b32      	ldr	r3, [pc, #200]	; (8007e68 <_strtod_l+0x590>)
 8007da0:	9304      	str	r3, [sp, #16]
 8007da2:	2300      	movs	r3, #0
 8007da4:	112d      	asrs	r5, r5, #4
 8007da6:	4640      	mov	r0, r8
 8007da8:	4649      	mov	r1, r9
 8007daa:	469a      	mov	sl, r3
 8007dac:	2d01      	cmp	r5, #1
 8007dae:	dc21      	bgt.n	8007df4 <_strtod_l+0x51c>
 8007db0:	b10b      	cbz	r3, 8007db6 <_strtod_l+0x4de>
 8007db2:	4680      	mov	r8, r0
 8007db4:	4689      	mov	r9, r1
 8007db6:	492c      	ldr	r1, [pc, #176]	; (8007e68 <_strtod_l+0x590>)
 8007db8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007dbc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007dc0:	4642      	mov	r2, r8
 8007dc2:	464b      	mov	r3, r9
 8007dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dc8:	f7f8 fc26 	bl	8000618 <__aeabi_dmul>
 8007dcc:	4b27      	ldr	r3, [pc, #156]	; (8007e6c <_strtod_l+0x594>)
 8007dce:	460a      	mov	r2, r1
 8007dd0:	400b      	ands	r3, r1
 8007dd2:	4927      	ldr	r1, [pc, #156]	; (8007e70 <_strtod_l+0x598>)
 8007dd4:	428b      	cmp	r3, r1
 8007dd6:	4680      	mov	r8, r0
 8007dd8:	d8be      	bhi.n	8007d58 <_strtod_l+0x480>
 8007dda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007dde:	428b      	cmp	r3, r1
 8007de0:	bf86      	itte	hi
 8007de2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007e74 <_strtod_l+0x59c>
 8007de6:	f04f 38ff 	movhi.w	r8, #4294967295
 8007dea:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007dee:	2300      	movs	r3, #0
 8007df0:	9304      	str	r3, [sp, #16]
 8007df2:	e07b      	b.n	8007eec <_strtod_l+0x614>
 8007df4:	07ea      	lsls	r2, r5, #31
 8007df6:	d505      	bpl.n	8007e04 <_strtod_l+0x52c>
 8007df8:	9b04      	ldr	r3, [sp, #16]
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f7f8 fc0b 	bl	8000618 <__aeabi_dmul>
 8007e02:	2301      	movs	r3, #1
 8007e04:	9a04      	ldr	r2, [sp, #16]
 8007e06:	3208      	adds	r2, #8
 8007e08:	f10a 0a01 	add.w	sl, sl, #1
 8007e0c:	106d      	asrs	r5, r5, #1
 8007e0e:	9204      	str	r2, [sp, #16]
 8007e10:	e7cc      	b.n	8007dac <_strtod_l+0x4d4>
 8007e12:	d0ec      	beq.n	8007dee <_strtod_l+0x516>
 8007e14:	426d      	negs	r5, r5
 8007e16:	f015 020f 	ands.w	r2, r5, #15
 8007e1a:	d00a      	beq.n	8007e32 <_strtod_l+0x55a>
 8007e1c:	4b11      	ldr	r3, [pc, #68]	; (8007e64 <_strtod_l+0x58c>)
 8007e1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e22:	4640      	mov	r0, r8
 8007e24:	4649      	mov	r1, r9
 8007e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2a:	f7f8 fd1f 	bl	800086c <__aeabi_ddiv>
 8007e2e:	4680      	mov	r8, r0
 8007e30:	4689      	mov	r9, r1
 8007e32:	112d      	asrs	r5, r5, #4
 8007e34:	d0db      	beq.n	8007dee <_strtod_l+0x516>
 8007e36:	2d1f      	cmp	r5, #31
 8007e38:	dd1e      	ble.n	8007e78 <_strtod_l+0x5a0>
 8007e3a:	2500      	movs	r5, #0
 8007e3c:	46ab      	mov	fp, r5
 8007e3e:	9509      	str	r5, [sp, #36]	; 0x24
 8007e40:	9505      	str	r5, [sp, #20]
 8007e42:	2322      	movs	r3, #34	; 0x22
 8007e44:	f04f 0800 	mov.w	r8, #0
 8007e48:	f04f 0900 	mov.w	r9, #0
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	e78d      	b.n	8007d6c <_strtod_l+0x494>
 8007e50:	0800a159 	.word	0x0800a159
 8007e54:	0800a384 	.word	0x0800a384
 8007e58:	0800a151 	.word	0x0800a151
 8007e5c:	0800a186 	.word	0x0800a186
 8007e60:	0800a530 	.word	0x0800a530
 8007e64:	0800a298 	.word	0x0800a298
 8007e68:	0800a270 	.word	0x0800a270
 8007e6c:	7ff00000 	.word	0x7ff00000
 8007e70:	7ca00000 	.word	0x7ca00000
 8007e74:	7fefffff 	.word	0x7fefffff
 8007e78:	f015 0310 	ands.w	r3, r5, #16
 8007e7c:	bf18      	it	ne
 8007e7e:	236a      	movne	r3, #106	; 0x6a
 8007e80:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008224 <_strtod_l+0x94c>
 8007e84:	9304      	str	r3, [sp, #16]
 8007e86:	4640      	mov	r0, r8
 8007e88:	4649      	mov	r1, r9
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	07ea      	lsls	r2, r5, #31
 8007e8e:	d504      	bpl.n	8007e9a <_strtod_l+0x5c2>
 8007e90:	e9da 2300 	ldrd	r2, r3, [sl]
 8007e94:	f7f8 fbc0 	bl	8000618 <__aeabi_dmul>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	106d      	asrs	r5, r5, #1
 8007e9c:	f10a 0a08 	add.w	sl, sl, #8
 8007ea0:	d1f4      	bne.n	8007e8c <_strtod_l+0x5b4>
 8007ea2:	b10b      	cbz	r3, 8007ea8 <_strtod_l+0x5d0>
 8007ea4:	4680      	mov	r8, r0
 8007ea6:	4689      	mov	r9, r1
 8007ea8:	9b04      	ldr	r3, [sp, #16]
 8007eaa:	b1bb      	cbz	r3, 8007edc <_strtod_l+0x604>
 8007eac:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007eb0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	dd10      	ble.n	8007edc <_strtod_l+0x604>
 8007eba:	2b1f      	cmp	r3, #31
 8007ebc:	f340 811e 	ble.w	80080fc <_strtod_l+0x824>
 8007ec0:	2b34      	cmp	r3, #52	; 0x34
 8007ec2:	bfde      	ittt	le
 8007ec4:	f04f 33ff 	movle.w	r3, #4294967295
 8007ec8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007ecc:	4093      	lslle	r3, r2
 8007ece:	f04f 0800 	mov.w	r8, #0
 8007ed2:	bfcc      	ite	gt
 8007ed4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007ed8:	ea03 0901 	andle.w	r9, r3, r1
 8007edc:	2200      	movs	r2, #0
 8007ede:	2300      	movs	r3, #0
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	f7f8 fe00 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d1a6      	bne.n	8007e3a <_strtod_l+0x562>
 8007eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ef2:	4633      	mov	r3, r6
 8007ef4:	465a      	mov	r2, fp
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f7ff f8cc 	bl	8007094 <__s2b>
 8007efc:	9009      	str	r0, [sp, #36]	; 0x24
 8007efe:	2800      	cmp	r0, #0
 8007f00:	f43f af2a 	beq.w	8007d58 <_strtod_l+0x480>
 8007f04:	9a08      	ldr	r2, [sp, #32]
 8007f06:	9b05      	ldr	r3, [sp, #20]
 8007f08:	2a00      	cmp	r2, #0
 8007f0a:	eba3 0307 	sub.w	r3, r3, r7
 8007f0e:	bfa8      	it	ge
 8007f10:	2300      	movge	r3, #0
 8007f12:	930c      	str	r3, [sp, #48]	; 0x30
 8007f14:	2500      	movs	r5, #0
 8007f16:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007f1a:	9312      	str	r3, [sp, #72]	; 0x48
 8007f1c:	46ab      	mov	fp, r5
 8007f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f20:	4620      	mov	r0, r4
 8007f22:	6859      	ldr	r1, [r3, #4]
 8007f24:	f7ff f80e 	bl	8006f44 <_Balloc>
 8007f28:	9005      	str	r0, [sp, #20]
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	f43f af18 	beq.w	8007d60 <_strtod_l+0x488>
 8007f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f32:	691a      	ldr	r2, [r3, #16]
 8007f34:	3202      	adds	r2, #2
 8007f36:	f103 010c 	add.w	r1, r3, #12
 8007f3a:	0092      	lsls	r2, r2, #2
 8007f3c:	300c      	adds	r0, #12
 8007f3e:	f001 f91b 	bl	8009178 <memcpy>
 8007f42:	ec49 8b10 	vmov	d0, r8, r9
 8007f46:	aa18      	add	r2, sp, #96	; 0x60
 8007f48:	a917      	add	r1, sp, #92	; 0x5c
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f7ff fbd6 	bl	80076fc <__d2b>
 8007f50:	ec49 8b18 	vmov	d8, r8, r9
 8007f54:	9016      	str	r0, [sp, #88]	; 0x58
 8007f56:	2800      	cmp	r0, #0
 8007f58:	f43f af02 	beq.w	8007d60 <_strtod_l+0x488>
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f7ff f930 	bl	80071c4 <__i2b>
 8007f64:	4683      	mov	fp, r0
 8007f66:	2800      	cmp	r0, #0
 8007f68:	f43f aefa 	beq.w	8007d60 <_strtod_l+0x488>
 8007f6c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007f6e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007f70:	2e00      	cmp	r6, #0
 8007f72:	bfab      	itete	ge
 8007f74:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007f76:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007f78:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007f7a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007f7e:	bfac      	ite	ge
 8007f80:	eb06 0a03 	addge.w	sl, r6, r3
 8007f84:	1b9f      	sublt	r7, r3, r6
 8007f86:	9b04      	ldr	r3, [sp, #16]
 8007f88:	1af6      	subs	r6, r6, r3
 8007f8a:	4416      	add	r6, r2
 8007f8c:	4ba0      	ldr	r3, [pc, #640]	; (8008210 <_strtod_l+0x938>)
 8007f8e:	3e01      	subs	r6, #1
 8007f90:	429e      	cmp	r6, r3
 8007f92:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007f96:	f280 80c4 	bge.w	8008122 <_strtod_l+0x84a>
 8007f9a:	1b9b      	subs	r3, r3, r6
 8007f9c:	2b1f      	cmp	r3, #31
 8007f9e:	eba2 0203 	sub.w	r2, r2, r3
 8007fa2:	f04f 0101 	mov.w	r1, #1
 8007fa6:	f300 80b0 	bgt.w	800810a <_strtod_l+0x832>
 8007faa:	fa01 f303 	lsl.w	r3, r1, r3
 8007fae:	930e      	str	r3, [sp, #56]	; 0x38
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	930d      	str	r3, [sp, #52]	; 0x34
 8007fb4:	eb0a 0602 	add.w	r6, sl, r2
 8007fb8:	9b04      	ldr	r3, [sp, #16]
 8007fba:	45b2      	cmp	sl, r6
 8007fbc:	4417      	add	r7, r2
 8007fbe:	441f      	add	r7, r3
 8007fc0:	4653      	mov	r3, sl
 8007fc2:	bfa8      	it	ge
 8007fc4:	4633      	movge	r3, r6
 8007fc6:	42bb      	cmp	r3, r7
 8007fc8:	bfa8      	it	ge
 8007fca:	463b      	movge	r3, r7
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	bfc2      	ittt	gt
 8007fd0:	1af6      	subgt	r6, r6, r3
 8007fd2:	1aff      	subgt	r7, r7, r3
 8007fd4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	dd17      	ble.n	800800e <_strtod_l+0x736>
 8007fde:	4659      	mov	r1, fp
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f7ff f9ae 	bl	8007344 <__pow5mult>
 8007fe8:	4683      	mov	fp, r0
 8007fea:	2800      	cmp	r0, #0
 8007fec:	f43f aeb8 	beq.w	8007d60 <_strtod_l+0x488>
 8007ff0:	4601      	mov	r1, r0
 8007ff2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f7ff f8fb 	bl	80071f0 <__multiply>
 8007ffa:	900b      	str	r0, [sp, #44]	; 0x2c
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	f43f aeaf 	beq.w	8007d60 <_strtod_l+0x488>
 8008002:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008004:	4620      	mov	r0, r4
 8008006:	f7fe ffdd 	bl	8006fc4 <_Bfree>
 800800a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800800c:	9316      	str	r3, [sp, #88]	; 0x58
 800800e:	2e00      	cmp	r6, #0
 8008010:	f300 808c 	bgt.w	800812c <_strtod_l+0x854>
 8008014:	9b08      	ldr	r3, [sp, #32]
 8008016:	2b00      	cmp	r3, #0
 8008018:	dd08      	ble.n	800802c <_strtod_l+0x754>
 800801a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800801c:	9905      	ldr	r1, [sp, #20]
 800801e:	4620      	mov	r0, r4
 8008020:	f7ff f990 	bl	8007344 <__pow5mult>
 8008024:	9005      	str	r0, [sp, #20]
 8008026:	2800      	cmp	r0, #0
 8008028:	f43f ae9a 	beq.w	8007d60 <_strtod_l+0x488>
 800802c:	2f00      	cmp	r7, #0
 800802e:	dd08      	ble.n	8008042 <_strtod_l+0x76a>
 8008030:	9905      	ldr	r1, [sp, #20]
 8008032:	463a      	mov	r2, r7
 8008034:	4620      	mov	r0, r4
 8008036:	f7ff f9df 	bl	80073f8 <__lshift>
 800803a:	9005      	str	r0, [sp, #20]
 800803c:	2800      	cmp	r0, #0
 800803e:	f43f ae8f 	beq.w	8007d60 <_strtod_l+0x488>
 8008042:	f1ba 0f00 	cmp.w	sl, #0
 8008046:	dd08      	ble.n	800805a <_strtod_l+0x782>
 8008048:	4659      	mov	r1, fp
 800804a:	4652      	mov	r2, sl
 800804c:	4620      	mov	r0, r4
 800804e:	f7ff f9d3 	bl	80073f8 <__lshift>
 8008052:	4683      	mov	fp, r0
 8008054:	2800      	cmp	r0, #0
 8008056:	f43f ae83 	beq.w	8007d60 <_strtod_l+0x488>
 800805a:	9a05      	ldr	r2, [sp, #20]
 800805c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800805e:	4620      	mov	r0, r4
 8008060:	f7ff fa52 	bl	8007508 <__mdiff>
 8008064:	4605      	mov	r5, r0
 8008066:	2800      	cmp	r0, #0
 8008068:	f43f ae7a 	beq.w	8007d60 <_strtod_l+0x488>
 800806c:	68c3      	ldr	r3, [r0, #12]
 800806e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008070:	2300      	movs	r3, #0
 8008072:	60c3      	str	r3, [r0, #12]
 8008074:	4659      	mov	r1, fp
 8008076:	f7ff fa2b 	bl	80074d0 <__mcmp>
 800807a:	2800      	cmp	r0, #0
 800807c:	da60      	bge.n	8008140 <_strtod_l+0x868>
 800807e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008080:	ea53 0308 	orrs.w	r3, r3, r8
 8008084:	f040 8084 	bne.w	8008190 <_strtod_l+0x8b8>
 8008088:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800808c:	2b00      	cmp	r3, #0
 800808e:	d17f      	bne.n	8008190 <_strtod_l+0x8b8>
 8008090:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008094:	0d1b      	lsrs	r3, r3, #20
 8008096:	051b      	lsls	r3, r3, #20
 8008098:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800809c:	d978      	bls.n	8008190 <_strtod_l+0x8b8>
 800809e:	696b      	ldr	r3, [r5, #20]
 80080a0:	b913      	cbnz	r3, 80080a8 <_strtod_l+0x7d0>
 80080a2:	692b      	ldr	r3, [r5, #16]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	dd73      	ble.n	8008190 <_strtod_l+0x8b8>
 80080a8:	4629      	mov	r1, r5
 80080aa:	2201      	movs	r2, #1
 80080ac:	4620      	mov	r0, r4
 80080ae:	f7ff f9a3 	bl	80073f8 <__lshift>
 80080b2:	4659      	mov	r1, fp
 80080b4:	4605      	mov	r5, r0
 80080b6:	f7ff fa0b 	bl	80074d0 <__mcmp>
 80080ba:	2800      	cmp	r0, #0
 80080bc:	dd68      	ble.n	8008190 <_strtod_l+0x8b8>
 80080be:	9904      	ldr	r1, [sp, #16]
 80080c0:	4a54      	ldr	r2, [pc, #336]	; (8008214 <_strtod_l+0x93c>)
 80080c2:	464b      	mov	r3, r9
 80080c4:	2900      	cmp	r1, #0
 80080c6:	f000 8084 	beq.w	80081d2 <_strtod_l+0x8fa>
 80080ca:	ea02 0109 	and.w	r1, r2, r9
 80080ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80080d2:	dc7e      	bgt.n	80081d2 <_strtod_l+0x8fa>
 80080d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80080d8:	f77f aeb3 	ble.w	8007e42 <_strtod_l+0x56a>
 80080dc:	4b4e      	ldr	r3, [pc, #312]	; (8008218 <_strtod_l+0x940>)
 80080de:	4640      	mov	r0, r8
 80080e0:	4649      	mov	r1, r9
 80080e2:	2200      	movs	r2, #0
 80080e4:	f7f8 fa98 	bl	8000618 <__aeabi_dmul>
 80080e8:	4b4a      	ldr	r3, [pc, #296]	; (8008214 <_strtod_l+0x93c>)
 80080ea:	400b      	ands	r3, r1
 80080ec:	4680      	mov	r8, r0
 80080ee:	4689      	mov	r9, r1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f47f ae3f 	bne.w	8007d74 <_strtod_l+0x49c>
 80080f6:	2322      	movs	r3, #34	; 0x22
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	e63b      	b.n	8007d74 <_strtod_l+0x49c>
 80080fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008100:	fa02 f303 	lsl.w	r3, r2, r3
 8008104:	ea03 0808 	and.w	r8, r3, r8
 8008108:	e6e8      	b.n	8007edc <_strtod_l+0x604>
 800810a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800810e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008112:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008116:	36e2      	adds	r6, #226	; 0xe2
 8008118:	fa01 f306 	lsl.w	r3, r1, r6
 800811c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008120:	e748      	b.n	8007fb4 <_strtod_l+0x6dc>
 8008122:	2100      	movs	r1, #0
 8008124:	2301      	movs	r3, #1
 8008126:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800812a:	e743      	b.n	8007fb4 <_strtod_l+0x6dc>
 800812c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800812e:	4632      	mov	r2, r6
 8008130:	4620      	mov	r0, r4
 8008132:	f7ff f961 	bl	80073f8 <__lshift>
 8008136:	9016      	str	r0, [sp, #88]	; 0x58
 8008138:	2800      	cmp	r0, #0
 800813a:	f47f af6b 	bne.w	8008014 <_strtod_l+0x73c>
 800813e:	e60f      	b.n	8007d60 <_strtod_l+0x488>
 8008140:	46ca      	mov	sl, r9
 8008142:	d171      	bne.n	8008228 <_strtod_l+0x950>
 8008144:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008146:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800814a:	b352      	cbz	r2, 80081a2 <_strtod_l+0x8ca>
 800814c:	4a33      	ldr	r2, [pc, #204]	; (800821c <_strtod_l+0x944>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d12a      	bne.n	80081a8 <_strtod_l+0x8d0>
 8008152:	9b04      	ldr	r3, [sp, #16]
 8008154:	4641      	mov	r1, r8
 8008156:	b1fb      	cbz	r3, 8008198 <_strtod_l+0x8c0>
 8008158:	4b2e      	ldr	r3, [pc, #184]	; (8008214 <_strtod_l+0x93c>)
 800815a:	ea09 0303 	and.w	r3, r9, r3
 800815e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008162:	f04f 32ff 	mov.w	r2, #4294967295
 8008166:	d81a      	bhi.n	800819e <_strtod_l+0x8c6>
 8008168:	0d1b      	lsrs	r3, r3, #20
 800816a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800816e:	fa02 f303 	lsl.w	r3, r2, r3
 8008172:	4299      	cmp	r1, r3
 8008174:	d118      	bne.n	80081a8 <_strtod_l+0x8d0>
 8008176:	4b2a      	ldr	r3, [pc, #168]	; (8008220 <_strtod_l+0x948>)
 8008178:	459a      	cmp	sl, r3
 800817a:	d102      	bne.n	8008182 <_strtod_l+0x8aa>
 800817c:	3101      	adds	r1, #1
 800817e:	f43f adef 	beq.w	8007d60 <_strtod_l+0x488>
 8008182:	4b24      	ldr	r3, [pc, #144]	; (8008214 <_strtod_l+0x93c>)
 8008184:	ea0a 0303 	and.w	r3, sl, r3
 8008188:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800818c:	f04f 0800 	mov.w	r8, #0
 8008190:	9b04      	ldr	r3, [sp, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1a2      	bne.n	80080dc <_strtod_l+0x804>
 8008196:	e5ed      	b.n	8007d74 <_strtod_l+0x49c>
 8008198:	f04f 33ff 	mov.w	r3, #4294967295
 800819c:	e7e9      	b.n	8008172 <_strtod_l+0x89a>
 800819e:	4613      	mov	r3, r2
 80081a0:	e7e7      	b.n	8008172 <_strtod_l+0x89a>
 80081a2:	ea53 0308 	orrs.w	r3, r3, r8
 80081a6:	d08a      	beq.n	80080be <_strtod_l+0x7e6>
 80081a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081aa:	b1e3      	cbz	r3, 80081e6 <_strtod_l+0x90e>
 80081ac:	ea13 0f0a 	tst.w	r3, sl
 80081b0:	d0ee      	beq.n	8008190 <_strtod_l+0x8b8>
 80081b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081b4:	9a04      	ldr	r2, [sp, #16]
 80081b6:	4640      	mov	r0, r8
 80081b8:	4649      	mov	r1, r9
 80081ba:	b1c3      	cbz	r3, 80081ee <_strtod_l+0x916>
 80081bc:	f7ff fb6f 	bl	800789e <sulp>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	ec51 0b18 	vmov	r0, r1, d8
 80081c8:	f7f8 f870 	bl	80002ac <__adddf3>
 80081cc:	4680      	mov	r8, r0
 80081ce:	4689      	mov	r9, r1
 80081d0:	e7de      	b.n	8008190 <_strtod_l+0x8b8>
 80081d2:	4013      	ands	r3, r2
 80081d4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80081d8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80081dc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80081e0:	f04f 38ff 	mov.w	r8, #4294967295
 80081e4:	e7d4      	b.n	8008190 <_strtod_l+0x8b8>
 80081e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081e8:	ea13 0f08 	tst.w	r3, r8
 80081ec:	e7e0      	b.n	80081b0 <_strtod_l+0x8d8>
 80081ee:	f7ff fb56 	bl	800789e <sulp>
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	ec51 0b18 	vmov	r0, r1, d8
 80081fa:	f7f8 f855 	bl	80002a8 <__aeabi_dsub>
 80081fe:	2200      	movs	r2, #0
 8008200:	2300      	movs	r3, #0
 8008202:	4680      	mov	r8, r0
 8008204:	4689      	mov	r9, r1
 8008206:	f7f8 fc6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800820a:	2800      	cmp	r0, #0
 800820c:	d0c0      	beq.n	8008190 <_strtod_l+0x8b8>
 800820e:	e618      	b.n	8007e42 <_strtod_l+0x56a>
 8008210:	fffffc02 	.word	0xfffffc02
 8008214:	7ff00000 	.word	0x7ff00000
 8008218:	39500000 	.word	0x39500000
 800821c:	000fffff 	.word	0x000fffff
 8008220:	7fefffff 	.word	0x7fefffff
 8008224:	0800a398 	.word	0x0800a398
 8008228:	4659      	mov	r1, fp
 800822a:	4628      	mov	r0, r5
 800822c:	f7ff fac0 	bl	80077b0 <__ratio>
 8008230:	ec57 6b10 	vmov	r6, r7, d0
 8008234:	ee10 0a10 	vmov	r0, s0
 8008238:	2200      	movs	r2, #0
 800823a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800823e:	4639      	mov	r1, r7
 8008240:	f7f8 fc66 	bl	8000b10 <__aeabi_dcmple>
 8008244:	2800      	cmp	r0, #0
 8008246:	d071      	beq.n	800832c <_strtod_l+0xa54>
 8008248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800824a:	2b00      	cmp	r3, #0
 800824c:	d17c      	bne.n	8008348 <_strtod_l+0xa70>
 800824e:	f1b8 0f00 	cmp.w	r8, #0
 8008252:	d15a      	bne.n	800830a <_strtod_l+0xa32>
 8008254:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008258:	2b00      	cmp	r3, #0
 800825a:	d15d      	bne.n	8008318 <_strtod_l+0xa40>
 800825c:	4b90      	ldr	r3, [pc, #576]	; (80084a0 <_strtod_l+0xbc8>)
 800825e:	2200      	movs	r2, #0
 8008260:	4630      	mov	r0, r6
 8008262:	4639      	mov	r1, r7
 8008264:	f7f8 fc4a 	bl	8000afc <__aeabi_dcmplt>
 8008268:	2800      	cmp	r0, #0
 800826a:	d15c      	bne.n	8008326 <_strtod_l+0xa4e>
 800826c:	4630      	mov	r0, r6
 800826e:	4639      	mov	r1, r7
 8008270:	4b8c      	ldr	r3, [pc, #560]	; (80084a4 <_strtod_l+0xbcc>)
 8008272:	2200      	movs	r2, #0
 8008274:	f7f8 f9d0 	bl	8000618 <__aeabi_dmul>
 8008278:	4606      	mov	r6, r0
 800827a:	460f      	mov	r7, r1
 800827c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008280:	9606      	str	r6, [sp, #24]
 8008282:	9307      	str	r3, [sp, #28]
 8008284:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008288:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800828c:	4b86      	ldr	r3, [pc, #536]	; (80084a8 <_strtod_l+0xbd0>)
 800828e:	ea0a 0303 	and.w	r3, sl, r3
 8008292:	930d      	str	r3, [sp, #52]	; 0x34
 8008294:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008296:	4b85      	ldr	r3, [pc, #532]	; (80084ac <_strtod_l+0xbd4>)
 8008298:	429a      	cmp	r2, r3
 800829a:	f040 8090 	bne.w	80083be <_strtod_l+0xae6>
 800829e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80082a2:	ec49 8b10 	vmov	d0, r8, r9
 80082a6:	f7ff f9b9 	bl	800761c <__ulp>
 80082aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082ae:	ec51 0b10 	vmov	r0, r1, d0
 80082b2:	f7f8 f9b1 	bl	8000618 <__aeabi_dmul>
 80082b6:	4642      	mov	r2, r8
 80082b8:	464b      	mov	r3, r9
 80082ba:	f7f7 fff7 	bl	80002ac <__adddf3>
 80082be:	460b      	mov	r3, r1
 80082c0:	4979      	ldr	r1, [pc, #484]	; (80084a8 <_strtod_l+0xbd0>)
 80082c2:	4a7b      	ldr	r2, [pc, #492]	; (80084b0 <_strtod_l+0xbd8>)
 80082c4:	4019      	ands	r1, r3
 80082c6:	4291      	cmp	r1, r2
 80082c8:	4680      	mov	r8, r0
 80082ca:	d944      	bls.n	8008356 <_strtod_l+0xa7e>
 80082cc:	ee18 2a90 	vmov	r2, s17
 80082d0:	4b78      	ldr	r3, [pc, #480]	; (80084b4 <_strtod_l+0xbdc>)
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d104      	bne.n	80082e0 <_strtod_l+0xa08>
 80082d6:	ee18 3a10 	vmov	r3, s16
 80082da:	3301      	adds	r3, #1
 80082dc:	f43f ad40 	beq.w	8007d60 <_strtod_l+0x488>
 80082e0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80084b4 <_strtod_l+0xbdc>
 80082e4:	f04f 38ff 	mov.w	r8, #4294967295
 80082e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80082ea:	4620      	mov	r0, r4
 80082ec:	f7fe fe6a 	bl	8006fc4 <_Bfree>
 80082f0:	9905      	ldr	r1, [sp, #20]
 80082f2:	4620      	mov	r0, r4
 80082f4:	f7fe fe66 	bl	8006fc4 <_Bfree>
 80082f8:	4659      	mov	r1, fp
 80082fa:	4620      	mov	r0, r4
 80082fc:	f7fe fe62 	bl	8006fc4 <_Bfree>
 8008300:	4629      	mov	r1, r5
 8008302:	4620      	mov	r0, r4
 8008304:	f7fe fe5e 	bl	8006fc4 <_Bfree>
 8008308:	e609      	b.n	8007f1e <_strtod_l+0x646>
 800830a:	f1b8 0f01 	cmp.w	r8, #1
 800830e:	d103      	bne.n	8008318 <_strtod_l+0xa40>
 8008310:	f1b9 0f00 	cmp.w	r9, #0
 8008314:	f43f ad95 	beq.w	8007e42 <_strtod_l+0x56a>
 8008318:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008470 <_strtod_l+0xb98>
 800831c:	4f60      	ldr	r7, [pc, #384]	; (80084a0 <_strtod_l+0xbc8>)
 800831e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008322:	2600      	movs	r6, #0
 8008324:	e7ae      	b.n	8008284 <_strtod_l+0x9ac>
 8008326:	4f5f      	ldr	r7, [pc, #380]	; (80084a4 <_strtod_l+0xbcc>)
 8008328:	2600      	movs	r6, #0
 800832a:	e7a7      	b.n	800827c <_strtod_l+0x9a4>
 800832c:	4b5d      	ldr	r3, [pc, #372]	; (80084a4 <_strtod_l+0xbcc>)
 800832e:	4630      	mov	r0, r6
 8008330:	4639      	mov	r1, r7
 8008332:	2200      	movs	r2, #0
 8008334:	f7f8 f970 	bl	8000618 <__aeabi_dmul>
 8008338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800833a:	4606      	mov	r6, r0
 800833c:	460f      	mov	r7, r1
 800833e:	2b00      	cmp	r3, #0
 8008340:	d09c      	beq.n	800827c <_strtod_l+0x9a4>
 8008342:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008346:	e79d      	b.n	8008284 <_strtod_l+0x9ac>
 8008348:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008478 <_strtod_l+0xba0>
 800834c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008350:	ec57 6b17 	vmov	r6, r7, d7
 8008354:	e796      	b.n	8008284 <_strtod_l+0x9ac>
 8008356:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800835a:	9b04      	ldr	r3, [sp, #16]
 800835c:	46ca      	mov	sl, r9
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1c2      	bne.n	80082e8 <_strtod_l+0xa10>
 8008362:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008368:	0d1b      	lsrs	r3, r3, #20
 800836a:	051b      	lsls	r3, r3, #20
 800836c:	429a      	cmp	r2, r3
 800836e:	d1bb      	bne.n	80082e8 <_strtod_l+0xa10>
 8008370:	4630      	mov	r0, r6
 8008372:	4639      	mov	r1, r7
 8008374:	f7f8 fcb0 	bl	8000cd8 <__aeabi_d2lz>
 8008378:	f7f8 f920 	bl	80005bc <__aeabi_l2d>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	4630      	mov	r0, r6
 8008382:	4639      	mov	r1, r7
 8008384:	f7f7 ff90 	bl	80002a8 <__aeabi_dsub>
 8008388:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800838a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800838e:	ea43 0308 	orr.w	r3, r3, r8
 8008392:	4313      	orrs	r3, r2
 8008394:	4606      	mov	r6, r0
 8008396:	460f      	mov	r7, r1
 8008398:	d054      	beq.n	8008444 <_strtod_l+0xb6c>
 800839a:	a339      	add	r3, pc, #228	; (adr r3, 8008480 <_strtod_l+0xba8>)
 800839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a0:	f7f8 fbac 	bl	8000afc <__aeabi_dcmplt>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	f47f ace5 	bne.w	8007d74 <_strtod_l+0x49c>
 80083aa:	a337      	add	r3, pc, #220	; (adr r3, 8008488 <_strtod_l+0xbb0>)
 80083ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b0:	4630      	mov	r0, r6
 80083b2:	4639      	mov	r1, r7
 80083b4:	f7f8 fbc0 	bl	8000b38 <__aeabi_dcmpgt>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d095      	beq.n	80082e8 <_strtod_l+0xa10>
 80083bc:	e4da      	b.n	8007d74 <_strtod_l+0x49c>
 80083be:	9b04      	ldr	r3, [sp, #16]
 80083c0:	b333      	cbz	r3, 8008410 <_strtod_l+0xb38>
 80083c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80083c8:	d822      	bhi.n	8008410 <_strtod_l+0xb38>
 80083ca:	a331      	add	r3, pc, #196	; (adr r3, 8008490 <_strtod_l+0xbb8>)
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	4630      	mov	r0, r6
 80083d2:	4639      	mov	r1, r7
 80083d4:	f7f8 fb9c 	bl	8000b10 <__aeabi_dcmple>
 80083d8:	b1a0      	cbz	r0, 8008404 <_strtod_l+0xb2c>
 80083da:	4639      	mov	r1, r7
 80083dc:	4630      	mov	r0, r6
 80083de:	f7f8 fbf3 	bl	8000bc8 <__aeabi_d2uiz>
 80083e2:	2801      	cmp	r0, #1
 80083e4:	bf38      	it	cc
 80083e6:	2001      	movcc	r0, #1
 80083e8:	f7f8 f89c 	bl	8000524 <__aeabi_ui2d>
 80083ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083ee:	4606      	mov	r6, r0
 80083f0:	460f      	mov	r7, r1
 80083f2:	bb23      	cbnz	r3, 800843e <_strtod_l+0xb66>
 80083f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083f8:	9010      	str	r0, [sp, #64]	; 0x40
 80083fa:	9311      	str	r3, [sp, #68]	; 0x44
 80083fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008400:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008406:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008408:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800840c:	1a9b      	subs	r3, r3, r2
 800840e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008410:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008414:	eeb0 0a48 	vmov.f32	s0, s16
 8008418:	eef0 0a68 	vmov.f32	s1, s17
 800841c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008420:	f7ff f8fc 	bl	800761c <__ulp>
 8008424:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008428:	ec53 2b10 	vmov	r2, r3, d0
 800842c:	f7f8 f8f4 	bl	8000618 <__aeabi_dmul>
 8008430:	ec53 2b18 	vmov	r2, r3, d8
 8008434:	f7f7 ff3a 	bl	80002ac <__adddf3>
 8008438:	4680      	mov	r8, r0
 800843a:	4689      	mov	r9, r1
 800843c:	e78d      	b.n	800835a <_strtod_l+0xa82>
 800843e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008442:	e7db      	b.n	80083fc <_strtod_l+0xb24>
 8008444:	a314      	add	r3, pc, #80	; (adr r3, 8008498 <_strtod_l+0xbc0>)
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	f7f8 fb57 	bl	8000afc <__aeabi_dcmplt>
 800844e:	e7b3      	b.n	80083b8 <_strtod_l+0xae0>
 8008450:	2300      	movs	r3, #0
 8008452:	930a      	str	r3, [sp, #40]	; 0x28
 8008454:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008456:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008458:	6013      	str	r3, [r2, #0]
 800845a:	f7ff ba7c 	b.w	8007956 <_strtod_l+0x7e>
 800845e:	2a65      	cmp	r2, #101	; 0x65
 8008460:	f43f ab75 	beq.w	8007b4e <_strtod_l+0x276>
 8008464:	2a45      	cmp	r2, #69	; 0x45
 8008466:	f43f ab72 	beq.w	8007b4e <_strtod_l+0x276>
 800846a:	2301      	movs	r3, #1
 800846c:	f7ff bbaa 	b.w	8007bc4 <_strtod_l+0x2ec>
 8008470:	00000000 	.word	0x00000000
 8008474:	bff00000 	.word	0xbff00000
 8008478:	00000000 	.word	0x00000000
 800847c:	3ff00000 	.word	0x3ff00000
 8008480:	94a03595 	.word	0x94a03595
 8008484:	3fdfffff 	.word	0x3fdfffff
 8008488:	35afe535 	.word	0x35afe535
 800848c:	3fe00000 	.word	0x3fe00000
 8008490:	ffc00000 	.word	0xffc00000
 8008494:	41dfffff 	.word	0x41dfffff
 8008498:	94a03595 	.word	0x94a03595
 800849c:	3fcfffff 	.word	0x3fcfffff
 80084a0:	3ff00000 	.word	0x3ff00000
 80084a4:	3fe00000 	.word	0x3fe00000
 80084a8:	7ff00000 	.word	0x7ff00000
 80084ac:	7fe00000 	.word	0x7fe00000
 80084b0:	7c9fffff 	.word	0x7c9fffff
 80084b4:	7fefffff 	.word	0x7fefffff

080084b8 <_strtod_r>:
 80084b8:	4b01      	ldr	r3, [pc, #4]	; (80084c0 <_strtod_r+0x8>)
 80084ba:	f7ff ba0d 	b.w	80078d8 <_strtod_l>
 80084be:	bf00      	nop
 80084c0:	2000006c 	.word	0x2000006c

080084c4 <_strtol_l.constprop.0>:
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ca:	d001      	beq.n	80084d0 <_strtol_l.constprop.0+0xc>
 80084cc:	2b24      	cmp	r3, #36	; 0x24
 80084ce:	d906      	bls.n	80084de <_strtol_l.constprop.0+0x1a>
 80084d0:	f7fd fd88 	bl	8005fe4 <__errno>
 80084d4:	2316      	movs	r3, #22
 80084d6:	6003      	str	r3, [r0, #0]
 80084d8:	2000      	movs	r0, #0
 80084da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80085c4 <_strtol_l.constprop.0+0x100>
 80084e2:	460d      	mov	r5, r1
 80084e4:	462e      	mov	r6, r5
 80084e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084ea:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80084ee:	f017 0708 	ands.w	r7, r7, #8
 80084f2:	d1f7      	bne.n	80084e4 <_strtol_l.constprop.0+0x20>
 80084f4:	2c2d      	cmp	r4, #45	; 0x2d
 80084f6:	d132      	bne.n	800855e <_strtol_l.constprop.0+0x9a>
 80084f8:	782c      	ldrb	r4, [r5, #0]
 80084fa:	2701      	movs	r7, #1
 80084fc:	1cb5      	adds	r5, r6, #2
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d05b      	beq.n	80085ba <_strtol_l.constprop.0+0xf6>
 8008502:	2b10      	cmp	r3, #16
 8008504:	d109      	bne.n	800851a <_strtol_l.constprop.0+0x56>
 8008506:	2c30      	cmp	r4, #48	; 0x30
 8008508:	d107      	bne.n	800851a <_strtol_l.constprop.0+0x56>
 800850a:	782c      	ldrb	r4, [r5, #0]
 800850c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008510:	2c58      	cmp	r4, #88	; 0x58
 8008512:	d14d      	bne.n	80085b0 <_strtol_l.constprop.0+0xec>
 8008514:	786c      	ldrb	r4, [r5, #1]
 8008516:	2310      	movs	r3, #16
 8008518:	3502      	adds	r5, #2
 800851a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800851e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008522:	f04f 0e00 	mov.w	lr, #0
 8008526:	fbb8 f9f3 	udiv	r9, r8, r3
 800852a:	4676      	mov	r6, lr
 800852c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008530:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008534:	f1bc 0f09 	cmp.w	ip, #9
 8008538:	d816      	bhi.n	8008568 <_strtol_l.constprop.0+0xa4>
 800853a:	4664      	mov	r4, ip
 800853c:	42a3      	cmp	r3, r4
 800853e:	dd24      	ble.n	800858a <_strtol_l.constprop.0+0xc6>
 8008540:	f1be 3fff 	cmp.w	lr, #4294967295
 8008544:	d008      	beq.n	8008558 <_strtol_l.constprop.0+0x94>
 8008546:	45b1      	cmp	r9, r6
 8008548:	d31c      	bcc.n	8008584 <_strtol_l.constprop.0+0xc0>
 800854a:	d101      	bne.n	8008550 <_strtol_l.constprop.0+0x8c>
 800854c:	45a2      	cmp	sl, r4
 800854e:	db19      	blt.n	8008584 <_strtol_l.constprop.0+0xc0>
 8008550:	fb06 4603 	mla	r6, r6, r3, r4
 8008554:	f04f 0e01 	mov.w	lr, #1
 8008558:	f815 4b01 	ldrb.w	r4, [r5], #1
 800855c:	e7e8      	b.n	8008530 <_strtol_l.constprop.0+0x6c>
 800855e:	2c2b      	cmp	r4, #43	; 0x2b
 8008560:	bf04      	itt	eq
 8008562:	782c      	ldrbeq	r4, [r5, #0]
 8008564:	1cb5      	addeq	r5, r6, #2
 8008566:	e7ca      	b.n	80084fe <_strtol_l.constprop.0+0x3a>
 8008568:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800856c:	f1bc 0f19 	cmp.w	ip, #25
 8008570:	d801      	bhi.n	8008576 <_strtol_l.constprop.0+0xb2>
 8008572:	3c37      	subs	r4, #55	; 0x37
 8008574:	e7e2      	b.n	800853c <_strtol_l.constprop.0+0x78>
 8008576:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800857a:	f1bc 0f19 	cmp.w	ip, #25
 800857e:	d804      	bhi.n	800858a <_strtol_l.constprop.0+0xc6>
 8008580:	3c57      	subs	r4, #87	; 0x57
 8008582:	e7db      	b.n	800853c <_strtol_l.constprop.0+0x78>
 8008584:	f04f 3eff 	mov.w	lr, #4294967295
 8008588:	e7e6      	b.n	8008558 <_strtol_l.constprop.0+0x94>
 800858a:	f1be 3fff 	cmp.w	lr, #4294967295
 800858e:	d105      	bne.n	800859c <_strtol_l.constprop.0+0xd8>
 8008590:	2322      	movs	r3, #34	; 0x22
 8008592:	6003      	str	r3, [r0, #0]
 8008594:	4646      	mov	r6, r8
 8008596:	b942      	cbnz	r2, 80085aa <_strtol_l.constprop.0+0xe6>
 8008598:	4630      	mov	r0, r6
 800859a:	e79e      	b.n	80084da <_strtol_l.constprop.0+0x16>
 800859c:	b107      	cbz	r7, 80085a0 <_strtol_l.constprop.0+0xdc>
 800859e:	4276      	negs	r6, r6
 80085a0:	2a00      	cmp	r2, #0
 80085a2:	d0f9      	beq.n	8008598 <_strtol_l.constprop.0+0xd4>
 80085a4:	f1be 0f00 	cmp.w	lr, #0
 80085a8:	d000      	beq.n	80085ac <_strtol_l.constprop.0+0xe8>
 80085aa:	1e69      	subs	r1, r5, #1
 80085ac:	6011      	str	r1, [r2, #0]
 80085ae:	e7f3      	b.n	8008598 <_strtol_l.constprop.0+0xd4>
 80085b0:	2430      	movs	r4, #48	; 0x30
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1b1      	bne.n	800851a <_strtol_l.constprop.0+0x56>
 80085b6:	2308      	movs	r3, #8
 80085b8:	e7af      	b.n	800851a <_strtol_l.constprop.0+0x56>
 80085ba:	2c30      	cmp	r4, #48	; 0x30
 80085bc:	d0a5      	beq.n	800850a <_strtol_l.constprop.0+0x46>
 80085be:	230a      	movs	r3, #10
 80085c0:	e7ab      	b.n	800851a <_strtol_l.constprop.0+0x56>
 80085c2:	bf00      	nop
 80085c4:	0800a3c1 	.word	0x0800a3c1

080085c8 <_strtol_r>:
 80085c8:	f7ff bf7c 	b.w	80084c4 <_strtol_l.constprop.0>

080085cc <__ssputs_r>:
 80085cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d0:	688e      	ldr	r6, [r1, #8]
 80085d2:	461f      	mov	r7, r3
 80085d4:	42be      	cmp	r6, r7
 80085d6:	680b      	ldr	r3, [r1, #0]
 80085d8:	4682      	mov	sl, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	4690      	mov	r8, r2
 80085de:	d82c      	bhi.n	800863a <__ssputs_r+0x6e>
 80085e0:	898a      	ldrh	r2, [r1, #12]
 80085e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085e6:	d026      	beq.n	8008636 <__ssputs_r+0x6a>
 80085e8:	6965      	ldr	r5, [r4, #20]
 80085ea:	6909      	ldr	r1, [r1, #16]
 80085ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085f0:	eba3 0901 	sub.w	r9, r3, r1
 80085f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085f8:	1c7b      	adds	r3, r7, #1
 80085fa:	444b      	add	r3, r9
 80085fc:	106d      	asrs	r5, r5, #1
 80085fe:	429d      	cmp	r5, r3
 8008600:	bf38      	it	cc
 8008602:	461d      	movcc	r5, r3
 8008604:	0553      	lsls	r3, r2, #21
 8008606:	d527      	bpl.n	8008658 <__ssputs_r+0x8c>
 8008608:	4629      	mov	r1, r5
 800860a:	f7fe fc0f 	bl	8006e2c <_malloc_r>
 800860e:	4606      	mov	r6, r0
 8008610:	b360      	cbz	r0, 800866c <__ssputs_r+0xa0>
 8008612:	6921      	ldr	r1, [r4, #16]
 8008614:	464a      	mov	r2, r9
 8008616:	f000 fdaf 	bl	8009178 <memcpy>
 800861a:	89a3      	ldrh	r3, [r4, #12]
 800861c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008624:	81a3      	strh	r3, [r4, #12]
 8008626:	6126      	str	r6, [r4, #16]
 8008628:	6165      	str	r5, [r4, #20]
 800862a:	444e      	add	r6, r9
 800862c:	eba5 0509 	sub.w	r5, r5, r9
 8008630:	6026      	str	r6, [r4, #0]
 8008632:	60a5      	str	r5, [r4, #8]
 8008634:	463e      	mov	r6, r7
 8008636:	42be      	cmp	r6, r7
 8008638:	d900      	bls.n	800863c <__ssputs_r+0x70>
 800863a:	463e      	mov	r6, r7
 800863c:	6820      	ldr	r0, [r4, #0]
 800863e:	4632      	mov	r2, r6
 8008640:	4641      	mov	r1, r8
 8008642:	f000 fd5c 	bl	80090fe <memmove>
 8008646:	68a3      	ldr	r3, [r4, #8]
 8008648:	1b9b      	subs	r3, r3, r6
 800864a:	60a3      	str	r3, [r4, #8]
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	4433      	add	r3, r6
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	2000      	movs	r0, #0
 8008654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008658:	462a      	mov	r2, r5
 800865a:	f001 f942 	bl	80098e2 <_realloc_r>
 800865e:	4606      	mov	r6, r0
 8008660:	2800      	cmp	r0, #0
 8008662:	d1e0      	bne.n	8008626 <__ssputs_r+0x5a>
 8008664:	6921      	ldr	r1, [r4, #16]
 8008666:	4650      	mov	r0, sl
 8008668:	f7fe fb6c 	bl	8006d44 <_free_r>
 800866c:	230c      	movs	r3, #12
 800866e:	f8ca 3000 	str.w	r3, [sl]
 8008672:	89a3      	ldrh	r3, [r4, #12]
 8008674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008678:	81a3      	strh	r3, [r4, #12]
 800867a:	f04f 30ff 	mov.w	r0, #4294967295
 800867e:	e7e9      	b.n	8008654 <__ssputs_r+0x88>

08008680 <_svfiprintf_r>:
 8008680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008684:	4698      	mov	r8, r3
 8008686:	898b      	ldrh	r3, [r1, #12]
 8008688:	061b      	lsls	r3, r3, #24
 800868a:	b09d      	sub	sp, #116	; 0x74
 800868c:	4607      	mov	r7, r0
 800868e:	460d      	mov	r5, r1
 8008690:	4614      	mov	r4, r2
 8008692:	d50e      	bpl.n	80086b2 <_svfiprintf_r+0x32>
 8008694:	690b      	ldr	r3, [r1, #16]
 8008696:	b963      	cbnz	r3, 80086b2 <_svfiprintf_r+0x32>
 8008698:	2140      	movs	r1, #64	; 0x40
 800869a:	f7fe fbc7 	bl	8006e2c <_malloc_r>
 800869e:	6028      	str	r0, [r5, #0]
 80086a0:	6128      	str	r0, [r5, #16]
 80086a2:	b920      	cbnz	r0, 80086ae <_svfiprintf_r+0x2e>
 80086a4:	230c      	movs	r3, #12
 80086a6:	603b      	str	r3, [r7, #0]
 80086a8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ac:	e0d0      	b.n	8008850 <_svfiprintf_r+0x1d0>
 80086ae:	2340      	movs	r3, #64	; 0x40
 80086b0:	616b      	str	r3, [r5, #20]
 80086b2:	2300      	movs	r3, #0
 80086b4:	9309      	str	r3, [sp, #36]	; 0x24
 80086b6:	2320      	movs	r3, #32
 80086b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80086c0:	2330      	movs	r3, #48	; 0x30
 80086c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008868 <_svfiprintf_r+0x1e8>
 80086c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086ca:	f04f 0901 	mov.w	r9, #1
 80086ce:	4623      	mov	r3, r4
 80086d0:	469a      	mov	sl, r3
 80086d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086d6:	b10a      	cbz	r2, 80086dc <_svfiprintf_r+0x5c>
 80086d8:	2a25      	cmp	r2, #37	; 0x25
 80086da:	d1f9      	bne.n	80086d0 <_svfiprintf_r+0x50>
 80086dc:	ebba 0b04 	subs.w	fp, sl, r4
 80086e0:	d00b      	beq.n	80086fa <_svfiprintf_r+0x7a>
 80086e2:	465b      	mov	r3, fp
 80086e4:	4622      	mov	r2, r4
 80086e6:	4629      	mov	r1, r5
 80086e8:	4638      	mov	r0, r7
 80086ea:	f7ff ff6f 	bl	80085cc <__ssputs_r>
 80086ee:	3001      	adds	r0, #1
 80086f0:	f000 80a9 	beq.w	8008846 <_svfiprintf_r+0x1c6>
 80086f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086f6:	445a      	add	r2, fp
 80086f8:	9209      	str	r2, [sp, #36]	; 0x24
 80086fa:	f89a 3000 	ldrb.w	r3, [sl]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f000 80a1 	beq.w	8008846 <_svfiprintf_r+0x1c6>
 8008704:	2300      	movs	r3, #0
 8008706:	f04f 32ff 	mov.w	r2, #4294967295
 800870a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800870e:	f10a 0a01 	add.w	sl, sl, #1
 8008712:	9304      	str	r3, [sp, #16]
 8008714:	9307      	str	r3, [sp, #28]
 8008716:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800871a:	931a      	str	r3, [sp, #104]	; 0x68
 800871c:	4654      	mov	r4, sl
 800871e:	2205      	movs	r2, #5
 8008720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008724:	4850      	ldr	r0, [pc, #320]	; (8008868 <_svfiprintf_r+0x1e8>)
 8008726:	f7f7 fd63 	bl	80001f0 <memchr>
 800872a:	9a04      	ldr	r2, [sp, #16]
 800872c:	b9d8      	cbnz	r0, 8008766 <_svfiprintf_r+0xe6>
 800872e:	06d0      	lsls	r0, r2, #27
 8008730:	bf44      	itt	mi
 8008732:	2320      	movmi	r3, #32
 8008734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008738:	0711      	lsls	r1, r2, #28
 800873a:	bf44      	itt	mi
 800873c:	232b      	movmi	r3, #43	; 0x2b
 800873e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008742:	f89a 3000 	ldrb.w	r3, [sl]
 8008746:	2b2a      	cmp	r3, #42	; 0x2a
 8008748:	d015      	beq.n	8008776 <_svfiprintf_r+0xf6>
 800874a:	9a07      	ldr	r2, [sp, #28]
 800874c:	4654      	mov	r4, sl
 800874e:	2000      	movs	r0, #0
 8008750:	f04f 0c0a 	mov.w	ip, #10
 8008754:	4621      	mov	r1, r4
 8008756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800875a:	3b30      	subs	r3, #48	; 0x30
 800875c:	2b09      	cmp	r3, #9
 800875e:	d94d      	bls.n	80087fc <_svfiprintf_r+0x17c>
 8008760:	b1b0      	cbz	r0, 8008790 <_svfiprintf_r+0x110>
 8008762:	9207      	str	r2, [sp, #28]
 8008764:	e014      	b.n	8008790 <_svfiprintf_r+0x110>
 8008766:	eba0 0308 	sub.w	r3, r0, r8
 800876a:	fa09 f303 	lsl.w	r3, r9, r3
 800876e:	4313      	orrs	r3, r2
 8008770:	9304      	str	r3, [sp, #16]
 8008772:	46a2      	mov	sl, r4
 8008774:	e7d2      	b.n	800871c <_svfiprintf_r+0x9c>
 8008776:	9b03      	ldr	r3, [sp, #12]
 8008778:	1d19      	adds	r1, r3, #4
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	9103      	str	r1, [sp, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	bfbb      	ittet	lt
 8008782:	425b      	neglt	r3, r3
 8008784:	f042 0202 	orrlt.w	r2, r2, #2
 8008788:	9307      	strge	r3, [sp, #28]
 800878a:	9307      	strlt	r3, [sp, #28]
 800878c:	bfb8      	it	lt
 800878e:	9204      	strlt	r2, [sp, #16]
 8008790:	7823      	ldrb	r3, [r4, #0]
 8008792:	2b2e      	cmp	r3, #46	; 0x2e
 8008794:	d10c      	bne.n	80087b0 <_svfiprintf_r+0x130>
 8008796:	7863      	ldrb	r3, [r4, #1]
 8008798:	2b2a      	cmp	r3, #42	; 0x2a
 800879a:	d134      	bne.n	8008806 <_svfiprintf_r+0x186>
 800879c:	9b03      	ldr	r3, [sp, #12]
 800879e:	1d1a      	adds	r2, r3, #4
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	9203      	str	r2, [sp, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	bfb8      	it	lt
 80087a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80087ac:	3402      	adds	r4, #2
 80087ae:	9305      	str	r3, [sp, #20]
 80087b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008878 <_svfiprintf_r+0x1f8>
 80087b4:	7821      	ldrb	r1, [r4, #0]
 80087b6:	2203      	movs	r2, #3
 80087b8:	4650      	mov	r0, sl
 80087ba:	f7f7 fd19 	bl	80001f0 <memchr>
 80087be:	b138      	cbz	r0, 80087d0 <_svfiprintf_r+0x150>
 80087c0:	9b04      	ldr	r3, [sp, #16]
 80087c2:	eba0 000a 	sub.w	r0, r0, sl
 80087c6:	2240      	movs	r2, #64	; 0x40
 80087c8:	4082      	lsls	r2, r0
 80087ca:	4313      	orrs	r3, r2
 80087cc:	3401      	adds	r4, #1
 80087ce:	9304      	str	r3, [sp, #16]
 80087d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087d4:	4825      	ldr	r0, [pc, #148]	; (800886c <_svfiprintf_r+0x1ec>)
 80087d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087da:	2206      	movs	r2, #6
 80087dc:	f7f7 fd08 	bl	80001f0 <memchr>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d038      	beq.n	8008856 <_svfiprintf_r+0x1d6>
 80087e4:	4b22      	ldr	r3, [pc, #136]	; (8008870 <_svfiprintf_r+0x1f0>)
 80087e6:	bb1b      	cbnz	r3, 8008830 <_svfiprintf_r+0x1b0>
 80087e8:	9b03      	ldr	r3, [sp, #12]
 80087ea:	3307      	adds	r3, #7
 80087ec:	f023 0307 	bic.w	r3, r3, #7
 80087f0:	3308      	adds	r3, #8
 80087f2:	9303      	str	r3, [sp, #12]
 80087f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f6:	4433      	add	r3, r6
 80087f8:	9309      	str	r3, [sp, #36]	; 0x24
 80087fa:	e768      	b.n	80086ce <_svfiprintf_r+0x4e>
 80087fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008800:	460c      	mov	r4, r1
 8008802:	2001      	movs	r0, #1
 8008804:	e7a6      	b.n	8008754 <_svfiprintf_r+0xd4>
 8008806:	2300      	movs	r3, #0
 8008808:	3401      	adds	r4, #1
 800880a:	9305      	str	r3, [sp, #20]
 800880c:	4619      	mov	r1, r3
 800880e:	f04f 0c0a 	mov.w	ip, #10
 8008812:	4620      	mov	r0, r4
 8008814:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008818:	3a30      	subs	r2, #48	; 0x30
 800881a:	2a09      	cmp	r2, #9
 800881c:	d903      	bls.n	8008826 <_svfiprintf_r+0x1a6>
 800881e:	2b00      	cmp	r3, #0
 8008820:	d0c6      	beq.n	80087b0 <_svfiprintf_r+0x130>
 8008822:	9105      	str	r1, [sp, #20]
 8008824:	e7c4      	b.n	80087b0 <_svfiprintf_r+0x130>
 8008826:	fb0c 2101 	mla	r1, ip, r1, r2
 800882a:	4604      	mov	r4, r0
 800882c:	2301      	movs	r3, #1
 800882e:	e7f0      	b.n	8008812 <_svfiprintf_r+0x192>
 8008830:	ab03      	add	r3, sp, #12
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	462a      	mov	r2, r5
 8008836:	4b0f      	ldr	r3, [pc, #60]	; (8008874 <_svfiprintf_r+0x1f4>)
 8008838:	a904      	add	r1, sp, #16
 800883a:	4638      	mov	r0, r7
 800883c:	f7fc fc56 	bl	80050ec <_printf_float>
 8008840:	1c42      	adds	r2, r0, #1
 8008842:	4606      	mov	r6, r0
 8008844:	d1d6      	bne.n	80087f4 <_svfiprintf_r+0x174>
 8008846:	89ab      	ldrh	r3, [r5, #12]
 8008848:	065b      	lsls	r3, r3, #25
 800884a:	f53f af2d 	bmi.w	80086a8 <_svfiprintf_r+0x28>
 800884e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008850:	b01d      	add	sp, #116	; 0x74
 8008852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008856:	ab03      	add	r3, sp, #12
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	462a      	mov	r2, r5
 800885c:	4b05      	ldr	r3, [pc, #20]	; (8008874 <_svfiprintf_r+0x1f4>)
 800885e:	a904      	add	r1, sp, #16
 8008860:	4638      	mov	r0, r7
 8008862:	f7fc fee7 	bl	8005634 <_printf_i>
 8008866:	e7eb      	b.n	8008840 <_svfiprintf_r+0x1c0>
 8008868:	0800a4c1 	.word	0x0800a4c1
 800886c:	0800a4cb 	.word	0x0800a4cb
 8008870:	080050ed 	.word	0x080050ed
 8008874:	080085cd 	.word	0x080085cd
 8008878:	0800a4c7 	.word	0x0800a4c7

0800887c <_sungetc_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	1c4b      	adds	r3, r1, #1
 8008880:	4614      	mov	r4, r2
 8008882:	d103      	bne.n	800888c <_sungetc_r+0x10>
 8008884:	f04f 35ff 	mov.w	r5, #4294967295
 8008888:	4628      	mov	r0, r5
 800888a:	bd38      	pop	{r3, r4, r5, pc}
 800888c:	8993      	ldrh	r3, [r2, #12]
 800888e:	f023 0320 	bic.w	r3, r3, #32
 8008892:	8193      	strh	r3, [r2, #12]
 8008894:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008896:	6852      	ldr	r2, [r2, #4]
 8008898:	b2cd      	uxtb	r5, r1
 800889a:	b18b      	cbz	r3, 80088c0 <_sungetc_r+0x44>
 800889c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800889e:	4293      	cmp	r3, r2
 80088a0:	dd08      	ble.n	80088b4 <_sungetc_r+0x38>
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	1e5a      	subs	r2, r3, #1
 80088a6:	6022      	str	r2, [r4, #0]
 80088a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80088ac:	6863      	ldr	r3, [r4, #4]
 80088ae:	3301      	adds	r3, #1
 80088b0:	6063      	str	r3, [r4, #4]
 80088b2:	e7e9      	b.n	8008888 <_sungetc_r+0xc>
 80088b4:	4621      	mov	r1, r4
 80088b6:	f000 fbe8 	bl	800908a <__submore>
 80088ba:	2800      	cmp	r0, #0
 80088bc:	d0f1      	beq.n	80088a2 <_sungetc_r+0x26>
 80088be:	e7e1      	b.n	8008884 <_sungetc_r+0x8>
 80088c0:	6921      	ldr	r1, [r4, #16]
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	b151      	cbz	r1, 80088dc <_sungetc_r+0x60>
 80088c6:	4299      	cmp	r1, r3
 80088c8:	d208      	bcs.n	80088dc <_sungetc_r+0x60>
 80088ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80088ce:	42a9      	cmp	r1, r5
 80088d0:	d104      	bne.n	80088dc <_sungetc_r+0x60>
 80088d2:	3b01      	subs	r3, #1
 80088d4:	3201      	adds	r2, #1
 80088d6:	6023      	str	r3, [r4, #0]
 80088d8:	6062      	str	r2, [r4, #4]
 80088da:	e7d5      	b.n	8008888 <_sungetc_r+0xc>
 80088dc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80088e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088e4:	6363      	str	r3, [r4, #52]	; 0x34
 80088e6:	2303      	movs	r3, #3
 80088e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80088ea:	4623      	mov	r3, r4
 80088ec:	f803 5f46 	strb.w	r5, [r3, #70]!
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	2301      	movs	r3, #1
 80088f4:	e7dc      	b.n	80088b0 <_sungetc_r+0x34>

080088f6 <__ssrefill_r>:
 80088f6:	b510      	push	{r4, lr}
 80088f8:	460c      	mov	r4, r1
 80088fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80088fc:	b169      	cbz	r1, 800891a <__ssrefill_r+0x24>
 80088fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008902:	4299      	cmp	r1, r3
 8008904:	d001      	beq.n	800890a <__ssrefill_r+0x14>
 8008906:	f7fe fa1d 	bl	8006d44 <_free_r>
 800890a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800890c:	6063      	str	r3, [r4, #4]
 800890e:	2000      	movs	r0, #0
 8008910:	6360      	str	r0, [r4, #52]	; 0x34
 8008912:	b113      	cbz	r3, 800891a <__ssrefill_r+0x24>
 8008914:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008916:	6023      	str	r3, [r4, #0]
 8008918:	bd10      	pop	{r4, pc}
 800891a:	6923      	ldr	r3, [r4, #16]
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	2300      	movs	r3, #0
 8008920:	6063      	str	r3, [r4, #4]
 8008922:	89a3      	ldrh	r3, [r4, #12]
 8008924:	f043 0320 	orr.w	r3, r3, #32
 8008928:	81a3      	strh	r3, [r4, #12]
 800892a:	f04f 30ff 	mov.w	r0, #4294967295
 800892e:	e7f3      	b.n	8008918 <__ssrefill_r+0x22>

08008930 <__ssvfiscanf_r>:
 8008930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008934:	460c      	mov	r4, r1
 8008936:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800893a:	2100      	movs	r1, #0
 800893c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008940:	49a6      	ldr	r1, [pc, #664]	; (8008bdc <__ssvfiscanf_r+0x2ac>)
 8008942:	91a0      	str	r1, [sp, #640]	; 0x280
 8008944:	f10d 0804 	add.w	r8, sp, #4
 8008948:	49a5      	ldr	r1, [pc, #660]	; (8008be0 <__ssvfiscanf_r+0x2b0>)
 800894a:	4fa6      	ldr	r7, [pc, #664]	; (8008be4 <__ssvfiscanf_r+0x2b4>)
 800894c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008be8 <__ssvfiscanf_r+0x2b8>
 8008950:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008954:	4606      	mov	r6, r0
 8008956:	91a1      	str	r1, [sp, #644]	; 0x284
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	7813      	ldrb	r3, [r2, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	f000 815a 	beq.w	8008c16 <__ssvfiscanf_r+0x2e6>
 8008962:	5cf9      	ldrb	r1, [r7, r3]
 8008964:	f011 0108 	ands.w	r1, r1, #8
 8008968:	f102 0501 	add.w	r5, r2, #1
 800896c:	d019      	beq.n	80089a2 <__ssvfiscanf_r+0x72>
 800896e:	6863      	ldr	r3, [r4, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	dd0f      	ble.n	8008994 <__ssvfiscanf_r+0x64>
 8008974:	6823      	ldr	r3, [r4, #0]
 8008976:	781a      	ldrb	r2, [r3, #0]
 8008978:	5cba      	ldrb	r2, [r7, r2]
 800897a:	0712      	lsls	r2, r2, #28
 800897c:	d401      	bmi.n	8008982 <__ssvfiscanf_r+0x52>
 800897e:	462a      	mov	r2, r5
 8008980:	e7eb      	b.n	800895a <__ssvfiscanf_r+0x2a>
 8008982:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008984:	3201      	adds	r2, #1
 8008986:	9245      	str	r2, [sp, #276]	; 0x114
 8008988:	6862      	ldr	r2, [r4, #4]
 800898a:	3301      	adds	r3, #1
 800898c:	3a01      	subs	r2, #1
 800898e:	6062      	str	r2, [r4, #4]
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	e7ec      	b.n	800896e <__ssvfiscanf_r+0x3e>
 8008994:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008996:	4621      	mov	r1, r4
 8008998:	4630      	mov	r0, r6
 800899a:	4798      	blx	r3
 800899c:	2800      	cmp	r0, #0
 800899e:	d0e9      	beq.n	8008974 <__ssvfiscanf_r+0x44>
 80089a0:	e7ed      	b.n	800897e <__ssvfiscanf_r+0x4e>
 80089a2:	2b25      	cmp	r3, #37	; 0x25
 80089a4:	d012      	beq.n	80089cc <__ssvfiscanf_r+0x9c>
 80089a6:	469a      	mov	sl, r3
 80089a8:	6863      	ldr	r3, [r4, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f340 8091 	ble.w	8008ad2 <__ssvfiscanf_r+0x1a2>
 80089b0:	6822      	ldr	r2, [r4, #0]
 80089b2:	7813      	ldrb	r3, [r2, #0]
 80089b4:	4553      	cmp	r3, sl
 80089b6:	f040 812e 	bne.w	8008c16 <__ssvfiscanf_r+0x2e6>
 80089ba:	6863      	ldr	r3, [r4, #4]
 80089bc:	3b01      	subs	r3, #1
 80089be:	6063      	str	r3, [r4, #4]
 80089c0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80089c2:	3201      	adds	r2, #1
 80089c4:	3301      	adds	r3, #1
 80089c6:	6022      	str	r2, [r4, #0]
 80089c8:	9345      	str	r3, [sp, #276]	; 0x114
 80089ca:	e7d8      	b.n	800897e <__ssvfiscanf_r+0x4e>
 80089cc:	9141      	str	r1, [sp, #260]	; 0x104
 80089ce:	9143      	str	r1, [sp, #268]	; 0x10c
 80089d0:	7853      	ldrb	r3, [r2, #1]
 80089d2:	2b2a      	cmp	r3, #42	; 0x2a
 80089d4:	bf02      	ittt	eq
 80089d6:	2310      	moveq	r3, #16
 80089d8:	1c95      	addeq	r5, r2, #2
 80089da:	9341      	streq	r3, [sp, #260]	; 0x104
 80089dc:	220a      	movs	r2, #10
 80089de:	46aa      	mov	sl, r5
 80089e0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80089e4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80089e8:	2b09      	cmp	r3, #9
 80089ea:	d91c      	bls.n	8008a26 <__ssvfiscanf_r+0xf6>
 80089ec:	487e      	ldr	r0, [pc, #504]	; (8008be8 <__ssvfiscanf_r+0x2b8>)
 80089ee:	2203      	movs	r2, #3
 80089f0:	f7f7 fbfe 	bl	80001f0 <memchr>
 80089f4:	b138      	cbz	r0, 8008a06 <__ssvfiscanf_r+0xd6>
 80089f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80089f8:	eba0 0009 	sub.w	r0, r0, r9
 80089fc:	2301      	movs	r3, #1
 80089fe:	4083      	lsls	r3, r0
 8008a00:	4313      	orrs	r3, r2
 8008a02:	9341      	str	r3, [sp, #260]	; 0x104
 8008a04:	4655      	mov	r5, sl
 8008a06:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008a0a:	2b78      	cmp	r3, #120	; 0x78
 8008a0c:	d806      	bhi.n	8008a1c <__ssvfiscanf_r+0xec>
 8008a0e:	2b57      	cmp	r3, #87	; 0x57
 8008a10:	d810      	bhi.n	8008a34 <__ssvfiscanf_r+0x104>
 8008a12:	2b25      	cmp	r3, #37	; 0x25
 8008a14:	d0c7      	beq.n	80089a6 <__ssvfiscanf_r+0x76>
 8008a16:	d857      	bhi.n	8008ac8 <__ssvfiscanf_r+0x198>
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d065      	beq.n	8008ae8 <__ssvfiscanf_r+0x1b8>
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008a20:	230a      	movs	r3, #10
 8008a22:	9342      	str	r3, [sp, #264]	; 0x108
 8008a24:	e076      	b.n	8008b14 <__ssvfiscanf_r+0x1e4>
 8008a26:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008a28:	fb02 1103 	mla	r1, r2, r3, r1
 8008a2c:	3930      	subs	r1, #48	; 0x30
 8008a2e:	9143      	str	r1, [sp, #268]	; 0x10c
 8008a30:	4655      	mov	r5, sl
 8008a32:	e7d4      	b.n	80089de <__ssvfiscanf_r+0xae>
 8008a34:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008a38:	2a20      	cmp	r2, #32
 8008a3a:	d8ef      	bhi.n	8008a1c <__ssvfiscanf_r+0xec>
 8008a3c:	a101      	add	r1, pc, #4	; (adr r1, 8008a44 <__ssvfiscanf_r+0x114>)
 8008a3e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a42:	bf00      	nop
 8008a44:	08008af7 	.word	0x08008af7
 8008a48:	08008a1d 	.word	0x08008a1d
 8008a4c:	08008a1d 	.word	0x08008a1d
 8008a50:	08008b55 	.word	0x08008b55
 8008a54:	08008a1d 	.word	0x08008a1d
 8008a58:	08008a1d 	.word	0x08008a1d
 8008a5c:	08008a1d 	.word	0x08008a1d
 8008a60:	08008a1d 	.word	0x08008a1d
 8008a64:	08008a1d 	.word	0x08008a1d
 8008a68:	08008a1d 	.word	0x08008a1d
 8008a6c:	08008a1d 	.word	0x08008a1d
 8008a70:	08008b6b 	.word	0x08008b6b
 8008a74:	08008b51 	.word	0x08008b51
 8008a78:	08008acf 	.word	0x08008acf
 8008a7c:	08008acf 	.word	0x08008acf
 8008a80:	08008acf 	.word	0x08008acf
 8008a84:	08008a1d 	.word	0x08008a1d
 8008a88:	08008b0d 	.word	0x08008b0d
 8008a8c:	08008a1d 	.word	0x08008a1d
 8008a90:	08008a1d 	.word	0x08008a1d
 8008a94:	08008a1d 	.word	0x08008a1d
 8008a98:	08008a1d 	.word	0x08008a1d
 8008a9c:	08008b7b 	.word	0x08008b7b
 8008aa0:	08008b49 	.word	0x08008b49
 8008aa4:	08008aef 	.word	0x08008aef
 8008aa8:	08008a1d 	.word	0x08008a1d
 8008aac:	08008a1d 	.word	0x08008a1d
 8008ab0:	08008b77 	.word	0x08008b77
 8008ab4:	08008a1d 	.word	0x08008a1d
 8008ab8:	08008b51 	.word	0x08008b51
 8008abc:	08008a1d 	.word	0x08008a1d
 8008ac0:	08008a1d 	.word	0x08008a1d
 8008ac4:	08008af7 	.word	0x08008af7
 8008ac8:	3b45      	subs	r3, #69	; 0x45
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d8a6      	bhi.n	8008a1c <__ssvfiscanf_r+0xec>
 8008ace:	2305      	movs	r3, #5
 8008ad0:	e01f      	b.n	8008b12 <__ssvfiscanf_r+0x1e2>
 8008ad2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	4798      	blx	r3
 8008ada:	2800      	cmp	r0, #0
 8008adc:	f43f af68 	beq.w	80089b0 <__ssvfiscanf_r+0x80>
 8008ae0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	f040 808d 	bne.w	8008c02 <__ssvfiscanf_r+0x2d2>
 8008ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aec:	e08f      	b.n	8008c0e <__ssvfiscanf_r+0x2de>
 8008aee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008af0:	f042 0220 	orr.w	r2, r2, #32
 8008af4:	9241      	str	r2, [sp, #260]	; 0x104
 8008af6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008afc:	9241      	str	r2, [sp, #260]	; 0x104
 8008afe:	2210      	movs	r2, #16
 8008b00:	2b6f      	cmp	r3, #111	; 0x6f
 8008b02:	9242      	str	r2, [sp, #264]	; 0x108
 8008b04:	bf34      	ite	cc
 8008b06:	2303      	movcc	r3, #3
 8008b08:	2304      	movcs	r3, #4
 8008b0a:	e002      	b.n	8008b12 <__ssvfiscanf_r+0x1e2>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	9342      	str	r3, [sp, #264]	; 0x108
 8008b10:	2303      	movs	r3, #3
 8008b12:	9347      	str	r3, [sp, #284]	; 0x11c
 8008b14:	6863      	ldr	r3, [r4, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	dd3d      	ble.n	8008b96 <__ssvfiscanf_r+0x266>
 8008b1a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008b1c:	0659      	lsls	r1, r3, #25
 8008b1e:	d404      	bmi.n	8008b2a <__ssvfiscanf_r+0x1fa>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	781a      	ldrb	r2, [r3, #0]
 8008b24:	5cba      	ldrb	r2, [r7, r2]
 8008b26:	0712      	lsls	r2, r2, #28
 8008b28:	d43c      	bmi.n	8008ba4 <__ssvfiscanf_r+0x274>
 8008b2a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	dc4b      	bgt.n	8008bc8 <__ssvfiscanf_r+0x298>
 8008b30:	466b      	mov	r3, sp
 8008b32:	4622      	mov	r2, r4
 8008b34:	a941      	add	r1, sp, #260	; 0x104
 8008b36:	4630      	mov	r0, r6
 8008b38:	f000 f872 	bl	8008c20 <_scanf_chars>
 8008b3c:	2801      	cmp	r0, #1
 8008b3e:	d06a      	beq.n	8008c16 <__ssvfiscanf_r+0x2e6>
 8008b40:	2802      	cmp	r0, #2
 8008b42:	f47f af1c 	bne.w	800897e <__ssvfiscanf_r+0x4e>
 8008b46:	e7cb      	b.n	8008ae0 <__ssvfiscanf_r+0x1b0>
 8008b48:	2308      	movs	r3, #8
 8008b4a:	9342      	str	r3, [sp, #264]	; 0x108
 8008b4c:	2304      	movs	r3, #4
 8008b4e:	e7e0      	b.n	8008b12 <__ssvfiscanf_r+0x1e2>
 8008b50:	220a      	movs	r2, #10
 8008b52:	e7d5      	b.n	8008b00 <__ssvfiscanf_r+0x1d0>
 8008b54:	4629      	mov	r1, r5
 8008b56:	4640      	mov	r0, r8
 8008b58:	f000 fa5e 	bl	8009018 <__sccl>
 8008b5c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b62:	9341      	str	r3, [sp, #260]	; 0x104
 8008b64:	4605      	mov	r5, r0
 8008b66:	2301      	movs	r3, #1
 8008b68:	e7d3      	b.n	8008b12 <__ssvfiscanf_r+0x1e2>
 8008b6a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b70:	9341      	str	r3, [sp, #260]	; 0x104
 8008b72:	2300      	movs	r3, #0
 8008b74:	e7cd      	b.n	8008b12 <__ssvfiscanf_r+0x1e2>
 8008b76:	2302      	movs	r3, #2
 8008b78:	e7cb      	b.n	8008b12 <__ssvfiscanf_r+0x1e2>
 8008b7a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008b7c:	06c3      	lsls	r3, r0, #27
 8008b7e:	f53f aefe 	bmi.w	800897e <__ssvfiscanf_r+0x4e>
 8008b82:	9b00      	ldr	r3, [sp, #0]
 8008b84:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008b86:	1d19      	adds	r1, r3, #4
 8008b88:	9100      	str	r1, [sp, #0]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	07c0      	lsls	r0, r0, #31
 8008b8e:	bf4c      	ite	mi
 8008b90:	801a      	strhmi	r2, [r3, #0]
 8008b92:	601a      	strpl	r2, [r3, #0]
 8008b94:	e6f3      	b.n	800897e <__ssvfiscanf_r+0x4e>
 8008b96:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008b98:	4621      	mov	r1, r4
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	4798      	blx	r3
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d0bb      	beq.n	8008b1a <__ssvfiscanf_r+0x1ea>
 8008ba2:	e79d      	b.n	8008ae0 <__ssvfiscanf_r+0x1b0>
 8008ba4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008ba6:	3201      	adds	r2, #1
 8008ba8:	9245      	str	r2, [sp, #276]	; 0x114
 8008baa:	6862      	ldr	r2, [r4, #4]
 8008bac:	3a01      	subs	r2, #1
 8008bae:	2a00      	cmp	r2, #0
 8008bb0:	6062      	str	r2, [r4, #4]
 8008bb2:	dd02      	ble.n	8008bba <__ssvfiscanf_r+0x28a>
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	6023      	str	r3, [r4, #0]
 8008bb8:	e7b2      	b.n	8008b20 <__ssvfiscanf_r+0x1f0>
 8008bba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008bbc:	4621      	mov	r1, r4
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	4798      	blx	r3
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	d0ac      	beq.n	8008b20 <__ssvfiscanf_r+0x1f0>
 8008bc6:	e78b      	b.n	8008ae0 <__ssvfiscanf_r+0x1b0>
 8008bc8:	2b04      	cmp	r3, #4
 8008bca:	dc0f      	bgt.n	8008bec <__ssvfiscanf_r+0x2bc>
 8008bcc:	466b      	mov	r3, sp
 8008bce:	4622      	mov	r2, r4
 8008bd0:	a941      	add	r1, sp, #260	; 0x104
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f000 f87e 	bl	8008cd4 <_scanf_i>
 8008bd8:	e7b0      	b.n	8008b3c <__ssvfiscanf_r+0x20c>
 8008bda:	bf00      	nop
 8008bdc:	0800887d 	.word	0x0800887d
 8008be0:	080088f7 	.word	0x080088f7
 8008be4:	0800a3c1 	.word	0x0800a3c1
 8008be8:	0800a4c7 	.word	0x0800a4c7
 8008bec:	4b0b      	ldr	r3, [pc, #44]	; (8008c1c <__ssvfiscanf_r+0x2ec>)
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f43f aec5 	beq.w	800897e <__ssvfiscanf_r+0x4e>
 8008bf4:	466b      	mov	r3, sp
 8008bf6:	4622      	mov	r2, r4
 8008bf8:	a941      	add	r1, sp, #260	; 0x104
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f7fc fe3c 	bl	8005878 <_scanf_float>
 8008c00:	e79c      	b.n	8008b3c <__ssvfiscanf_r+0x20c>
 8008c02:	89a3      	ldrh	r3, [r4, #12]
 8008c04:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008c08:	bf18      	it	ne
 8008c0a:	f04f 30ff 	movne.w	r0, #4294967295
 8008c0e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c16:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008c18:	e7f9      	b.n	8008c0e <__ssvfiscanf_r+0x2de>
 8008c1a:	bf00      	nop
 8008c1c:	08005879 	.word	0x08005879

08008c20 <_scanf_chars>:
 8008c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c24:	4615      	mov	r5, r2
 8008c26:	688a      	ldr	r2, [r1, #8]
 8008c28:	4680      	mov	r8, r0
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	b932      	cbnz	r2, 8008c3c <_scanf_chars+0x1c>
 8008c2e:	698a      	ldr	r2, [r1, #24]
 8008c30:	2a00      	cmp	r2, #0
 8008c32:	bf0c      	ite	eq
 8008c34:	2201      	moveq	r2, #1
 8008c36:	f04f 32ff 	movne.w	r2, #4294967295
 8008c3a:	608a      	str	r2, [r1, #8]
 8008c3c:	6822      	ldr	r2, [r4, #0]
 8008c3e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008cd0 <_scanf_chars+0xb0>
 8008c42:	06d1      	lsls	r1, r2, #27
 8008c44:	bf5f      	itttt	pl
 8008c46:	681a      	ldrpl	r2, [r3, #0]
 8008c48:	1d11      	addpl	r1, r2, #4
 8008c4a:	6019      	strpl	r1, [r3, #0]
 8008c4c:	6816      	ldrpl	r6, [r2, #0]
 8008c4e:	2700      	movs	r7, #0
 8008c50:	69a0      	ldr	r0, [r4, #24]
 8008c52:	b188      	cbz	r0, 8008c78 <_scanf_chars+0x58>
 8008c54:	2801      	cmp	r0, #1
 8008c56:	d107      	bne.n	8008c68 <_scanf_chars+0x48>
 8008c58:	682a      	ldr	r2, [r5, #0]
 8008c5a:	7811      	ldrb	r1, [r2, #0]
 8008c5c:	6962      	ldr	r2, [r4, #20]
 8008c5e:	5c52      	ldrb	r2, [r2, r1]
 8008c60:	b952      	cbnz	r2, 8008c78 <_scanf_chars+0x58>
 8008c62:	2f00      	cmp	r7, #0
 8008c64:	d031      	beq.n	8008cca <_scanf_chars+0xaa>
 8008c66:	e022      	b.n	8008cae <_scanf_chars+0x8e>
 8008c68:	2802      	cmp	r0, #2
 8008c6a:	d120      	bne.n	8008cae <_scanf_chars+0x8e>
 8008c6c:	682b      	ldr	r3, [r5, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008c74:	071b      	lsls	r3, r3, #28
 8008c76:	d41a      	bmi.n	8008cae <_scanf_chars+0x8e>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	06da      	lsls	r2, r3, #27
 8008c7c:	bf5e      	ittt	pl
 8008c7e:	682b      	ldrpl	r3, [r5, #0]
 8008c80:	781b      	ldrbpl	r3, [r3, #0]
 8008c82:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008c86:	682a      	ldr	r2, [r5, #0]
 8008c88:	686b      	ldr	r3, [r5, #4]
 8008c8a:	3201      	adds	r2, #1
 8008c8c:	602a      	str	r2, [r5, #0]
 8008c8e:	68a2      	ldr	r2, [r4, #8]
 8008c90:	3b01      	subs	r3, #1
 8008c92:	3a01      	subs	r2, #1
 8008c94:	606b      	str	r3, [r5, #4]
 8008c96:	3701      	adds	r7, #1
 8008c98:	60a2      	str	r2, [r4, #8]
 8008c9a:	b142      	cbz	r2, 8008cae <_scanf_chars+0x8e>
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	dcd7      	bgt.n	8008c50 <_scanf_chars+0x30>
 8008ca0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	4640      	mov	r0, r8
 8008ca8:	4798      	blx	r3
 8008caa:	2800      	cmp	r0, #0
 8008cac:	d0d0      	beq.n	8008c50 <_scanf_chars+0x30>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	f013 0310 	ands.w	r3, r3, #16
 8008cb4:	d105      	bne.n	8008cc2 <_scanf_chars+0xa2>
 8008cb6:	68e2      	ldr	r2, [r4, #12]
 8008cb8:	3201      	adds	r2, #1
 8008cba:	60e2      	str	r2, [r4, #12]
 8008cbc:	69a2      	ldr	r2, [r4, #24]
 8008cbe:	b102      	cbz	r2, 8008cc2 <_scanf_chars+0xa2>
 8008cc0:	7033      	strb	r3, [r6, #0]
 8008cc2:	6923      	ldr	r3, [r4, #16]
 8008cc4:	443b      	add	r3, r7
 8008cc6:	6123      	str	r3, [r4, #16]
 8008cc8:	2000      	movs	r0, #0
 8008cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cce:	bf00      	nop
 8008cd0:	0800a3c1 	.word	0x0800a3c1

08008cd4 <_scanf_i>:
 8008cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd8:	4698      	mov	r8, r3
 8008cda:	4b74      	ldr	r3, [pc, #464]	; (8008eac <_scanf_i+0x1d8>)
 8008cdc:	460c      	mov	r4, r1
 8008cde:	4682      	mov	sl, r0
 8008ce0:	4616      	mov	r6, r2
 8008ce2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ce6:	b087      	sub	sp, #28
 8008ce8:	ab03      	add	r3, sp, #12
 8008cea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008cee:	4b70      	ldr	r3, [pc, #448]	; (8008eb0 <_scanf_i+0x1dc>)
 8008cf0:	69a1      	ldr	r1, [r4, #24]
 8008cf2:	4a70      	ldr	r2, [pc, #448]	; (8008eb4 <_scanf_i+0x1e0>)
 8008cf4:	2903      	cmp	r1, #3
 8008cf6:	bf18      	it	ne
 8008cf8:	461a      	movne	r2, r3
 8008cfa:	68a3      	ldr	r3, [r4, #8]
 8008cfc:	9201      	str	r2, [sp, #4]
 8008cfe:	1e5a      	subs	r2, r3, #1
 8008d00:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008d04:	bf88      	it	hi
 8008d06:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008d0a:	4627      	mov	r7, r4
 8008d0c:	bf82      	ittt	hi
 8008d0e:	eb03 0905 	addhi.w	r9, r3, r5
 8008d12:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008d16:	60a3      	strhi	r3, [r4, #8]
 8008d18:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008d1c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008d20:	bf98      	it	ls
 8008d22:	f04f 0900 	movls.w	r9, #0
 8008d26:	6023      	str	r3, [r4, #0]
 8008d28:	463d      	mov	r5, r7
 8008d2a:	f04f 0b00 	mov.w	fp, #0
 8008d2e:	6831      	ldr	r1, [r6, #0]
 8008d30:	ab03      	add	r3, sp, #12
 8008d32:	7809      	ldrb	r1, [r1, #0]
 8008d34:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008d38:	2202      	movs	r2, #2
 8008d3a:	f7f7 fa59 	bl	80001f0 <memchr>
 8008d3e:	b328      	cbz	r0, 8008d8c <_scanf_i+0xb8>
 8008d40:	f1bb 0f01 	cmp.w	fp, #1
 8008d44:	d159      	bne.n	8008dfa <_scanf_i+0x126>
 8008d46:	6862      	ldr	r2, [r4, #4]
 8008d48:	b92a      	cbnz	r2, 8008d56 <_scanf_i+0x82>
 8008d4a:	6822      	ldr	r2, [r4, #0]
 8008d4c:	2308      	movs	r3, #8
 8008d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d52:	6063      	str	r3, [r4, #4]
 8008d54:	6022      	str	r2, [r4, #0]
 8008d56:	6822      	ldr	r2, [r4, #0]
 8008d58:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008d5c:	6022      	str	r2, [r4, #0]
 8008d5e:	68a2      	ldr	r2, [r4, #8]
 8008d60:	1e51      	subs	r1, r2, #1
 8008d62:	60a1      	str	r1, [r4, #8]
 8008d64:	b192      	cbz	r2, 8008d8c <_scanf_i+0xb8>
 8008d66:	6832      	ldr	r2, [r6, #0]
 8008d68:	1c51      	adds	r1, r2, #1
 8008d6a:	6031      	str	r1, [r6, #0]
 8008d6c:	7812      	ldrb	r2, [r2, #0]
 8008d6e:	f805 2b01 	strb.w	r2, [r5], #1
 8008d72:	6872      	ldr	r2, [r6, #4]
 8008d74:	3a01      	subs	r2, #1
 8008d76:	2a00      	cmp	r2, #0
 8008d78:	6072      	str	r2, [r6, #4]
 8008d7a:	dc07      	bgt.n	8008d8c <_scanf_i+0xb8>
 8008d7c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008d80:	4631      	mov	r1, r6
 8008d82:	4650      	mov	r0, sl
 8008d84:	4790      	blx	r2
 8008d86:	2800      	cmp	r0, #0
 8008d88:	f040 8085 	bne.w	8008e96 <_scanf_i+0x1c2>
 8008d8c:	f10b 0b01 	add.w	fp, fp, #1
 8008d90:	f1bb 0f03 	cmp.w	fp, #3
 8008d94:	d1cb      	bne.n	8008d2e <_scanf_i+0x5a>
 8008d96:	6863      	ldr	r3, [r4, #4]
 8008d98:	b90b      	cbnz	r3, 8008d9e <_scanf_i+0xca>
 8008d9a:	230a      	movs	r3, #10
 8008d9c:	6063      	str	r3, [r4, #4]
 8008d9e:	6863      	ldr	r3, [r4, #4]
 8008da0:	4945      	ldr	r1, [pc, #276]	; (8008eb8 <_scanf_i+0x1e4>)
 8008da2:	6960      	ldr	r0, [r4, #20]
 8008da4:	1ac9      	subs	r1, r1, r3
 8008da6:	f000 f937 	bl	8009018 <__sccl>
 8008daa:	f04f 0b00 	mov.w	fp, #0
 8008dae:	68a3      	ldr	r3, [r4, #8]
 8008db0:	6822      	ldr	r2, [r4, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d03d      	beq.n	8008e32 <_scanf_i+0x15e>
 8008db6:	6831      	ldr	r1, [r6, #0]
 8008db8:	6960      	ldr	r0, [r4, #20]
 8008dba:	f891 c000 	ldrb.w	ip, [r1]
 8008dbe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d035      	beq.n	8008e32 <_scanf_i+0x15e>
 8008dc6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008dca:	d124      	bne.n	8008e16 <_scanf_i+0x142>
 8008dcc:	0510      	lsls	r0, r2, #20
 8008dce:	d522      	bpl.n	8008e16 <_scanf_i+0x142>
 8008dd0:	f10b 0b01 	add.w	fp, fp, #1
 8008dd4:	f1b9 0f00 	cmp.w	r9, #0
 8008dd8:	d003      	beq.n	8008de2 <_scanf_i+0x10e>
 8008dda:	3301      	adds	r3, #1
 8008ddc:	f109 39ff 	add.w	r9, r9, #4294967295
 8008de0:	60a3      	str	r3, [r4, #8]
 8008de2:	6873      	ldr	r3, [r6, #4]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	6073      	str	r3, [r6, #4]
 8008dea:	dd1b      	ble.n	8008e24 <_scanf_i+0x150>
 8008dec:	6833      	ldr	r3, [r6, #0]
 8008dee:	3301      	adds	r3, #1
 8008df0:	6033      	str	r3, [r6, #0]
 8008df2:	68a3      	ldr	r3, [r4, #8]
 8008df4:	3b01      	subs	r3, #1
 8008df6:	60a3      	str	r3, [r4, #8]
 8008df8:	e7d9      	b.n	8008dae <_scanf_i+0xda>
 8008dfa:	f1bb 0f02 	cmp.w	fp, #2
 8008dfe:	d1ae      	bne.n	8008d5e <_scanf_i+0x8a>
 8008e00:	6822      	ldr	r2, [r4, #0]
 8008e02:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008e06:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008e0a:	d1bf      	bne.n	8008d8c <_scanf_i+0xb8>
 8008e0c:	2310      	movs	r3, #16
 8008e0e:	6063      	str	r3, [r4, #4]
 8008e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e14:	e7a2      	b.n	8008d5c <_scanf_i+0x88>
 8008e16:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008e1a:	6022      	str	r2, [r4, #0]
 8008e1c:	780b      	ldrb	r3, [r1, #0]
 8008e1e:	f805 3b01 	strb.w	r3, [r5], #1
 8008e22:	e7de      	b.n	8008de2 <_scanf_i+0x10e>
 8008e24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008e28:	4631      	mov	r1, r6
 8008e2a:	4650      	mov	r0, sl
 8008e2c:	4798      	blx	r3
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d0df      	beq.n	8008df2 <_scanf_i+0x11e>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	05d9      	lsls	r1, r3, #23
 8008e36:	d50d      	bpl.n	8008e54 <_scanf_i+0x180>
 8008e38:	42bd      	cmp	r5, r7
 8008e3a:	d909      	bls.n	8008e50 <_scanf_i+0x17c>
 8008e3c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008e40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e44:	4632      	mov	r2, r6
 8008e46:	4650      	mov	r0, sl
 8008e48:	4798      	blx	r3
 8008e4a:	f105 39ff 	add.w	r9, r5, #4294967295
 8008e4e:	464d      	mov	r5, r9
 8008e50:	42bd      	cmp	r5, r7
 8008e52:	d028      	beq.n	8008ea6 <_scanf_i+0x1d2>
 8008e54:	6822      	ldr	r2, [r4, #0]
 8008e56:	f012 0210 	ands.w	r2, r2, #16
 8008e5a:	d113      	bne.n	8008e84 <_scanf_i+0x1b0>
 8008e5c:	702a      	strb	r2, [r5, #0]
 8008e5e:	6863      	ldr	r3, [r4, #4]
 8008e60:	9e01      	ldr	r6, [sp, #4]
 8008e62:	4639      	mov	r1, r7
 8008e64:	4650      	mov	r0, sl
 8008e66:	47b0      	blx	r6
 8008e68:	f8d8 3000 	ldr.w	r3, [r8]
 8008e6c:	6821      	ldr	r1, [r4, #0]
 8008e6e:	1d1a      	adds	r2, r3, #4
 8008e70:	f8c8 2000 	str.w	r2, [r8]
 8008e74:	f011 0f20 	tst.w	r1, #32
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	d00f      	beq.n	8008e9c <_scanf_i+0x1c8>
 8008e7c:	6018      	str	r0, [r3, #0]
 8008e7e:	68e3      	ldr	r3, [r4, #12]
 8008e80:	3301      	adds	r3, #1
 8008e82:	60e3      	str	r3, [r4, #12]
 8008e84:	6923      	ldr	r3, [r4, #16]
 8008e86:	1bed      	subs	r5, r5, r7
 8008e88:	445d      	add	r5, fp
 8008e8a:	442b      	add	r3, r5
 8008e8c:	6123      	str	r3, [r4, #16]
 8008e8e:	2000      	movs	r0, #0
 8008e90:	b007      	add	sp, #28
 8008e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e96:	f04f 0b00 	mov.w	fp, #0
 8008e9a:	e7ca      	b.n	8008e32 <_scanf_i+0x15e>
 8008e9c:	07ca      	lsls	r2, r1, #31
 8008e9e:	bf4c      	ite	mi
 8008ea0:	8018      	strhmi	r0, [r3, #0]
 8008ea2:	6018      	strpl	r0, [r3, #0]
 8008ea4:	e7eb      	b.n	8008e7e <_scanf_i+0x1aa>
 8008ea6:	2001      	movs	r0, #1
 8008ea8:	e7f2      	b.n	8008e90 <_scanf_i+0x1bc>
 8008eaa:	bf00      	nop
 8008eac:	0800a128 	.word	0x0800a128
 8008eb0:	08009a25 	.word	0x08009a25
 8008eb4:	080085c9 	.word	0x080085c9
 8008eb8:	0800a4e2 	.word	0x0800a4e2

08008ebc <__sflush_r>:
 8008ebc:	898a      	ldrh	r2, [r1, #12]
 8008ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec2:	4605      	mov	r5, r0
 8008ec4:	0710      	lsls	r0, r2, #28
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	d458      	bmi.n	8008f7c <__sflush_r+0xc0>
 8008eca:	684b      	ldr	r3, [r1, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	dc05      	bgt.n	8008edc <__sflush_r+0x20>
 8008ed0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	dc02      	bgt.n	8008edc <__sflush_r+0x20>
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008edc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ede:	2e00      	cmp	r6, #0
 8008ee0:	d0f9      	beq.n	8008ed6 <__sflush_r+0x1a>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ee8:	682f      	ldr	r7, [r5, #0]
 8008eea:	6a21      	ldr	r1, [r4, #32]
 8008eec:	602b      	str	r3, [r5, #0]
 8008eee:	d032      	beq.n	8008f56 <__sflush_r+0x9a>
 8008ef0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	075a      	lsls	r2, r3, #29
 8008ef6:	d505      	bpl.n	8008f04 <__sflush_r+0x48>
 8008ef8:	6863      	ldr	r3, [r4, #4]
 8008efa:	1ac0      	subs	r0, r0, r3
 8008efc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008efe:	b10b      	cbz	r3, 8008f04 <__sflush_r+0x48>
 8008f00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f02:	1ac0      	subs	r0, r0, r3
 8008f04:	2300      	movs	r3, #0
 8008f06:	4602      	mov	r2, r0
 8008f08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f0a:	6a21      	ldr	r1, [r4, #32]
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	47b0      	blx	r6
 8008f10:	1c43      	adds	r3, r0, #1
 8008f12:	89a3      	ldrh	r3, [r4, #12]
 8008f14:	d106      	bne.n	8008f24 <__sflush_r+0x68>
 8008f16:	6829      	ldr	r1, [r5, #0]
 8008f18:	291d      	cmp	r1, #29
 8008f1a:	d82b      	bhi.n	8008f74 <__sflush_r+0xb8>
 8008f1c:	4a29      	ldr	r2, [pc, #164]	; (8008fc4 <__sflush_r+0x108>)
 8008f1e:	410a      	asrs	r2, r1
 8008f20:	07d6      	lsls	r6, r2, #31
 8008f22:	d427      	bmi.n	8008f74 <__sflush_r+0xb8>
 8008f24:	2200      	movs	r2, #0
 8008f26:	6062      	str	r2, [r4, #4]
 8008f28:	04d9      	lsls	r1, r3, #19
 8008f2a:	6922      	ldr	r2, [r4, #16]
 8008f2c:	6022      	str	r2, [r4, #0]
 8008f2e:	d504      	bpl.n	8008f3a <__sflush_r+0x7e>
 8008f30:	1c42      	adds	r2, r0, #1
 8008f32:	d101      	bne.n	8008f38 <__sflush_r+0x7c>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	b903      	cbnz	r3, 8008f3a <__sflush_r+0x7e>
 8008f38:	6560      	str	r0, [r4, #84]	; 0x54
 8008f3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f3c:	602f      	str	r7, [r5, #0]
 8008f3e:	2900      	cmp	r1, #0
 8008f40:	d0c9      	beq.n	8008ed6 <__sflush_r+0x1a>
 8008f42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f46:	4299      	cmp	r1, r3
 8008f48:	d002      	beq.n	8008f50 <__sflush_r+0x94>
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	f7fd fefa 	bl	8006d44 <_free_r>
 8008f50:	2000      	movs	r0, #0
 8008f52:	6360      	str	r0, [r4, #52]	; 0x34
 8008f54:	e7c0      	b.n	8008ed8 <__sflush_r+0x1c>
 8008f56:	2301      	movs	r3, #1
 8008f58:	4628      	mov	r0, r5
 8008f5a:	47b0      	blx	r6
 8008f5c:	1c41      	adds	r1, r0, #1
 8008f5e:	d1c8      	bne.n	8008ef2 <__sflush_r+0x36>
 8008f60:	682b      	ldr	r3, [r5, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d0c5      	beq.n	8008ef2 <__sflush_r+0x36>
 8008f66:	2b1d      	cmp	r3, #29
 8008f68:	d001      	beq.n	8008f6e <__sflush_r+0xb2>
 8008f6a:	2b16      	cmp	r3, #22
 8008f6c:	d101      	bne.n	8008f72 <__sflush_r+0xb6>
 8008f6e:	602f      	str	r7, [r5, #0]
 8008f70:	e7b1      	b.n	8008ed6 <__sflush_r+0x1a>
 8008f72:	89a3      	ldrh	r3, [r4, #12]
 8008f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f78:	81a3      	strh	r3, [r4, #12]
 8008f7a:	e7ad      	b.n	8008ed8 <__sflush_r+0x1c>
 8008f7c:	690f      	ldr	r7, [r1, #16]
 8008f7e:	2f00      	cmp	r7, #0
 8008f80:	d0a9      	beq.n	8008ed6 <__sflush_r+0x1a>
 8008f82:	0793      	lsls	r3, r2, #30
 8008f84:	680e      	ldr	r6, [r1, #0]
 8008f86:	bf08      	it	eq
 8008f88:	694b      	ldreq	r3, [r1, #20]
 8008f8a:	600f      	str	r7, [r1, #0]
 8008f8c:	bf18      	it	ne
 8008f8e:	2300      	movne	r3, #0
 8008f90:	eba6 0807 	sub.w	r8, r6, r7
 8008f94:	608b      	str	r3, [r1, #8]
 8008f96:	f1b8 0f00 	cmp.w	r8, #0
 8008f9a:	dd9c      	ble.n	8008ed6 <__sflush_r+0x1a>
 8008f9c:	6a21      	ldr	r1, [r4, #32]
 8008f9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fa0:	4643      	mov	r3, r8
 8008fa2:	463a      	mov	r2, r7
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	47b0      	blx	r6
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	dc06      	bgt.n	8008fba <__sflush_r+0xfe>
 8008fac:	89a3      	ldrh	r3, [r4, #12]
 8008fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fb2:	81a3      	strh	r3, [r4, #12]
 8008fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb8:	e78e      	b.n	8008ed8 <__sflush_r+0x1c>
 8008fba:	4407      	add	r7, r0
 8008fbc:	eba8 0800 	sub.w	r8, r8, r0
 8008fc0:	e7e9      	b.n	8008f96 <__sflush_r+0xda>
 8008fc2:	bf00      	nop
 8008fc4:	dfbffffe 	.word	0xdfbffffe

08008fc8 <_fflush_r>:
 8008fc8:	b538      	push	{r3, r4, r5, lr}
 8008fca:	690b      	ldr	r3, [r1, #16]
 8008fcc:	4605      	mov	r5, r0
 8008fce:	460c      	mov	r4, r1
 8008fd0:	b913      	cbnz	r3, 8008fd8 <_fflush_r+0x10>
 8008fd2:	2500      	movs	r5, #0
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	bd38      	pop	{r3, r4, r5, pc}
 8008fd8:	b118      	cbz	r0, 8008fe2 <_fflush_r+0x1a>
 8008fda:	6a03      	ldr	r3, [r0, #32]
 8008fdc:	b90b      	cbnz	r3, 8008fe2 <_fflush_r+0x1a>
 8008fde:	f7fc fee7 	bl	8005db0 <__sinit>
 8008fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0f3      	beq.n	8008fd2 <_fflush_r+0xa>
 8008fea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fec:	07d0      	lsls	r0, r2, #31
 8008fee:	d404      	bmi.n	8008ffa <_fflush_r+0x32>
 8008ff0:	0599      	lsls	r1, r3, #22
 8008ff2:	d402      	bmi.n	8008ffa <_fflush_r+0x32>
 8008ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ff6:	f7fd f820 	bl	800603a <__retarget_lock_acquire_recursive>
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	4621      	mov	r1, r4
 8008ffe:	f7ff ff5d 	bl	8008ebc <__sflush_r>
 8009002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009004:	07da      	lsls	r2, r3, #31
 8009006:	4605      	mov	r5, r0
 8009008:	d4e4      	bmi.n	8008fd4 <_fflush_r+0xc>
 800900a:	89a3      	ldrh	r3, [r4, #12]
 800900c:	059b      	lsls	r3, r3, #22
 800900e:	d4e1      	bmi.n	8008fd4 <_fflush_r+0xc>
 8009010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009012:	f7fd f813 	bl	800603c <__retarget_lock_release_recursive>
 8009016:	e7dd      	b.n	8008fd4 <_fflush_r+0xc>

08009018 <__sccl>:
 8009018:	b570      	push	{r4, r5, r6, lr}
 800901a:	780b      	ldrb	r3, [r1, #0]
 800901c:	4604      	mov	r4, r0
 800901e:	2b5e      	cmp	r3, #94	; 0x5e
 8009020:	bf0b      	itete	eq
 8009022:	784b      	ldrbeq	r3, [r1, #1]
 8009024:	1c4a      	addne	r2, r1, #1
 8009026:	1c8a      	addeq	r2, r1, #2
 8009028:	2100      	movne	r1, #0
 800902a:	bf08      	it	eq
 800902c:	2101      	moveq	r1, #1
 800902e:	3801      	subs	r0, #1
 8009030:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009034:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009038:	42a8      	cmp	r0, r5
 800903a:	d1fb      	bne.n	8009034 <__sccl+0x1c>
 800903c:	b90b      	cbnz	r3, 8009042 <__sccl+0x2a>
 800903e:	1e50      	subs	r0, r2, #1
 8009040:	bd70      	pop	{r4, r5, r6, pc}
 8009042:	f081 0101 	eor.w	r1, r1, #1
 8009046:	54e1      	strb	r1, [r4, r3]
 8009048:	4610      	mov	r0, r2
 800904a:	4602      	mov	r2, r0
 800904c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009050:	2d2d      	cmp	r5, #45	; 0x2d
 8009052:	d005      	beq.n	8009060 <__sccl+0x48>
 8009054:	2d5d      	cmp	r5, #93	; 0x5d
 8009056:	d016      	beq.n	8009086 <__sccl+0x6e>
 8009058:	2d00      	cmp	r5, #0
 800905a:	d0f1      	beq.n	8009040 <__sccl+0x28>
 800905c:	462b      	mov	r3, r5
 800905e:	e7f2      	b.n	8009046 <__sccl+0x2e>
 8009060:	7846      	ldrb	r6, [r0, #1]
 8009062:	2e5d      	cmp	r6, #93	; 0x5d
 8009064:	d0fa      	beq.n	800905c <__sccl+0x44>
 8009066:	42b3      	cmp	r3, r6
 8009068:	dcf8      	bgt.n	800905c <__sccl+0x44>
 800906a:	3002      	adds	r0, #2
 800906c:	461a      	mov	r2, r3
 800906e:	3201      	adds	r2, #1
 8009070:	4296      	cmp	r6, r2
 8009072:	54a1      	strb	r1, [r4, r2]
 8009074:	dcfb      	bgt.n	800906e <__sccl+0x56>
 8009076:	1af2      	subs	r2, r6, r3
 8009078:	3a01      	subs	r2, #1
 800907a:	1c5d      	adds	r5, r3, #1
 800907c:	42b3      	cmp	r3, r6
 800907e:	bfa8      	it	ge
 8009080:	2200      	movge	r2, #0
 8009082:	18ab      	adds	r3, r5, r2
 8009084:	e7e1      	b.n	800904a <__sccl+0x32>
 8009086:	4610      	mov	r0, r2
 8009088:	e7da      	b.n	8009040 <__sccl+0x28>

0800908a <__submore>:
 800908a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800908e:	460c      	mov	r4, r1
 8009090:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009092:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009096:	4299      	cmp	r1, r3
 8009098:	d11d      	bne.n	80090d6 <__submore+0x4c>
 800909a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800909e:	f7fd fec5 	bl	8006e2c <_malloc_r>
 80090a2:	b918      	cbnz	r0, 80090ac <__submore+0x22>
 80090a4:	f04f 30ff 	mov.w	r0, #4294967295
 80090a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80090b2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80090b6:	6360      	str	r0, [r4, #52]	; 0x34
 80090b8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80090bc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80090c0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80090c4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80090c8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80090cc:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80090d0:	6020      	str	r0, [r4, #0]
 80090d2:	2000      	movs	r0, #0
 80090d4:	e7e8      	b.n	80090a8 <__submore+0x1e>
 80090d6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80090d8:	0077      	lsls	r7, r6, #1
 80090da:	463a      	mov	r2, r7
 80090dc:	f000 fc01 	bl	80098e2 <_realloc_r>
 80090e0:	4605      	mov	r5, r0
 80090e2:	2800      	cmp	r0, #0
 80090e4:	d0de      	beq.n	80090a4 <__submore+0x1a>
 80090e6:	eb00 0806 	add.w	r8, r0, r6
 80090ea:	4601      	mov	r1, r0
 80090ec:	4632      	mov	r2, r6
 80090ee:	4640      	mov	r0, r8
 80090f0:	f000 f842 	bl	8009178 <memcpy>
 80090f4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80090f8:	f8c4 8000 	str.w	r8, [r4]
 80090fc:	e7e9      	b.n	80090d2 <__submore+0x48>

080090fe <memmove>:
 80090fe:	4288      	cmp	r0, r1
 8009100:	b510      	push	{r4, lr}
 8009102:	eb01 0402 	add.w	r4, r1, r2
 8009106:	d902      	bls.n	800910e <memmove+0x10>
 8009108:	4284      	cmp	r4, r0
 800910a:	4623      	mov	r3, r4
 800910c:	d807      	bhi.n	800911e <memmove+0x20>
 800910e:	1e43      	subs	r3, r0, #1
 8009110:	42a1      	cmp	r1, r4
 8009112:	d008      	beq.n	8009126 <memmove+0x28>
 8009114:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009118:	f803 2f01 	strb.w	r2, [r3, #1]!
 800911c:	e7f8      	b.n	8009110 <memmove+0x12>
 800911e:	4402      	add	r2, r0
 8009120:	4601      	mov	r1, r0
 8009122:	428a      	cmp	r2, r1
 8009124:	d100      	bne.n	8009128 <memmove+0x2a>
 8009126:	bd10      	pop	{r4, pc}
 8009128:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800912c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009130:	e7f7      	b.n	8009122 <memmove+0x24>

08009132 <strncmp>:
 8009132:	b510      	push	{r4, lr}
 8009134:	b16a      	cbz	r2, 8009152 <strncmp+0x20>
 8009136:	3901      	subs	r1, #1
 8009138:	1884      	adds	r4, r0, r2
 800913a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800913e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009142:	429a      	cmp	r2, r3
 8009144:	d103      	bne.n	800914e <strncmp+0x1c>
 8009146:	42a0      	cmp	r0, r4
 8009148:	d001      	beq.n	800914e <strncmp+0x1c>
 800914a:	2a00      	cmp	r2, #0
 800914c:	d1f5      	bne.n	800913a <strncmp+0x8>
 800914e:	1ad0      	subs	r0, r2, r3
 8009150:	bd10      	pop	{r4, pc}
 8009152:	4610      	mov	r0, r2
 8009154:	e7fc      	b.n	8009150 <strncmp+0x1e>
	...

08009158 <_sbrk_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4d06      	ldr	r5, [pc, #24]	; (8009174 <_sbrk_r+0x1c>)
 800915c:	2300      	movs	r3, #0
 800915e:	4604      	mov	r4, r0
 8009160:	4608      	mov	r0, r1
 8009162:	602b      	str	r3, [r5, #0]
 8009164:	f7f8 fd86 	bl	8001c74 <_sbrk>
 8009168:	1c43      	adds	r3, r0, #1
 800916a:	d102      	bne.n	8009172 <_sbrk_r+0x1a>
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	b103      	cbz	r3, 8009172 <_sbrk_r+0x1a>
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	20000ac8 	.word	0x20000ac8

08009178 <memcpy>:
 8009178:	440a      	add	r2, r1
 800917a:	4291      	cmp	r1, r2
 800917c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009180:	d100      	bne.n	8009184 <memcpy+0xc>
 8009182:	4770      	bx	lr
 8009184:	b510      	push	{r4, lr}
 8009186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800918a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800918e:	4291      	cmp	r1, r2
 8009190:	d1f9      	bne.n	8009186 <memcpy+0xe>
 8009192:	bd10      	pop	{r4, pc}
 8009194:	0000      	movs	r0, r0
	...

08009198 <nan>:
 8009198:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80091a0 <nan+0x8>
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	00000000 	.word	0x00000000
 80091a4:	7ff80000 	.word	0x7ff80000

080091a8 <__assert_func>:
 80091a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091aa:	4614      	mov	r4, r2
 80091ac:	461a      	mov	r2, r3
 80091ae:	4b09      	ldr	r3, [pc, #36]	; (80091d4 <__assert_func+0x2c>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4605      	mov	r5, r0
 80091b4:	68d8      	ldr	r0, [r3, #12]
 80091b6:	b14c      	cbz	r4, 80091cc <__assert_func+0x24>
 80091b8:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <__assert_func+0x30>)
 80091ba:	9100      	str	r1, [sp, #0]
 80091bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091c0:	4906      	ldr	r1, [pc, #24]	; (80091dc <__assert_func+0x34>)
 80091c2:	462b      	mov	r3, r5
 80091c4:	f000 fc3e 	bl	8009a44 <fiprintf>
 80091c8:	f000 fc4e 	bl	8009a68 <abort>
 80091cc:	4b04      	ldr	r3, [pc, #16]	; (80091e0 <__assert_func+0x38>)
 80091ce:	461c      	mov	r4, r3
 80091d0:	e7f3      	b.n	80091ba <__assert_func+0x12>
 80091d2:	bf00      	nop
 80091d4:	20000068 	.word	0x20000068
 80091d8:	0800a4f5 	.word	0x0800a4f5
 80091dc:	0800a502 	.word	0x0800a502
 80091e0:	0800a530 	.word	0x0800a530

080091e4 <_calloc_r>:
 80091e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091e6:	fba1 2402 	umull	r2, r4, r1, r2
 80091ea:	b94c      	cbnz	r4, 8009200 <_calloc_r+0x1c>
 80091ec:	4611      	mov	r1, r2
 80091ee:	9201      	str	r2, [sp, #4]
 80091f0:	f7fd fe1c 	bl	8006e2c <_malloc_r>
 80091f4:	9a01      	ldr	r2, [sp, #4]
 80091f6:	4605      	mov	r5, r0
 80091f8:	b930      	cbnz	r0, 8009208 <_calloc_r+0x24>
 80091fa:	4628      	mov	r0, r5
 80091fc:	b003      	add	sp, #12
 80091fe:	bd30      	pop	{r4, r5, pc}
 8009200:	220c      	movs	r2, #12
 8009202:	6002      	str	r2, [r0, #0]
 8009204:	2500      	movs	r5, #0
 8009206:	e7f8      	b.n	80091fa <_calloc_r+0x16>
 8009208:	4621      	mov	r1, r4
 800920a:	f7fc fe98 	bl	8005f3e <memset>
 800920e:	e7f4      	b.n	80091fa <_calloc_r+0x16>

08009210 <rshift>:
 8009210:	6903      	ldr	r3, [r0, #16]
 8009212:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009216:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800921a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800921e:	f100 0414 	add.w	r4, r0, #20
 8009222:	dd45      	ble.n	80092b0 <rshift+0xa0>
 8009224:	f011 011f 	ands.w	r1, r1, #31
 8009228:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800922c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009230:	d10c      	bne.n	800924c <rshift+0x3c>
 8009232:	f100 0710 	add.w	r7, r0, #16
 8009236:	4629      	mov	r1, r5
 8009238:	42b1      	cmp	r1, r6
 800923a:	d334      	bcc.n	80092a6 <rshift+0x96>
 800923c:	1a9b      	subs	r3, r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	1eea      	subs	r2, r5, #3
 8009242:	4296      	cmp	r6, r2
 8009244:	bf38      	it	cc
 8009246:	2300      	movcc	r3, #0
 8009248:	4423      	add	r3, r4
 800924a:	e015      	b.n	8009278 <rshift+0x68>
 800924c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009250:	f1c1 0820 	rsb	r8, r1, #32
 8009254:	40cf      	lsrs	r7, r1
 8009256:	f105 0e04 	add.w	lr, r5, #4
 800925a:	46a1      	mov	r9, r4
 800925c:	4576      	cmp	r6, lr
 800925e:	46f4      	mov	ip, lr
 8009260:	d815      	bhi.n	800928e <rshift+0x7e>
 8009262:	1a9a      	subs	r2, r3, r2
 8009264:	0092      	lsls	r2, r2, #2
 8009266:	3a04      	subs	r2, #4
 8009268:	3501      	adds	r5, #1
 800926a:	42ae      	cmp	r6, r5
 800926c:	bf38      	it	cc
 800926e:	2200      	movcc	r2, #0
 8009270:	18a3      	adds	r3, r4, r2
 8009272:	50a7      	str	r7, [r4, r2]
 8009274:	b107      	cbz	r7, 8009278 <rshift+0x68>
 8009276:	3304      	adds	r3, #4
 8009278:	1b1a      	subs	r2, r3, r4
 800927a:	42a3      	cmp	r3, r4
 800927c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009280:	bf08      	it	eq
 8009282:	2300      	moveq	r3, #0
 8009284:	6102      	str	r2, [r0, #16]
 8009286:	bf08      	it	eq
 8009288:	6143      	streq	r3, [r0, #20]
 800928a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800928e:	f8dc c000 	ldr.w	ip, [ip]
 8009292:	fa0c fc08 	lsl.w	ip, ip, r8
 8009296:	ea4c 0707 	orr.w	r7, ip, r7
 800929a:	f849 7b04 	str.w	r7, [r9], #4
 800929e:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092a2:	40cf      	lsrs	r7, r1
 80092a4:	e7da      	b.n	800925c <rshift+0x4c>
 80092a6:	f851 cb04 	ldr.w	ip, [r1], #4
 80092aa:	f847 cf04 	str.w	ip, [r7, #4]!
 80092ae:	e7c3      	b.n	8009238 <rshift+0x28>
 80092b0:	4623      	mov	r3, r4
 80092b2:	e7e1      	b.n	8009278 <rshift+0x68>

080092b4 <__hexdig_fun>:
 80092b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80092b8:	2b09      	cmp	r3, #9
 80092ba:	d802      	bhi.n	80092c2 <__hexdig_fun+0xe>
 80092bc:	3820      	subs	r0, #32
 80092be:	b2c0      	uxtb	r0, r0
 80092c0:	4770      	bx	lr
 80092c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80092c6:	2b05      	cmp	r3, #5
 80092c8:	d801      	bhi.n	80092ce <__hexdig_fun+0x1a>
 80092ca:	3847      	subs	r0, #71	; 0x47
 80092cc:	e7f7      	b.n	80092be <__hexdig_fun+0xa>
 80092ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80092d2:	2b05      	cmp	r3, #5
 80092d4:	d801      	bhi.n	80092da <__hexdig_fun+0x26>
 80092d6:	3827      	subs	r0, #39	; 0x27
 80092d8:	e7f1      	b.n	80092be <__hexdig_fun+0xa>
 80092da:	2000      	movs	r0, #0
 80092dc:	4770      	bx	lr
	...

080092e0 <__gethex>:
 80092e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e4:	4617      	mov	r7, r2
 80092e6:	680a      	ldr	r2, [r1, #0]
 80092e8:	b085      	sub	sp, #20
 80092ea:	f102 0b02 	add.w	fp, r2, #2
 80092ee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80092f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80092f6:	4681      	mov	r9, r0
 80092f8:	468a      	mov	sl, r1
 80092fa:	9302      	str	r3, [sp, #8]
 80092fc:	32fe      	adds	r2, #254	; 0xfe
 80092fe:	eb02 030b 	add.w	r3, r2, fp
 8009302:	46d8      	mov	r8, fp
 8009304:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009308:	9301      	str	r3, [sp, #4]
 800930a:	2830      	cmp	r0, #48	; 0x30
 800930c:	d0f7      	beq.n	80092fe <__gethex+0x1e>
 800930e:	f7ff ffd1 	bl	80092b4 <__hexdig_fun>
 8009312:	4604      	mov	r4, r0
 8009314:	2800      	cmp	r0, #0
 8009316:	d138      	bne.n	800938a <__gethex+0xaa>
 8009318:	49a7      	ldr	r1, [pc, #668]	; (80095b8 <__gethex+0x2d8>)
 800931a:	2201      	movs	r2, #1
 800931c:	4640      	mov	r0, r8
 800931e:	f7ff ff08 	bl	8009132 <strncmp>
 8009322:	4606      	mov	r6, r0
 8009324:	2800      	cmp	r0, #0
 8009326:	d169      	bne.n	80093fc <__gethex+0x11c>
 8009328:	f898 0001 	ldrb.w	r0, [r8, #1]
 800932c:	465d      	mov	r5, fp
 800932e:	f7ff ffc1 	bl	80092b4 <__hexdig_fun>
 8009332:	2800      	cmp	r0, #0
 8009334:	d064      	beq.n	8009400 <__gethex+0x120>
 8009336:	465a      	mov	r2, fp
 8009338:	7810      	ldrb	r0, [r2, #0]
 800933a:	2830      	cmp	r0, #48	; 0x30
 800933c:	4690      	mov	r8, r2
 800933e:	f102 0201 	add.w	r2, r2, #1
 8009342:	d0f9      	beq.n	8009338 <__gethex+0x58>
 8009344:	f7ff ffb6 	bl	80092b4 <__hexdig_fun>
 8009348:	2301      	movs	r3, #1
 800934a:	fab0 f480 	clz	r4, r0
 800934e:	0964      	lsrs	r4, r4, #5
 8009350:	465e      	mov	r6, fp
 8009352:	9301      	str	r3, [sp, #4]
 8009354:	4642      	mov	r2, r8
 8009356:	4615      	mov	r5, r2
 8009358:	3201      	adds	r2, #1
 800935a:	7828      	ldrb	r0, [r5, #0]
 800935c:	f7ff ffaa 	bl	80092b4 <__hexdig_fun>
 8009360:	2800      	cmp	r0, #0
 8009362:	d1f8      	bne.n	8009356 <__gethex+0x76>
 8009364:	4994      	ldr	r1, [pc, #592]	; (80095b8 <__gethex+0x2d8>)
 8009366:	2201      	movs	r2, #1
 8009368:	4628      	mov	r0, r5
 800936a:	f7ff fee2 	bl	8009132 <strncmp>
 800936e:	b978      	cbnz	r0, 8009390 <__gethex+0xb0>
 8009370:	b946      	cbnz	r6, 8009384 <__gethex+0xa4>
 8009372:	1c6e      	adds	r6, r5, #1
 8009374:	4632      	mov	r2, r6
 8009376:	4615      	mov	r5, r2
 8009378:	3201      	adds	r2, #1
 800937a:	7828      	ldrb	r0, [r5, #0]
 800937c:	f7ff ff9a 	bl	80092b4 <__hexdig_fun>
 8009380:	2800      	cmp	r0, #0
 8009382:	d1f8      	bne.n	8009376 <__gethex+0x96>
 8009384:	1b73      	subs	r3, r6, r5
 8009386:	009e      	lsls	r6, r3, #2
 8009388:	e004      	b.n	8009394 <__gethex+0xb4>
 800938a:	2400      	movs	r4, #0
 800938c:	4626      	mov	r6, r4
 800938e:	e7e1      	b.n	8009354 <__gethex+0x74>
 8009390:	2e00      	cmp	r6, #0
 8009392:	d1f7      	bne.n	8009384 <__gethex+0xa4>
 8009394:	782b      	ldrb	r3, [r5, #0]
 8009396:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800939a:	2b50      	cmp	r3, #80	; 0x50
 800939c:	d13d      	bne.n	800941a <__gethex+0x13a>
 800939e:	786b      	ldrb	r3, [r5, #1]
 80093a0:	2b2b      	cmp	r3, #43	; 0x2b
 80093a2:	d02f      	beq.n	8009404 <__gethex+0x124>
 80093a4:	2b2d      	cmp	r3, #45	; 0x2d
 80093a6:	d031      	beq.n	800940c <__gethex+0x12c>
 80093a8:	1c69      	adds	r1, r5, #1
 80093aa:	f04f 0b00 	mov.w	fp, #0
 80093ae:	7808      	ldrb	r0, [r1, #0]
 80093b0:	f7ff ff80 	bl	80092b4 <__hexdig_fun>
 80093b4:	1e42      	subs	r2, r0, #1
 80093b6:	b2d2      	uxtb	r2, r2
 80093b8:	2a18      	cmp	r2, #24
 80093ba:	d82e      	bhi.n	800941a <__gethex+0x13a>
 80093bc:	f1a0 0210 	sub.w	r2, r0, #16
 80093c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093c4:	f7ff ff76 	bl	80092b4 <__hexdig_fun>
 80093c8:	f100 3cff 	add.w	ip, r0, #4294967295
 80093cc:	fa5f fc8c 	uxtb.w	ip, ip
 80093d0:	f1bc 0f18 	cmp.w	ip, #24
 80093d4:	d91d      	bls.n	8009412 <__gethex+0x132>
 80093d6:	f1bb 0f00 	cmp.w	fp, #0
 80093da:	d000      	beq.n	80093de <__gethex+0xfe>
 80093dc:	4252      	negs	r2, r2
 80093de:	4416      	add	r6, r2
 80093e0:	f8ca 1000 	str.w	r1, [sl]
 80093e4:	b1dc      	cbz	r4, 800941e <__gethex+0x13e>
 80093e6:	9b01      	ldr	r3, [sp, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	bf14      	ite	ne
 80093ec:	f04f 0800 	movne.w	r8, #0
 80093f0:	f04f 0806 	moveq.w	r8, #6
 80093f4:	4640      	mov	r0, r8
 80093f6:	b005      	add	sp, #20
 80093f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fc:	4645      	mov	r5, r8
 80093fe:	4626      	mov	r6, r4
 8009400:	2401      	movs	r4, #1
 8009402:	e7c7      	b.n	8009394 <__gethex+0xb4>
 8009404:	f04f 0b00 	mov.w	fp, #0
 8009408:	1ca9      	adds	r1, r5, #2
 800940a:	e7d0      	b.n	80093ae <__gethex+0xce>
 800940c:	f04f 0b01 	mov.w	fp, #1
 8009410:	e7fa      	b.n	8009408 <__gethex+0x128>
 8009412:	230a      	movs	r3, #10
 8009414:	fb03 0002 	mla	r0, r3, r2, r0
 8009418:	e7d0      	b.n	80093bc <__gethex+0xdc>
 800941a:	4629      	mov	r1, r5
 800941c:	e7e0      	b.n	80093e0 <__gethex+0x100>
 800941e:	eba5 0308 	sub.w	r3, r5, r8
 8009422:	3b01      	subs	r3, #1
 8009424:	4621      	mov	r1, r4
 8009426:	2b07      	cmp	r3, #7
 8009428:	dc0a      	bgt.n	8009440 <__gethex+0x160>
 800942a:	4648      	mov	r0, r9
 800942c:	f7fd fd8a 	bl	8006f44 <_Balloc>
 8009430:	4604      	mov	r4, r0
 8009432:	b940      	cbnz	r0, 8009446 <__gethex+0x166>
 8009434:	4b61      	ldr	r3, [pc, #388]	; (80095bc <__gethex+0x2dc>)
 8009436:	4602      	mov	r2, r0
 8009438:	21e4      	movs	r1, #228	; 0xe4
 800943a:	4861      	ldr	r0, [pc, #388]	; (80095c0 <__gethex+0x2e0>)
 800943c:	f7ff feb4 	bl	80091a8 <__assert_func>
 8009440:	3101      	adds	r1, #1
 8009442:	105b      	asrs	r3, r3, #1
 8009444:	e7ef      	b.n	8009426 <__gethex+0x146>
 8009446:	f100 0a14 	add.w	sl, r0, #20
 800944a:	2300      	movs	r3, #0
 800944c:	495a      	ldr	r1, [pc, #360]	; (80095b8 <__gethex+0x2d8>)
 800944e:	f8cd a004 	str.w	sl, [sp, #4]
 8009452:	469b      	mov	fp, r3
 8009454:	45a8      	cmp	r8, r5
 8009456:	d342      	bcc.n	80094de <__gethex+0x1fe>
 8009458:	9801      	ldr	r0, [sp, #4]
 800945a:	f840 bb04 	str.w	fp, [r0], #4
 800945e:	eba0 000a 	sub.w	r0, r0, sl
 8009462:	1080      	asrs	r0, r0, #2
 8009464:	6120      	str	r0, [r4, #16]
 8009466:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800946a:	4658      	mov	r0, fp
 800946c:	f7fd fe5c 	bl	8007128 <__hi0bits>
 8009470:	683d      	ldr	r5, [r7, #0]
 8009472:	eba8 0000 	sub.w	r0, r8, r0
 8009476:	42a8      	cmp	r0, r5
 8009478:	dd59      	ble.n	800952e <__gethex+0x24e>
 800947a:	eba0 0805 	sub.w	r8, r0, r5
 800947e:	4641      	mov	r1, r8
 8009480:	4620      	mov	r0, r4
 8009482:	f7fe f9eb 	bl	800785c <__any_on>
 8009486:	4683      	mov	fp, r0
 8009488:	b1b8      	cbz	r0, 80094ba <__gethex+0x1da>
 800948a:	f108 33ff 	add.w	r3, r8, #4294967295
 800948e:	1159      	asrs	r1, r3, #5
 8009490:	f003 021f 	and.w	r2, r3, #31
 8009494:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009498:	f04f 0b01 	mov.w	fp, #1
 800949c:	fa0b f202 	lsl.w	r2, fp, r2
 80094a0:	420a      	tst	r2, r1
 80094a2:	d00a      	beq.n	80094ba <__gethex+0x1da>
 80094a4:	455b      	cmp	r3, fp
 80094a6:	dd06      	ble.n	80094b6 <__gethex+0x1d6>
 80094a8:	f1a8 0102 	sub.w	r1, r8, #2
 80094ac:	4620      	mov	r0, r4
 80094ae:	f7fe f9d5 	bl	800785c <__any_on>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	d138      	bne.n	8009528 <__gethex+0x248>
 80094b6:	f04f 0b02 	mov.w	fp, #2
 80094ba:	4641      	mov	r1, r8
 80094bc:	4620      	mov	r0, r4
 80094be:	f7ff fea7 	bl	8009210 <rshift>
 80094c2:	4446      	add	r6, r8
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	42b3      	cmp	r3, r6
 80094c8:	da41      	bge.n	800954e <__gethex+0x26e>
 80094ca:	4621      	mov	r1, r4
 80094cc:	4648      	mov	r0, r9
 80094ce:	f7fd fd79 	bl	8006fc4 <_Bfree>
 80094d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094d4:	2300      	movs	r3, #0
 80094d6:	6013      	str	r3, [r2, #0]
 80094d8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80094dc:	e78a      	b.n	80093f4 <__gethex+0x114>
 80094de:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80094e2:	2a2e      	cmp	r2, #46	; 0x2e
 80094e4:	d014      	beq.n	8009510 <__gethex+0x230>
 80094e6:	2b20      	cmp	r3, #32
 80094e8:	d106      	bne.n	80094f8 <__gethex+0x218>
 80094ea:	9b01      	ldr	r3, [sp, #4]
 80094ec:	f843 bb04 	str.w	fp, [r3], #4
 80094f0:	f04f 0b00 	mov.w	fp, #0
 80094f4:	9301      	str	r3, [sp, #4]
 80094f6:	465b      	mov	r3, fp
 80094f8:	7828      	ldrb	r0, [r5, #0]
 80094fa:	9303      	str	r3, [sp, #12]
 80094fc:	f7ff feda 	bl	80092b4 <__hexdig_fun>
 8009500:	9b03      	ldr	r3, [sp, #12]
 8009502:	f000 000f 	and.w	r0, r0, #15
 8009506:	4098      	lsls	r0, r3
 8009508:	ea4b 0b00 	orr.w	fp, fp, r0
 800950c:	3304      	adds	r3, #4
 800950e:	e7a1      	b.n	8009454 <__gethex+0x174>
 8009510:	45a8      	cmp	r8, r5
 8009512:	d8e8      	bhi.n	80094e6 <__gethex+0x206>
 8009514:	2201      	movs	r2, #1
 8009516:	4628      	mov	r0, r5
 8009518:	9303      	str	r3, [sp, #12]
 800951a:	f7ff fe0a 	bl	8009132 <strncmp>
 800951e:	4926      	ldr	r1, [pc, #152]	; (80095b8 <__gethex+0x2d8>)
 8009520:	9b03      	ldr	r3, [sp, #12]
 8009522:	2800      	cmp	r0, #0
 8009524:	d1df      	bne.n	80094e6 <__gethex+0x206>
 8009526:	e795      	b.n	8009454 <__gethex+0x174>
 8009528:	f04f 0b03 	mov.w	fp, #3
 800952c:	e7c5      	b.n	80094ba <__gethex+0x1da>
 800952e:	da0b      	bge.n	8009548 <__gethex+0x268>
 8009530:	eba5 0800 	sub.w	r8, r5, r0
 8009534:	4621      	mov	r1, r4
 8009536:	4642      	mov	r2, r8
 8009538:	4648      	mov	r0, r9
 800953a:	f7fd ff5d 	bl	80073f8 <__lshift>
 800953e:	eba6 0608 	sub.w	r6, r6, r8
 8009542:	4604      	mov	r4, r0
 8009544:	f100 0a14 	add.w	sl, r0, #20
 8009548:	f04f 0b00 	mov.w	fp, #0
 800954c:	e7ba      	b.n	80094c4 <__gethex+0x1e4>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	42b3      	cmp	r3, r6
 8009552:	dd73      	ble.n	800963c <__gethex+0x35c>
 8009554:	1b9e      	subs	r6, r3, r6
 8009556:	42b5      	cmp	r5, r6
 8009558:	dc34      	bgt.n	80095c4 <__gethex+0x2e4>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2b02      	cmp	r3, #2
 800955e:	d023      	beq.n	80095a8 <__gethex+0x2c8>
 8009560:	2b03      	cmp	r3, #3
 8009562:	d025      	beq.n	80095b0 <__gethex+0x2d0>
 8009564:	2b01      	cmp	r3, #1
 8009566:	d115      	bne.n	8009594 <__gethex+0x2b4>
 8009568:	42b5      	cmp	r5, r6
 800956a:	d113      	bne.n	8009594 <__gethex+0x2b4>
 800956c:	2d01      	cmp	r5, #1
 800956e:	d10b      	bne.n	8009588 <__gethex+0x2a8>
 8009570:	9a02      	ldr	r2, [sp, #8]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	2301      	movs	r3, #1
 8009578:	6123      	str	r3, [r4, #16]
 800957a:	f8ca 3000 	str.w	r3, [sl]
 800957e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009580:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009584:	601c      	str	r4, [r3, #0]
 8009586:	e735      	b.n	80093f4 <__gethex+0x114>
 8009588:	1e69      	subs	r1, r5, #1
 800958a:	4620      	mov	r0, r4
 800958c:	f7fe f966 	bl	800785c <__any_on>
 8009590:	2800      	cmp	r0, #0
 8009592:	d1ed      	bne.n	8009570 <__gethex+0x290>
 8009594:	4621      	mov	r1, r4
 8009596:	4648      	mov	r0, r9
 8009598:	f7fd fd14 	bl	8006fc4 <_Bfree>
 800959c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800959e:	2300      	movs	r3, #0
 80095a0:	6013      	str	r3, [r2, #0]
 80095a2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80095a6:	e725      	b.n	80093f4 <__gethex+0x114>
 80095a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1f2      	bne.n	8009594 <__gethex+0x2b4>
 80095ae:	e7df      	b.n	8009570 <__gethex+0x290>
 80095b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1dc      	bne.n	8009570 <__gethex+0x290>
 80095b6:	e7ed      	b.n	8009594 <__gethex+0x2b4>
 80095b8:	0800a36c 	.word	0x0800a36c
 80095bc:	0800a1ff 	.word	0x0800a1ff
 80095c0:	0800a531 	.word	0x0800a531
 80095c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80095c8:	f1bb 0f00 	cmp.w	fp, #0
 80095cc:	d133      	bne.n	8009636 <__gethex+0x356>
 80095ce:	f1b8 0f00 	cmp.w	r8, #0
 80095d2:	d004      	beq.n	80095de <__gethex+0x2fe>
 80095d4:	4641      	mov	r1, r8
 80095d6:	4620      	mov	r0, r4
 80095d8:	f7fe f940 	bl	800785c <__any_on>
 80095dc:	4683      	mov	fp, r0
 80095de:	ea4f 1268 	mov.w	r2, r8, asr #5
 80095e2:	2301      	movs	r3, #1
 80095e4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80095e8:	f008 081f 	and.w	r8, r8, #31
 80095ec:	fa03 f308 	lsl.w	r3, r3, r8
 80095f0:	4213      	tst	r3, r2
 80095f2:	4631      	mov	r1, r6
 80095f4:	4620      	mov	r0, r4
 80095f6:	bf18      	it	ne
 80095f8:	f04b 0b02 	orrne.w	fp, fp, #2
 80095fc:	1bad      	subs	r5, r5, r6
 80095fe:	f7ff fe07 	bl	8009210 <rshift>
 8009602:	687e      	ldr	r6, [r7, #4]
 8009604:	f04f 0802 	mov.w	r8, #2
 8009608:	f1bb 0f00 	cmp.w	fp, #0
 800960c:	d04a      	beq.n	80096a4 <__gethex+0x3c4>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b02      	cmp	r3, #2
 8009612:	d016      	beq.n	8009642 <__gethex+0x362>
 8009614:	2b03      	cmp	r3, #3
 8009616:	d018      	beq.n	800964a <__gethex+0x36a>
 8009618:	2b01      	cmp	r3, #1
 800961a:	d109      	bne.n	8009630 <__gethex+0x350>
 800961c:	f01b 0f02 	tst.w	fp, #2
 8009620:	d006      	beq.n	8009630 <__gethex+0x350>
 8009622:	f8da 3000 	ldr.w	r3, [sl]
 8009626:	ea4b 0b03 	orr.w	fp, fp, r3
 800962a:	f01b 0f01 	tst.w	fp, #1
 800962e:	d10f      	bne.n	8009650 <__gethex+0x370>
 8009630:	f048 0810 	orr.w	r8, r8, #16
 8009634:	e036      	b.n	80096a4 <__gethex+0x3c4>
 8009636:	f04f 0b01 	mov.w	fp, #1
 800963a:	e7d0      	b.n	80095de <__gethex+0x2fe>
 800963c:	f04f 0801 	mov.w	r8, #1
 8009640:	e7e2      	b.n	8009608 <__gethex+0x328>
 8009642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009644:	f1c3 0301 	rsb	r3, r3, #1
 8009648:	930f      	str	r3, [sp, #60]	; 0x3c
 800964a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800964c:	2b00      	cmp	r3, #0
 800964e:	d0ef      	beq.n	8009630 <__gethex+0x350>
 8009650:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009654:	f104 0214 	add.w	r2, r4, #20
 8009658:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800965c:	9301      	str	r3, [sp, #4]
 800965e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009662:	2300      	movs	r3, #0
 8009664:	4694      	mov	ip, r2
 8009666:	f852 1b04 	ldr.w	r1, [r2], #4
 800966a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800966e:	d01e      	beq.n	80096ae <__gethex+0x3ce>
 8009670:	3101      	adds	r1, #1
 8009672:	f8cc 1000 	str.w	r1, [ip]
 8009676:	f1b8 0f02 	cmp.w	r8, #2
 800967a:	f104 0214 	add.w	r2, r4, #20
 800967e:	d13d      	bne.n	80096fc <__gethex+0x41c>
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	3b01      	subs	r3, #1
 8009684:	42ab      	cmp	r3, r5
 8009686:	d10b      	bne.n	80096a0 <__gethex+0x3c0>
 8009688:	1169      	asrs	r1, r5, #5
 800968a:	2301      	movs	r3, #1
 800968c:	f005 051f 	and.w	r5, r5, #31
 8009690:	fa03 f505 	lsl.w	r5, r3, r5
 8009694:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009698:	421d      	tst	r5, r3
 800969a:	bf18      	it	ne
 800969c:	f04f 0801 	movne.w	r8, #1
 80096a0:	f048 0820 	orr.w	r8, r8, #32
 80096a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096a6:	601c      	str	r4, [r3, #0]
 80096a8:	9b02      	ldr	r3, [sp, #8]
 80096aa:	601e      	str	r6, [r3, #0]
 80096ac:	e6a2      	b.n	80093f4 <__gethex+0x114>
 80096ae:	4290      	cmp	r0, r2
 80096b0:	f842 3c04 	str.w	r3, [r2, #-4]
 80096b4:	d8d6      	bhi.n	8009664 <__gethex+0x384>
 80096b6:	68a2      	ldr	r2, [r4, #8]
 80096b8:	4593      	cmp	fp, r2
 80096ba:	db17      	blt.n	80096ec <__gethex+0x40c>
 80096bc:	6861      	ldr	r1, [r4, #4]
 80096be:	4648      	mov	r0, r9
 80096c0:	3101      	adds	r1, #1
 80096c2:	f7fd fc3f 	bl	8006f44 <_Balloc>
 80096c6:	4682      	mov	sl, r0
 80096c8:	b918      	cbnz	r0, 80096d2 <__gethex+0x3f2>
 80096ca:	4b1b      	ldr	r3, [pc, #108]	; (8009738 <__gethex+0x458>)
 80096cc:	4602      	mov	r2, r0
 80096ce:	2184      	movs	r1, #132	; 0x84
 80096d0:	e6b3      	b.n	800943a <__gethex+0x15a>
 80096d2:	6922      	ldr	r2, [r4, #16]
 80096d4:	3202      	adds	r2, #2
 80096d6:	f104 010c 	add.w	r1, r4, #12
 80096da:	0092      	lsls	r2, r2, #2
 80096dc:	300c      	adds	r0, #12
 80096de:	f7ff fd4b 	bl	8009178 <memcpy>
 80096e2:	4621      	mov	r1, r4
 80096e4:	4648      	mov	r0, r9
 80096e6:	f7fd fc6d 	bl	8006fc4 <_Bfree>
 80096ea:	4654      	mov	r4, sl
 80096ec:	6922      	ldr	r2, [r4, #16]
 80096ee:	1c51      	adds	r1, r2, #1
 80096f0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80096f4:	6121      	str	r1, [r4, #16]
 80096f6:	2101      	movs	r1, #1
 80096f8:	6151      	str	r1, [r2, #20]
 80096fa:	e7bc      	b.n	8009676 <__gethex+0x396>
 80096fc:	6921      	ldr	r1, [r4, #16]
 80096fe:	4559      	cmp	r1, fp
 8009700:	dd0b      	ble.n	800971a <__gethex+0x43a>
 8009702:	2101      	movs	r1, #1
 8009704:	4620      	mov	r0, r4
 8009706:	f7ff fd83 	bl	8009210 <rshift>
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	3601      	adds	r6, #1
 800970e:	42b3      	cmp	r3, r6
 8009710:	f6ff aedb 	blt.w	80094ca <__gethex+0x1ea>
 8009714:	f04f 0801 	mov.w	r8, #1
 8009718:	e7c2      	b.n	80096a0 <__gethex+0x3c0>
 800971a:	f015 051f 	ands.w	r5, r5, #31
 800971e:	d0f9      	beq.n	8009714 <__gethex+0x434>
 8009720:	9b01      	ldr	r3, [sp, #4]
 8009722:	441a      	add	r2, r3
 8009724:	f1c5 0520 	rsb	r5, r5, #32
 8009728:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800972c:	f7fd fcfc 	bl	8007128 <__hi0bits>
 8009730:	42a8      	cmp	r0, r5
 8009732:	dbe6      	blt.n	8009702 <__gethex+0x422>
 8009734:	e7ee      	b.n	8009714 <__gethex+0x434>
 8009736:	bf00      	nop
 8009738:	0800a1ff 	.word	0x0800a1ff

0800973c <L_shift>:
 800973c:	f1c2 0208 	rsb	r2, r2, #8
 8009740:	0092      	lsls	r2, r2, #2
 8009742:	b570      	push	{r4, r5, r6, lr}
 8009744:	f1c2 0620 	rsb	r6, r2, #32
 8009748:	6843      	ldr	r3, [r0, #4]
 800974a:	6804      	ldr	r4, [r0, #0]
 800974c:	fa03 f506 	lsl.w	r5, r3, r6
 8009750:	432c      	orrs	r4, r5
 8009752:	40d3      	lsrs	r3, r2
 8009754:	6004      	str	r4, [r0, #0]
 8009756:	f840 3f04 	str.w	r3, [r0, #4]!
 800975a:	4288      	cmp	r0, r1
 800975c:	d3f4      	bcc.n	8009748 <L_shift+0xc>
 800975e:	bd70      	pop	{r4, r5, r6, pc}

08009760 <__match>:
 8009760:	b530      	push	{r4, r5, lr}
 8009762:	6803      	ldr	r3, [r0, #0]
 8009764:	3301      	adds	r3, #1
 8009766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800976a:	b914      	cbnz	r4, 8009772 <__match+0x12>
 800976c:	6003      	str	r3, [r0, #0]
 800976e:	2001      	movs	r0, #1
 8009770:	bd30      	pop	{r4, r5, pc}
 8009772:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009776:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800977a:	2d19      	cmp	r5, #25
 800977c:	bf98      	it	ls
 800977e:	3220      	addls	r2, #32
 8009780:	42a2      	cmp	r2, r4
 8009782:	d0f0      	beq.n	8009766 <__match+0x6>
 8009784:	2000      	movs	r0, #0
 8009786:	e7f3      	b.n	8009770 <__match+0x10>

08009788 <__hexnan>:
 8009788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978c:	680b      	ldr	r3, [r1, #0]
 800978e:	6801      	ldr	r1, [r0, #0]
 8009790:	115e      	asrs	r6, r3, #5
 8009792:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009796:	f013 031f 	ands.w	r3, r3, #31
 800979a:	b087      	sub	sp, #28
 800979c:	bf18      	it	ne
 800979e:	3604      	addne	r6, #4
 80097a0:	2500      	movs	r5, #0
 80097a2:	1f37      	subs	r7, r6, #4
 80097a4:	4682      	mov	sl, r0
 80097a6:	4690      	mov	r8, r2
 80097a8:	9301      	str	r3, [sp, #4]
 80097aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80097ae:	46b9      	mov	r9, r7
 80097b0:	463c      	mov	r4, r7
 80097b2:	9502      	str	r5, [sp, #8]
 80097b4:	46ab      	mov	fp, r5
 80097b6:	784a      	ldrb	r2, [r1, #1]
 80097b8:	1c4b      	adds	r3, r1, #1
 80097ba:	9303      	str	r3, [sp, #12]
 80097bc:	b342      	cbz	r2, 8009810 <__hexnan+0x88>
 80097be:	4610      	mov	r0, r2
 80097c0:	9105      	str	r1, [sp, #20]
 80097c2:	9204      	str	r2, [sp, #16]
 80097c4:	f7ff fd76 	bl	80092b4 <__hexdig_fun>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d14f      	bne.n	800986c <__hexnan+0xe4>
 80097cc:	9a04      	ldr	r2, [sp, #16]
 80097ce:	9905      	ldr	r1, [sp, #20]
 80097d0:	2a20      	cmp	r2, #32
 80097d2:	d818      	bhi.n	8009806 <__hexnan+0x7e>
 80097d4:	9b02      	ldr	r3, [sp, #8]
 80097d6:	459b      	cmp	fp, r3
 80097d8:	dd13      	ble.n	8009802 <__hexnan+0x7a>
 80097da:	454c      	cmp	r4, r9
 80097dc:	d206      	bcs.n	80097ec <__hexnan+0x64>
 80097de:	2d07      	cmp	r5, #7
 80097e0:	dc04      	bgt.n	80097ec <__hexnan+0x64>
 80097e2:	462a      	mov	r2, r5
 80097e4:	4649      	mov	r1, r9
 80097e6:	4620      	mov	r0, r4
 80097e8:	f7ff ffa8 	bl	800973c <L_shift>
 80097ec:	4544      	cmp	r4, r8
 80097ee:	d950      	bls.n	8009892 <__hexnan+0x10a>
 80097f0:	2300      	movs	r3, #0
 80097f2:	f1a4 0904 	sub.w	r9, r4, #4
 80097f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80097fa:	f8cd b008 	str.w	fp, [sp, #8]
 80097fe:	464c      	mov	r4, r9
 8009800:	461d      	mov	r5, r3
 8009802:	9903      	ldr	r1, [sp, #12]
 8009804:	e7d7      	b.n	80097b6 <__hexnan+0x2e>
 8009806:	2a29      	cmp	r2, #41	; 0x29
 8009808:	d155      	bne.n	80098b6 <__hexnan+0x12e>
 800980a:	3102      	adds	r1, #2
 800980c:	f8ca 1000 	str.w	r1, [sl]
 8009810:	f1bb 0f00 	cmp.w	fp, #0
 8009814:	d04f      	beq.n	80098b6 <__hexnan+0x12e>
 8009816:	454c      	cmp	r4, r9
 8009818:	d206      	bcs.n	8009828 <__hexnan+0xa0>
 800981a:	2d07      	cmp	r5, #7
 800981c:	dc04      	bgt.n	8009828 <__hexnan+0xa0>
 800981e:	462a      	mov	r2, r5
 8009820:	4649      	mov	r1, r9
 8009822:	4620      	mov	r0, r4
 8009824:	f7ff ff8a 	bl	800973c <L_shift>
 8009828:	4544      	cmp	r4, r8
 800982a:	d934      	bls.n	8009896 <__hexnan+0x10e>
 800982c:	f1a8 0204 	sub.w	r2, r8, #4
 8009830:	4623      	mov	r3, r4
 8009832:	f853 1b04 	ldr.w	r1, [r3], #4
 8009836:	f842 1f04 	str.w	r1, [r2, #4]!
 800983a:	429f      	cmp	r7, r3
 800983c:	d2f9      	bcs.n	8009832 <__hexnan+0xaa>
 800983e:	1b3b      	subs	r3, r7, r4
 8009840:	f023 0303 	bic.w	r3, r3, #3
 8009844:	3304      	adds	r3, #4
 8009846:	3e03      	subs	r6, #3
 8009848:	3401      	adds	r4, #1
 800984a:	42a6      	cmp	r6, r4
 800984c:	bf38      	it	cc
 800984e:	2304      	movcc	r3, #4
 8009850:	4443      	add	r3, r8
 8009852:	2200      	movs	r2, #0
 8009854:	f843 2b04 	str.w	r2, [r3], #4
 8009858:	429f      	cmp	r7, r3
 800985a:	d2fb      	bcs.n	8009854 <__hexnan+0xcc>
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	b91b      	cbnz	r3, 8009868 <__hexnan+0xe0>
 8009860:	4547      	cmp	r7, r8
 8009862:	d126      	bne.n	80098b2 <__hexnan+0x12a>
 8009864:	2301      	movs	r3, #1
 8009866:	603b      	str	r3, [r7, #0]
 8009868:	2005      	movs	r0, #5
 800986a:	e025      	b.n	80098b8 <__hexnan+0x130>
 800986c:	3501      	adds	r5, #1
 800986e:	2d08      	cmp	r5, #8
 8009870:	f10b 0b01 	add.w	fp, fp, #1
 8009874:	dd06      	ble.n	8009884 <__hexnan+0xfc>
 8009876:	4544      	cmp	r4, r8
 8009878:	d9c3      	bls.n	8009802 <__hexnan+0x7a>
 800987a:	2300      	movs	r3, #0
 800987c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009880:	2501      	movs	r5, #1
 8009882:	3c04      	subs	r4, #4
 8009884:	6822      	ldr	r2, [r4, #0]
 8009886:	f000 000f 	and.w	r0, r0, #15
 800988a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800988e:	6020      	str	r0, [r4, #0]
 8009890:	e7b7      	b.n	8009802 <__hexnan+0x7a>
 8009892:	2508      	movs	r5, #8
 8009894:	e7b5      	b.n	8009802 <__hexnan+0x7a>
 8009896:	9b01      	ldr	r3, [sp, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d0df      	beq.n	800985c <__hexnan+0xd4>
 800989c:	f1c3 0320 	rsb	r3, r3, #32
 80098a0:	f04f 32ff 	mov.w	r2, #4294967295
 80098a4:	40da      	lsrs	r2, r3
 80098a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80098aa:	4013      	ands	r3, r2
 80098ac:	f846 3c04 	str.w	r3, [r6, #-4]
 80098b0:	e7d4      	b.n	800985c <__hexnan+0xd4>
 80098b2:	3f04      	subs	r7, #4
 80098b4:	e7d2      	b.n	800985c <__hexnan+0xd4>
 80098b6:	2004      	movs	r0, #4
 80098b8:	b007      	add	sp, #28
 80098ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098be <__ascii_mbtowc>:
 80098be:	b082      	sub	sp, #8
 80098c0:	b901      	cbnz	r1, 80098c4 <__ascii_mbtowc+0x6>
 80098c2:	a901      	add	r1, sp, #4
 80098c4:	b142      	cbz	r2, 80098d8 <__ascii_mbtowc+0x1a>
 80098c6:	b14b      	cbz	r3, 80098dc <__ascii_mbtowc+0x1e>
 80098c8:	7813      	ldrb	r3, [r2, #0]
 80098ca:	600b      	str	r3, [r1, #0]
 80098cc:	7812      	ldrb	r2, [r2, #0]
 80098ce:	1e10      	subs	r0, r2, #0
 80098d0:	bf18      	it	ne
 80098d2:	2001      	movne	r0, #1
 80098d4:	b002      	add	sp, #8
 80098d6:	4770      	bx	lr
 80098d8:	4610      	mov	r0, r2
 80098da:	e7fb      	b.n	80098d4 <__ascii_mbtowc+0x16>
 80098dc:	f06f 0001 	mvn.w	r0, #1
 80098e0:	e7f8      	b.n	80098d4 <__ascii_mbtowc+0x16>

080098e2 <_realloc_r>:
 80098e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e6:	4680      	mov	r8, r0
 80098e8:	4614      	mov	r4, r2
 80098ea:	460e      	mov	r6, r1
 80098ec:	b921      	cbnz	r1, 80098f8 <_realloc_r+0x16>
 80098ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098f2:	4611      	mov	r1, r2
 80098f4:	f7fd ba9a 	b.w	8006e2c <_malloc_r>
 80098f8:	b92a      	cbnz	r2, 8009906 <_realloc_r+0x24>
 80098fa:	f7fd fa23 	bl	8006d44 <_free_r>
 80098fe:	4625      	mov	r5, r4
 8009900:	4628      	mov	r0, r5
 8009902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009906:	f000 f8b6 	bl	8009a76 <_malloc_usable_size_r>
 800990a:	4284      	cmp	r4, r0
 800990c:	4607      	mov	r7, r0
 800990e:	d802      	bhi.n	8009916 <_realloc_r+0x34>
 8009910:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009914:	d812      	bhi.n	800993c <_realloc_r+0x5a>
 8009916:	4621      	mov	r1, r4
 8009918:	4640      	mov	r0, r8
 800991a:	f7fd fa87 	bl	8006e2c <_malloc_r>
 800991e:	4605      	mov	r5, r0
 8009920:	2800      	cmp	r0, #0
 8009922:	d0ed      	beq.n	8009900 <_realloc_r+0x1e>
 8009924:	42bc      	cmp	r4, r7
 8009926:	4622      	mov	r2, r4
 8009928:	4631      	mov	r1, r6
 800992a:	bf28      	it	cs
 800992c:	463a      	movcs	r2, r7
 800992e:	f7ff fc23 	bl	8009178 <memcpy>
 8009932:	4631      	mov	r1, r6
 8009934:	4640      	mov	r0, r8
 8009936:	f7fd fa05 	bl	8006d44 <_free_r>
 800993a:	e7e1      	b.n	8009900 <_realloc_r+0x1e>
 800993c:	4635      	mov	r5, r6
 800993e:	e7df      	b.n	8009900 <_realloc_r+0x1e>

08009940 <_strtoul_l.constprop.0>:
 8009940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009944:	4f36      	ldr	r7, [pc, #216]	; (8009a20 <_strtoul_l.constprop.0+0xe0>)
 8009946:	4686      	mov	lr, r0
 8009948:	460d      	mov	r5, r1
 800994a:	4628      	mov	r0, r5
 800994c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009950:	5d3e      	ldrb	r6, [r7, r4]
 8009952:	f016 0608 	ands.w	r6, r6, #8
 8009956:	d1f8      	bne.n	800994a <_strtoul_l.constprop.0+0xa>
 8009958:	2c2d      	cmp	r4, #45	; 0x2d
 800995a:	d130      	bne.n	80099be <_strtoul_l.constprop.0+0x7e>
 800995c:	782c      	ldrb	r4, [r5, #0]
 800995e:	2601      	movs	r6, #1
 8009960:	1c85      	adds	r5, r0, #2
 8009962:	2b00      	cmp	r3, #0
 8009964:	d057      	beq.n	8009a16 <_strtoul_l.constprop.0+0xd6>
 8009966:	2b10      	cmp	r3, #16
 8009968:	d109      	bne.n	800997e <_strtoul_l.constprop.0+0x3e>
 800996a:	2c30      	cmp	r4, #48	; 0x30
 800996c:	d107      	bne.n	800997e <_strtoul_l.constprop.0+0x3e>
 800996e:	7828      	ldrb	r0, [r5, #0]
 8009970:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009974:	2858      	cmp	r0, #88	; 0x58
 8009976:	d149      	bne.n	8009a0c <_strtoul_l.constprop.0+0xcc>
 8009978:	786c      	ldrb	r4, [r5, #1]
 800997a:	2310      	movs	r3, #16
 800997c:	3502      	adds	r5, #2
 800997e:	f04f 38ff 	mov.w	r8, #4294967295
 8009982:	2700      	movs	r7, #0
 8009984:	fbb8 f8f3 	udiv	r8, r8, r3
 8009988:	fb03 f908 	mul.w	r9, r3, r8
 800998c:	ea6f 0909 	mvn.w	r9, r9
 8009990:	4638      	mov	r0, r7
 8009992:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009996:	f1bc 0f09 	cmp.w	ip, #9
 800999a:	d815      	bhi.n	80099c8 <_strtoul_l.constprop.0+0x88>
 800999c:	4664      	mov	r4, ip
 800999e:	42a3      	cmp	r3, r4
 80099a0:	dd23      	ble.n	80099ea <_strtoul_l.constprop.0+0xaa>
 80099a2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80099a6:	d007      	beq.n	80099b8 <_strtoul_l.constprop.0+0x78>
 80099a8:	4580      	cmp	r8, r0
 80099aa:	d31b      	bcc.n	80099e4 <_strtoul_l.constprop.0+0xa4>
 80099ac:	d101      	bne.n	80099b2 <_strtoul_l.constprop.0+0x72>
 80099ae:	45a1      	cmp	r9, r4
 80099b0:	db18      	blt.n	80099e4 <_strtoul_l.constprop.0+0xa4>
 80099b2:	fb00 4003 	mla	r0, r0, r3, r4
 80099b6:	2701      	movs	r7, #1
 80099b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099bc:	e7e9      	b.n	8009992 <_strtoul_l.constprop.0+0x52>
 80099be:	2c2b      	cmp	r4, #43	; 0x2b
 80099c0:	bf04      	itt	eq
 80099c2:	782c      	ldrbeq	r4, [r5, #0]
 80099c4:	1c85      	addeq	r5, r0, #2
 80099c6:	e7cc      	b.n	8009962 <_strtoul_l.constprop.0+0x22>
 80099c8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80099cc:	f1bc 0f19 	cmp.w	ip, #25
 80099d0:	d801      	bhi.n	80099d6 <_strtoul_l.constprop.0+0x96>
 80099d2:	3c37      	subs	r4, #55	; 0x37
 80099d4:	e7e3      	b.n	800999e <_strtoul_l.constprop.0+0x5e>
 80099d6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80099da:	f1bc 0f19 	cmp.w	ip, #25
 80099de:	d804      	bhi.n	80099ea <_strtoul_l.constprop.0+0xaa>
 80099e0:	3c57      	subs	r4, #87	; 0x57
 80099e2:	e7dc      	b.n	800999e <_strtoul_l.constprop.0+0x5e>
 80099e4:	f04f 37ff 	mov.w	r7, #4294967295
 80099e8:	e7e6      	b.n	80099b8 <_strtoul_l.constprop.0+0x78>
 80099ea:	1c7b      	adds	r3, r7, #1
 80099ec:	d106      	bne.n	80099fc <_strtoul_l.constprop.0+0xbc>
 80099ee:	2322      	movs	r3, #34	; 0x22
 80099f0:	f8ce 3000 	str.w	r3, [lr]
 80099f4:	4638      	mov	r0, r7
 80099f6:	b932      	cbnz	r2, 8009a06 <_strtoul_l.constprop.0+0xc6>
 80099f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099fc:	b106      	cbz	r6, 8009a00 <_strtoul_l.constprop.0+0xc0>
 80099fe:	4240      	negs	r0, r0
 8009a00:	2a00      	cmp	r2, #0
 8009a02:	d0f9      	beq.n	80099f8 <_strtoul_l.constprop.0+0xb8>
 8009a04:	b107      	cbz	r7, 8009a08 <_strtoul_l.constprop.0+0xc8>
 8009a06:	1e69      	subs	r1, r5, #1
 8009a08:	6011      	str	r1, [r2, #0]
 8009a0a:	e7f5      	b.n	80099f8 <_strtoul_l.constprop.0+0xb8>
 8009a0c:	2430      	movs	r4, #48	; 0x30
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1b5      	bne.n	800997e <_strtoul_l.constprop.0+0x3e>
 8009a12:	2308      	movs	r3, #8
 8009a14:	e7b3      	b.n	800997e <_strtoul_l.constprop.0+0x3e>
 8009a16:	2c30      	cmp	r4, #48	; 0x30
 8009a18:	d0a9      	beq.n	800996e <_strtoul_l.constprop.0+0x2e>
 8009a1a:	230a      	movs	r3, #10
 8009a1c:	e7af      	b.n	800997e <_strtoul_l.constprop.0+0x3e>
 8009a1e:	bf00      	nop
 8009a20:	0800a3c1 	.word	0x0800a3c1

08009a24 <_strtoul_r>:
 8009a24:	f7ff bf8c 	b.w	8009940 <_strtoul_l.constprop.0>

08009a28 <__ascii_wctomb>:
 8009a28:	b149      	cbz	r1, 8009a3e <__ascii_wctomb+0x16>
 8009a2a:	2aff      	cmp	r2, #255	; 0xff
 8009a2c:	bf85      	ittet	hi
 8009a2e:	238a      	movhi	r3, #138	; 0x8a
 8009a30:	6003      	strhi	r3, [r0, #0]
 8009a32:	700a      	strbls	r2, [r1, #0]
 8009a34:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a38:	bf98      	it	ls
 8009a3a:	2001      	movls	r0, #1
 8009a3c:	4770      	bx	lr
 8009a3e:	4608      	mov	r0, r1
 8009a40:	4770      	bx	lr
	...

08009a44 <fiprintf>:
 8009a44:	b40e      	push	{r1, r2, r3}
 8009a46:	b503      	push	{r0, r1, lr}
 8009a48:	4601      	mov	r1, r0
 8009a4a:	ab03      	add	r3, sp, #12
 8009a4c:	4805      	ldr	r0, [pc, #20]	; (8009a64 <fiprintf+0x20>)
 8009a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a52:	6800      	ldr	r0, [r0, #0]
 8009a54:	9301      	str	r3, [sp, #4]
 8009a56:	f000 f83f 	bl	8009ad8 <_vfiprintf_r>
 8009a5a:	b002      	add	sp, #8
 8009a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a60:	b003      	add	sp, #12
 8009a62:	4770      	bx	lr
 8009a64:	20000068 	.word	0x20000068

08009a68 <abort>:
 8009a68:	b508      	push	{r3, lr}
 8009a6a:	2006      	movs	r0, #6
 8009a6c:	f000 fa0c 	bl	8009e88 <raise>
 8009a70:	2001      	movs	r0, #1
 8009a72:	f7f8 f887 	bl	8001b84 <_exit>

08009a76 <_malloc_usable_size_r>:
 8009a76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a7a:	1f18      	subs	r0, r3, #4
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	bfbc      	itt	lt
 8009a80:	580b      	ldrlt	r3, [r1, r0]
 8009a82:	18c0      	addlt	r0, r0, r3
 8009a84:	4770      	bx	lr

08009a86 <__sfputc_r>:
 8009a86:	6893      	ldr	r3, [r2, #8]
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	b410      	push	{r4}
 8009a8e:	6093      	str	r3, [r2, #8]
 8009a90:	da08      	bge.n	8009aa4 <__sfputc_r+0x1e>
 8009a92:	6994      	ldr	r4, [r2, #24]
 8009a94:	42a3      	cmp	r3, r4
 8009a96:	db01      	blt.n	8009a9c <__sfputc_r+0x16>
 8009a98:	290a      	cmp	r1, #10
 8009a9a:	d103      	bne.n	8009aa4 <__sfputc_r+0x1e>
 8009a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aa0:	f000 b934 	b.w	8009d0c <__swbuf_r>
 8009aa4:	6813      	ldr	r3, [r2, #0]
 8009aa6:	1c58      	adds	r0, r3, #1
 8009aa8:	6010      	str	r0, [r2, #0]
 8009aaa:	7019      	strb	r1, [r3, #0]
 8009aac:	4608      	mov	r0, r1
 8009aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <__sfputs_r>:
 8009ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	460f      	mov	r7, r1
 8009aba:	4614      	mov	r4, r2
 8009abc:	18d5      	adds	r5, r2, r3
 8009abe:	42ac      	cmp	r4, r5
 8009ac0:	d101      	bne.n	8009ac6 <__sfputs_r+0x12>
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	e007      	b.n	8009ad6 <__sfputs_r+0x22>
 8009ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aca:	463a      	mov	r2, r7
 8009acc:	4630      	mov	r0, r6
 8009ace:	f7ff ffda 	bl	8009a86 <__sfputc_r>
 8009ad2:	1c43      	adds	r3, r0, #1
 8009ad4:	d1f3      	bne.n	8009abe <__sfputs_r+0xa>
 8009ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009ad8 <_vfiprintf_r>:
 8009ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009adc:	460d      	mov	r5, r1
 8009ade:	b09d      	sub	sp, #116	; 0x74
 8009ae0:	4614      	mov	r4, r2
 8009ae2:	4698      	mov	r8, r3
 8009ae4:	4606      	mov	r6, r0
 8009ae6:	b118      	cbz	r0, 8009af0 <_vfiprintf_r+0x18>
 8009ae8:	6a03      	ldr	r3, [r0, #32]
 8009aea:	b90b      	cbnz	r3, 8009af0 <_vfiprintf_r+0x18>
 8009aec:	f7fc f960 	bl	8005db0 <__sinit>
 8009af0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009af2:	07d9      	lsls	r1, r3, #31
 8009af4:	d405      	bmi.n	8009b02 <_vfiprintf_r+0x2a>
 8009af6:	89ab      	ldrh	r3, [r5, #12]
 8009af8:	059a      	lsls	r2, r3, #22
 8009afa:	d402      	bmi.n	8009b02 <_vfiprintf_r+0x2a>
 8009afc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009afe:	f7fc fa9c 	bl	800603a <__retarget_lock_acquire_recursive>
 8009b02:	89ab      	ldrh	r3, [r5, #12]
 8009b04:	071b      	lsls	r3, r3, #28
 8009b06:	d501      	bpl.n	8009b0c <_vfiprintf_r+0x34>
 8009b08:	692b      	ldr	r3, [r5, #16]
 8009b0a:	b99b      	cbnz	r3, 8009b34 <_vfiprintf_r+0x5c>
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	4630      	mov	r0, r6
 8009b10:	f000 f93a 	bl	8009d88 <__swsetup_r>
 8009b14:	b170      	cbz	r0, 8009b34 <_vfiprintf_r+0x5c>
 8009b16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b18:	07dc      	lsls	r4, r3, #31
 8009b1a:	d504      	bpl.n	8009b26 <_vfiprintf_r+0x4e>
 8009b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b20:	b01d      	add	sp, #116	; 0x74
 8009b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b26:	89ab      	ldrh	r3, [r5, #12]
 8009b28:	0598      	lsls	r0, r3, #22
 8009b2a:	d4f7      	bmi.n	8009b1c <_vfiprintf_r+0x44>
 8009b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b2e:	f7fc fa85 	bl	800603c <__retarget_lock_release_recursive>
 8009b32:	e7f3      	b.n	8009b1c <_vfiprintf_r+0x44>
 8009b34:	2300      	movs	r3, #0
 8009b36:	9309      	str	r3, [sp, #36]	; 0x24
 8009b38:	2320      	movs	r3, #32
 8009b3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b42:	2330      	movs	r3, #48	; 0x30
 8009b44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009cf8 <_vfiprintf_r+0x220>
 8009b48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b4c:	f04f 0901 	mov.w	r9, #1
 8009b50:	4623      	mov	r3, r4
 8009b52:	469a      	mov	sl, r3
 8009b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b58:	b10a      	cbz	r2, 8009b5e <_vfiprintf_r+0x86>
 8009b5a:	2a25      	cmp	r2, #37	; 0x25
 8009b5c:	d1f9      	bne.n	8009b52 <_vfiprintf_r+0x7a>
 8009b5e:	ebba 0b04 	subs.w	fp, sl, r4
 8009b62:	d00b      	beq.n	8009b7c <_vfiprintf_r+0xa4>
 8009b64:	465b      	mov	r3, fp
 8009b66:	4622      	mov	r2, r4
 8009b68:	4629      	mov	r1, r5
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f7ff ffa2 	bl	8009ab4 <__sfputs_r>
 8009b70:	3001      	adds	r0, #1
 8009b72:	f000 80a9 	beq.w	8009cc8 <_vfiprintf_r+0x1f0>
 8009b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b78:	445a      	add	r2, fp
 8009b7a:	9209      	str	r2, [sp, #36]	; 0x24
 8009b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f000 80a1 	beq.w	8009cc8 <_vfiprintf_r+0x1f0>
 8009b86:	2300      	movs	r3, #0
 8009b88:	f04f 32ff 	mov.w	r2, #4294967295
 8009b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b90:	f10a 0a01 	add.w	sl, sl, #1
 8009b94:	9304      	str	r3, [sp, #16]
 8009b96:	9307      	str	r3, [sp, #28]
 8009b98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b9c:	931a      	str	r3, [sp, #104]	; 0x68
 8009b9e:	4654      	mov	r4, sl
 8009ba0:	2205      	movs	r2, #5
 8009ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba6:	4854      	ldr	r0, [pc, #336]	; (8009cf8 <_vfiprintf_r+0x220>)
 8009ba8:	f7f6 fb22 	bl	80001f0 <memchr>
 8009bac:	9a04      	ldr	r2, [sp, #16]
 8009bae:	b9d8      	cbnz	r0, 8009be8 <_vfiprintf_r+0x110>
 8009bb0:	06d1      	lsls	r1, r2, #27
 8009bb2:	bf44      	itt	mi
 8009bb4:	2320      	movmi	r3, #32
 8009bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bba:	0713      	lsls	r3, r2, #28
 8009bbc:	bf44      	itt	mi
 8009bbe:	232b      	movmi	r3, #43	; 0x2b
 8009bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8009bca:	d015      	beq.n	8009bf8 <_vfiprintf_r+0x120>
 8009bcc:	9a07      	ldr	r2, [sp, #28]
 8009bce:	4654      	mov	r4, sl
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	f04f 0c0a 	mov.w	ip, #10
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bdc:	3b30      	subs	r3, #48	; 0x30
 8009bde:	2b09      	cmp	r3, #9
 8009be0:	d94d      	bls.n	8009c7e <_vfiprintf_r+0x1a6>
 8009be2:	b1b0      	cbz	r0, 8009c12 <_vfiprintf_r+0x13a>
 8009be4:	9207      	str	r2, [sp, #28]
 8009be6:	e014      	b.n	8009c12 <_vfiprintf_r+0x13a>
 8009be8:	eba0 0308 	sub.w	r3, r0, r8
 8009bec:	fa09 f303 	lsl.w	r3, r9, r3
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	9304      	str	r3, [sp, #16]
 8009bf4:	46a2      	mov	sl, r4
 8009bf6:	e7d2      	b.n	8009b9e <_vfiprintf_r+0xc6>
 8009bf8:	9b03      	ldr	r3, [sp, #12]
 8009bfa:	1d19      	adds	r1, r3, #4
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	9103      	str	r1, [sp, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	bfbb      	ittet	lt
 8009c04:	425b      	neglt	r3, r3
 8009c06:	f042 0202 	orrlt.w	r2, r2, #2
 8009c0a:	9307      	strge	r3, [sp, #28]
 8009c0c:	9307      	strlt	r3, [sp, #28]
 8009c0e:	bfb8      	it	lt
 8009c10:	9204      	strlt	r2, [sp, #16]
 8009c12:	7823      	ldrb	r3, [r4, #0]
 8009c14:	2b2e      	cmp	r3, #46	; 0x2e
 8009c16:	d10c      	bne.n	8009c32 <_vfiprintf_r+0x15a>
 8009c18:	7863      	ldrb	r3, [r4, #1]
 8009c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c1c:	d134      	bne.n	8009c88 <_vfiprintf_r+0x1b0>
 8009c1e:	9b03      	ldr	r3, [sp, #12]
 8009c20:	1d1a      	adds	r2, r3, #4
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	9203      	str	r2, [sp, #12]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	bfb8      	it	lt
 8009c2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c2e:	3402      	adds	r4, #2
 8009c30:	9305      	str	r3, [sp, #20]
 8009c32:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009d08 <_vfiprintf_r+0x230>
 8009c36:	7821      	ldrb	r1, [r4, #0]
 8009c38:	2203      	movs	r2, #3
 8009c3a:	4650      	mov	r0, sl
 8009c3c:	f7f6 fad8 	bl	80001f0 <memchr>
 8009c40:	b138      	cbz	r0, 8009c52 <_vfiprintf_r+0x17a>
 8009c42:	9b04      	ldr	r3, [sp, #16]
 8009c44:	eba0 000a 	sub.w	r0, r0, sl
 8009c48:	2240      	movs	r2, #64	; 0x40
 8009c4a:	4082      	lsls	r2, r0
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	3401      	adds	r4, #1
 8009c50:	9304      	str	r3, [sp, #16]
 8009c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c56:	4829      	ldr	r0, [pc, #164]	; (8009cfc <_vfiprintf_r+0x224>)
 8009c58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c5c:	2206      	movs	r2, #6
 8009c5e:	f7f6 fac7 	bl	80001f0 <memchr>
 8009c62:	2800      	cmp	r0, #0
 8009c64:	d03f      	beq.n	8009ce6 <_vfiprintf_r+0x20e>
 8009c66:	4b26      	ldr	r3, [pc, #152]	; (8009d00 <_vfiprintf_r+0x228>)
 8009c68:	bb1b      	cbnz	r3, 8009cb2 <_vfiprintf_r+0x1da>
 8009c6a:	9b03      	ldr	r3, [sp, #12]
 8009c6c:	3307      	adds	r3, #7
 8009c6e:	f023 0307 	bic.w	r3, r3, #7
 8009c72:	3308      	adds	r3, #8
 8009c74:	9303      	str	r3, [sp, #12]
 8009c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c78:	443b      	add	r3, r7
 8009c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c7c:	e768      	b.n	8009b50 <_vfiprintf_r+0x78>
 8009c7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c82:	460c      	mov	r4, r1
 8009c84:	2001      	movs	r0, #1
 8009c86:	e7a6      	b.n	8009bd6 <_vfiprintf_r+0xfe>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	3401      	adds	r4, #1
 8009c8c:	9305      	str	r3, [sp, #20]
 8009c8e:	4619      	mov	r1, r3
 8009c90:	f04f 0c0a 	mov.w	ip, #10
 8009c94:	4620      	mov	r0, r4
 8009c96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c9a:	3a30      	subs	r2, #48	; 0x30
 8009c9c:	2a09      	cmp	r2, #9
 8009c9e:	d903      	bls.n	8009ca8 <_vfiprintf_r+0x1d0>
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d0c6      	beq.n	8009c32 <_vfiprintf_r+0x15a>
 8009ca4:	9105      	str	r1, [sp, #20]
 8009ca6:	e7c4      	b.n	8009c32 <_vfiprintf_r+0x15a>
 8009ca8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cac:	4604      	mov	r4, r0
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e7f0      	b.n	8009c94 <_vfiprintf_r+0x1bc>
 8009cb2:	ab03      	add	r3, sp, #12
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	462a      	mov	r2, r5
 8009cb8:	4b12      	ldr	r3, [pc, #72]	; (8009d04 <_vfiprintf_r+0x22c>)
 8009cba:	a904      	add	r1, sp, #16
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	f7fb fa15 	bl	80050ec <_printf_float>
 8009cc2:	4607      	mov	r7, r0
 8009cc4:	1c78      	adds	r0, r7, #1
 8009cc6:	d1d6      	bne.n	8009c76 <_vfiprintf_r+0x19e>
 8009cc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cca:	07d9      	lsls	r1, r3, #31
 8009ccc:	d405      	bmi.n	8009cda <_vfiprintf_r+0x202>
 8009cce:	89ab      	ldrh	r3, [r5, #12]
 8009cd0:	059a      	lsls	r2, r3, #22
 8009cd2:	d402      	bmi.n	8009cda <_vfiprintf_r+0x202>
 8009cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cd6:	f7fc f9b1 	bl	800603c <__retarget_lock_release_recursive>
 8009cda:	89ab      	ldrh	r3, [r5, #12]
 8009cdc:	065b      	lsls	r3, r3, #25
 8009cde:	f53f af1d 	bmi.w	8009b1c <_vfiprintf_r+0x44>
 8009ce2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ce4:	e71c      	b.n	8009b20 <_vfiprintf_r+0x48>
 8009ce6:	ab03      	add	r3, sp, #12
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	462a      	mov	r2, r5
 8009cec:	4b05      	ldr	r3, [pc, #20]	; (8009d04 <_vfiprintf_r+0x22c>)
 8009cee:	a904      	add	r1, sp, #16
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	f7fb fc9f 	bl	8005634 <_printf_i>
 8009cf6:	e7e4      	b.n	8009cc2 <_vfiprintf_r+0x1ea>
 8009cf8:	0800a4c1 	.word	0x0800a4c1
 8009cfc:	0800a4cb 	.word	0x0800a4cb
 8009d00:	080050ed 	.word	0x080050ed
 8009d04:	08009ab5 	.word	0x08009ab5
 8009d08:	0800a4c7 	.word	0x0800a4c7

08009d0c <__swbuf_r>:
 8009d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0e:	460e      	mov	r6, r1
 8009d10:	4614      	mov	r4, r2
 8009d12:	4605      	mov	r5, r0
 8009d14:	b118      	cbz	r0, 8009d1e <__swbuf_r+0x12>
 8009d16:	6a03      	ldr	r3, [r0, #32]
 8009d18:	b90b      	cbnz	r3, 8009d1e <__swbuf_r+0x12>
 8009d1a:	f7fc f849 	bl	8005db0 <__sinit>
 8009d1e:	69a3      	ldr	r3, [r4, #24]
 8009d20:	60a3      	str	r3, [r4, #8]
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	071a      	lsls	r2, r3, #28
 8009d26:	d525      	bpl.n	8009d74 <__swbuf_r+0x68>
 8009d28:	6923      	ldr	r3, [r4, #16]
 8009d2a:	b31b      	cbz	r3, 8009d74 <__swbuf_r+0x68>
 8009d2c:	6823      	ldr	r3, [r4, #0]
 8009d2e:	6922      	ldr	r2, [r4, #16]
 8009d30:	1a98      	subs	r0, r3, r2
 8009d32:	6963      	ldr	r3, [r4, #20]
 8009d34:	b2f6      	uxtb	r6, r6
 8009d36:	4283      	cmp	r3, r0
 8009d38:	4637      	mov	r7, r6
 8009d3a:	dc04      	bgt.n	8009d46 <__swbuf_r+0x3a>
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f7ff f942 	bl	8008fc8 <_fflush_r>
 8009d44:	b9e0      	cbnz	r0, 8009d80 <__swbuf_r+0x74>
 8009d46:	68a3      	ldr	r3, [r4, #8]
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	60a3      	str	r3, [r4, #8]
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	1c5a      	adds	r2, r3, #1
 8009d50:	6022      	str	r2, [r4, #0]
 8009d52:	701e      	strb	r6, [r3, #0]
 8009d54:	6962      	ldr	r2, [r4, #20]
 8009d56:	1c43      	adds	r3, r0, #1
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d004      	beq.n	8009d66 <__swbuf_r+0x5a>
 8009d5c:	89a3      	ldrh	r3, [r4, #12]
 8009d5e:	07db      	lsls	r3, r3, #31
 8009d60:	d506      	bpl.n	8009d70 <__swbuf_r+0x64>
 8009d62:	2e0a      	cmp	r6, #10
 8009d64:	d104      	bne.n	8009d70 <__swbuf_r+0x64>
 8009d66:	4621      	mov	r1, r4
 8009d68:	4628      	mov	r0, r5
 8009d6a:	f7ff f92d 	bl	8008fc8 <_fflush_r>
 8009d6e:	b938      	cbnz	r0, 8009d80 <__swbuf_r+0x74>
 8009d70:	4638      	mov	r0, r7
 8009d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d74:	4621      	mov	r1, r4
 8009d76:	4628      	mov	r0, r5
 8009d78:	f000 f806 	bl	8009d88 <__swsetup_r>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d0d5      	beq.n	8009d2c <__swbuf_r+0x20>
 8009d80:	f04f 37ff 	mov.w	r7, #4294967295
 8009d84:	e7f4      	b.n	8009d70 <__swbuf_r+0x64>
	...

08009d88 <__swsetup_r>:
 8009d88:	b538      	push	{r3, r4, r5, lr}
 8009d8a:	4b2a      	ldr	r3, [pc, #168]	; (8009e34 <__swsetup_r+0xac>)
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	6818      	ldr	r0, [r3, #0]
 8009d90:	460c      	mov	r4, r1
 8009d92:	b118      	cbz	r0, 8009d9c <__swsetup_r+0x14>
 8009d94:	6a03      	ldr	r3, [r0, #32]
 8009d96:	b90b      	cbnz	r3, 8009d9c <__swsetup_r+0x14>
 8009d98:	f7fc f80a 	bl	8005db0 <__sinit>
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009da2:	0718      	lsls	r0, r3, #28
 8009da4:	d422      	bmi.n	8009dec <__swsetup_r+0x64>
 8009da6:	06d9      	lsls	r1, r3, #27
 8009da8:	d407      	bmi.n	8009dba <__swsetup_r+0x32>
 8009daa:	2309      	movs	r3, #9
 8009dac:	602b      	str	r3, [r5, #0]
 8009dae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009db2:	81a3      	strh	r3, [r4, #12]
 8009db4:	f04f 30ff 	mov.w	r0, #4294967295
 8009db8:	e034      	b.n	8009e24 <__swsetup_r+0x9c>
 8009dba:	0758      	lsls	r0, r3, #29
 8009dbc:	d512      	bpl.n	8009de4 <__swsetup_r+0x5c>
 8009dbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dc0:	b141      	cbz	r1, 8009dd4 <__swsetup_r+0x4c>
 8009dc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dc6:	4299      	cmp	r1, r3
 8009dc8:	d002      	beq.n	8009dd0 <__swsetup_r+0x48>
 8009dca:	4628      	mov	r0, r5
 8009dcc:	f7fc ffba 	bl	8006d44 <_free_r>
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	6363      	str	r3, [r4, #52]	; 0x34
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dda:	81a3      	strh	r3, [r4, #12]
 8009ddc:	2300      	movs	r3, #0
 8009dde:	6063      	str	r3, [r4, #4]
 8009de0:	6923      	ldr	r3, [r4, #16]
 8009de2:	6023      	str	r3, [r4, #0]
 8009de4:	89a3      	ldrh	r3, [r4, #12]
 8009de6:	f043 0308 	orr.w	r3, r3, #8
 8009dea:	81a3      	strh	r3, [r4, #12]
 8009dec:	6923      	ldr	r3, [r4, #16]
 8009dee:	b94b      	cbnz	r3, 8009e04 <__swsetup_r+0x7c>
 8009df0:	89a3      	ldrh	r3, [r4, #12]
 8009df2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dfa:	d003      	beq.n	8009e04 <__swsetup_r+0x7c>
 8009dfc:	4621      	mov	r1, r4
 8009dfe:	4628      	mov	r0, r5
 8009e00:	f000 f884 	bl	8009f0c <__smakebuf_r>
 8009e04:	89a0      	ldrh	r0, [r4, #12]
 8009e06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e0a:	f010 0301 	ands.w	r3, r0, #1
 8009e0e:	d00a      	beq.n	8009e26 <__swsetup_r+0x9e>
 8009e10:	2300      	movs	r3, #0
 8009e12:	60a3      	str	r3, [r4, #8]
 8009e14:	6963      	ldr	r3, [r4, #20]
 8009e16:	425b      	negs	r3, r3
 8009e18:	61a3      	str	r3, [r4, #24]
 8009e1a:	6923      	ldr	r3, [r4, #16]
 8009e1c:	b943      	cbnz	r3, 8009e30 <__swsetup_r+0xa8>
 8009e1e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e22:	d1c4      	bne.n	8009dae <__swsetup_r+0x26>
 8009e24:	bd38      	pop	{r3, r4, r5, pc}
 8009e26:	0781      	lsls	r1, r0, #30
 8009e28:	bf58      	it	pl
 8009e2a:	6963      	ldrpl	r3, [r4, #20]
 8009e2c:	60a3      	str	r3, [r4, #8]
 8009e2e:	e7f4      	b.n	8009e1a <__swsetup_r+0x92>
 8009e30:	2000      	movs	r0, #0
 8009e32:	e7f7      	b.n	8009e24 <__swsetup_r+0x9c>
 8009e34:	20000068 	.word	0x20000068

08009e38 <_raise_r>:
 8009e38:	291f      	cmp	r1, #31
 8009e3a:	b538      	push	{r3, r4, r5, lr}
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	460d      	mov	r5, r1
 8009e40:	d904      	bls.n	8009e4c <_raise_r+0x14>
 8009e42:	2316      	movs	r3, #22
 8009e44:	6003      	str	r3, [r0, #0]
 8009e46:	f04f 30ff 	mov.w	r0, #4294967295
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009e4e:	b112      	cbz	r2, 8009e56 <_raise_r+0x1e>
 8009e50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e54:	b94b      	cbnz	r3, 8009e6a <_raise_r+0x32>
 8009e56:	4620      	mov	r0, r4
 8009e58:	f000 f830 	bl	8009ebc <_getpid_r>
 8009e5c:	462a      	mov	r2, r5
 8009e5e:	4601      	mov	r1, r0
 8009e60:	4620      	mov	r0, r4
 8009e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e66:	f000 b817 	b.w	8009e98 <_kill_r>
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d00a      	beq.n	8009e84 <_raise_r+0x4c>
 8009e6e:	1c59      	adds	r1, r3, #1
 8009e70:	d103      	bne.n	8009e7a <_raise_r+0x42>
 8009e72:	2316      	movs	r3, #22
 8009e74:	6003      	str	r3, [r0, #0]
 8009e76:	2001      	movs	r0, #1
 8009e78:	e7e7      	b.n	8009e4a <_raise_r+0x12>
 8009e7a:	2400      	movs	r4, #0
 8009e7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e80:	4628      	mov	r0, r5
 8009e82:	4798      	blx	r3
 8009e84:	2000      	movs	r0, #0
 8009e86:	e7e0      	b.n	8009e4a <_raise_r+0x12>

08009e88 <raise>:
 8009e88:	4b02      	ldr	r3, [pc, #8]	; (8009e94 <raise+0xc>)
 8009e8a:	4601      	mov	r1, r0
 8009e8c:	6818      	ldr	r0, [r3, #0]
 8009e8e:	f7ff bfd3 	b.w	8009e38 <_raise_r>
 8009e92:	bf00      	nop
 8009e94:	20000068 	.word	0x20000068

08009e98 <_kill_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	4d07      	ldr	r5, [pc, #28]	; (8009eb8 <_kill_r+0x20>)
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	4608      	mov	r0, r1
 8009ea2:	4611      	mov	r1, r2
 8009ea4:	602b      	str	r3, [r5, #0]
 8009ea6:	f7f7 fe5d 	bl	8001b64 <_kill>
 8009eaa:	1c43      	adds	r3, r0, #1
 8009eac:	d102      	bne.n	8009eb4 <_kill_r+0x1c>
 8009eae:	682b      	ldr	r3, [r5, #0]
 8009eb0:	b103      	cbz	r3, 8009eb4 <_kill_r+0x1c>
 8009eb2:	6023      	str	r3, [r4, #0]
 8009eb4:	bd38      	pop	{r3, r4, r5, pc}
 8009eb6:	bf00      	nop
 8009eb8:	20000ac8 	.word	0x20000ac8

08009ebc <_getpid_r>:
 8009ebc:	f7f7 be4a 	b.w	8001b54 <_getpid>

08009ec0 <__swhatbuf_r>:
 8009ec0:	b570      	push	{r4, r5, r6, lr}
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec8:	2900      	cmp	r1, #0
 8009eca:	b096      	sub	sp, #88	; 0x58
 8009ecc:	4615      	mov	r5, r2
 8009ece:	461e      	mov	r6, r3
 8009ed0:	da0d      	bge.n	8009eee <__swhatbuf_r+0x2e>
 8009ed2:	89a3      	ldrh	r3, [r4, #12]
 8009ed4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009ed8:	f04f 0100 	mov.w	r1, #0
 8009edc:	bf0c      	ite	eq
 8009ede:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009ee2:	2340      	movne	r3, #64	; 0x40
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	6031      	str	r1, [r6, #0]
 8009ee8:	602b      	str	r3, [r5, #0]
 8009eea:	b016      	add	sp, #88	; 0x58
 8009eec:	bd70      	pop	{r4, r5, r6, pc}
 8009eee:	466a      	mov	r2, sp
 8009ef0:	f000 f848 	bl	8009f84 <_fstat_r>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	dbec      	blt.n	8009ed2 <__swhatbuf_r+0x12>
 8009ef8:	9901      	ldr	r1, [sp, #4]
 8009efa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009efe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009f02:	4259      	negs	r1, r3
 8009f04:	4159      	adcs	r1, r3
 8009f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f0a:	e7eb      	b.n	8009ee4 <__swhatbuf_r+0x24>

08009f0c <__smakebuf_r>:
 8009f0c:	898b      	ldrh	r3, [r1, #12]
 8009f0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f10:	079d      	lsls	r5, r3, #30
 8009f12:	4606      	mov	r6, r0
 8009f14:	460c      	mov	r4, r1
 8009f16:	d507      	bpl.n	8009f28 <__smakebuf_r+0x1c>
 8009f18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f1c:	6023      	str	r3, [r4, #0]
 8009f1e:	6123      	str	r3, [r4, #16]
 8009f20:	2301      	movs	r3, #1
 8009f22:	6163      	str	r3, [r4, #20]
 8009f24:	b002      	add	sp, #8
 8009f26:	bd70      	pop	{r4, r5, r6, pc}
 8009f28:	ab01      	add	r3, sp, #4
 8009f2a:	466a      	mov	r2, sp
 8009f2c:	f7ff ffc8 	bl	8009ec0 <__swhatbuf_r>
 8009f30:	9900      	ldr	r1, [sp, #0]
 8009f32:	4605      	mov	r5, r0
 8009f34:	4630      	mov	r0, r6
 8009f36:	f7fc ff79 	bl	8006e2c <_malloc_r>
 8009f3a:	b948      	cbnz	r0, 8009f50 <__smakebuf_r+0x44>
 8009f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f40:	059a      	lsls	r2, r3, #22
 8009f42:	d4ef      	bmi.n	8009f24 <__smakebuf_r+0x18>
 8009f44:	f023 0303 	bic.w	r3, r3, #3
 8009f48:	f043 0302 	orr.w	r3, r3, #2
 8009f4c:	81a3      	strh	r3, [r4, #12]
 8009f4e:	e7e3      	b.n	8009f18 <__smakebuf_r+0xc>
 8009f50:	89a3      	ldrh	r3, [r4, #12]
 8009f52:	6020      	str	r0, [r4, #0]
 8009f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f58:	81a3      	strh	r3, [r4, #12]
 8009f5a:	9b00      	ldr	r3, [sp, #0]
 8009f5c:	6163      	str	r3, [r4, #20]
 8009f5e:	9b01      	ldr	r3, [sp, #4]
 8009f60:	6120      	str	r0, [r4, #16]
 8009f62:	b15b      	cbz	r3, 8009f7c <__smakebuf_r+0x70>
 8009f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f000 f81d 	bl	8009fa8 <_isatty_r>
 8009f6e:	b128      	cbz	r0, 8009f7c <__smakebuf_r+0x70>
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	f023 0303 	bic.w	r3, r3, #3
 8009f76:	f043 0301 	orr.w	r3, r3, #1
 8009f7a:	81a3      	strh	r3, [r4, #12]
 8009f7c:	89a3      	ldrh	r3, [r4, #12]
 8009f7e:	431d      	orrs	r5, r3
 8009f80:	81a5      	strh	r5, [r4, #12]
 8009f82:	e7cf      	b.n	8009f24 <__smakebuf_r+0x18>

08009f84 <_fstat_r>:
 8009f84:	b538      	push	{r3, r4, r5, lr}
 8009f86:	4d07      	ldr	r5, [pc, #28]	; (8009fa4 <_fstat_r+0x20>)
 8009f88:	2300      	movs	r3, #0
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	4608      	mov	r0, r1
 8009f8e:	4611      	mov	r1, r2
 8009f90:	602b      	str	r3, [r5, #0]
 8009f92:	f7f7 fe46 	bl	8001c22 <_fstat>
 8009f96:	1c43      	adds	r3, r0, #1
 8009f98:	d102      	bne.n	8009fa0 <_fstat_r+0x1c>
 8009f9a:	682b      	ldr	r3, [r5, #0]
 8009f9c:	b103      	cbz	r3, 8009fa0 <_fstat_r+0x1c>
 8009f9e:	6023      	str	r3, [r4, #0]
 8009fa0:	bd38      	pop	{r3, r4, r5, pc}
 8009fa2:	bf00      	nop
 8009fa4:	20000ac8 	.word	0x20000ac8

08009fa8 <_isatty_r>:
 8009fa8:	b538      	push	{r3, r4, r5, lr}
 8009faa:	4d06      	ldr	r5, [pc, #24]	; (8009fc4 <_isatty_r+0x1c>)
 8009fac:	2300      	movs	r3, #0
 8009fae:	4604      	mov	r4, r0
 8009fb0:	4608      	mov	r0, r1
 8009fb2:	602b      	str	r3, [r5, #0]
 8009fb4:	f7f7 fe45 	bl	8001c42 <_isatty>
 8009fb8:	1c43      	adds	r3, r0, #1
 8009fba:	d102      	bne.n	8009fc2 <_isatty_r+0x1a>
 8009fbc:	682b      	ldr	r3, [r5, #0]
 8009fbe:	b103      	cbz	r3, 8009fc2 <_isatty_r+0x1a>
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	bd38      	pop	{r3, r4, r5, pc}
 8009fc4:	20000ac8 	.word	0x20000ac8

08009fc8 <fmax>:
 8009fc8:	b508      	push	{r3, lr}
 8009fca:	ed2d 8b04 	vpush	{d8-d9}
 8009fce:	eeb0 8a40 	vmov.f32	s16, s0
 8009fd2:	eef0 8a60 	vmov.f32	s17, s1
 8009fd6:	eeb0 9a41 	vmov.f32	s18, s2
 8009fda:	eef0 9a61 	vmov.f32	s19, s3
 8009fde:	f000 f81b 	bl	800a018 <__fpclassifyd>
 8009fe2:	b168      	cbz	r0, 800a000 <fmax+0x38>
 8009fe4:	eeb0 0a49 	vmov.f32	s0, s18
 8009fe8:	eef0 0a69 	vmov.f32	s1, s19
 8009fec:	f000 f814 	bl	800a018 <__fpclassifyd>
 8009ff0:	b150      	cbz	r0, 800a008 <fmax+0x40>
 8009ff2:	ec53 2b19 	vmov	r2, r3, d9
 8009ff6:	ec51 0b18 	vmov	r0, r1, d8
 8009ffa:	f7f6 fd9d 	bl	8000b38 <__aeabi_dcmpgt>
 8009ffe:	b918      	cbnz	r0, 800a008 <fmax+0x40>
 800a000:	eeb0 8a49 	vmov.f32	s16, s18
 800a004:	eef0 8a69 	vmov.f32	s17, s19
 800a008:	eeb0 0a48 	vmov.f32	s0, s16
 800a00c:	eef0 0a68 	vmov.f32	s1, s17
 800a010:	ecbd 8b04 	vpop	{d8-d9}
 800a014:	bd08      	pop	{r3, pc}
	...

0800a018 <__fpclassifyd>:
 800a018:	ec51 0b10 	vmov	r0, r1, d0
 800a01c:	b510      	push	{r4, lr}
 800a01e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800a022:	460b      	mov	r3, r1
 800a024:	d019      	beq.n	800a05a <__fpclassifyd+0x42>
 800a026:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800a02a:	490e      	ldr	r1, [pc, #56]	; (800a064 <__fpclassifyd+0x4c>)
 800a02c:	428a      	cmp	r2, r1
 800a02e:	d90e      	bls.n	800a04e <__fpclassifyd+0x36>
 800a030:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 800a034:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800a038:	428a      	cmp	r2, r1
 800a03a:	d908      	bls.n	800a04e <__fpclassifyd+0x36>
 800a03c:	4a0a      	ldr	r2, [pc, #40]	; (800a068 <__fpclassifyd+0x50>)
 800a03e:	4213      	tst	r3, r2
 800a040:	d007      	beq.n	800a052 <__fpclassifyd+0x3a>
 800a042:	4294      	cmp	r4, r2
 800a044:	d107      	bne.n	800a056 <__fpclassifyd+0x3e>
 800a046:	fab0 f080 	clz	r0, r0
 800a04a:	0940      	lsrs	r0, r0, #5
 800a04c:	bd10      	pop	{r4, pc}
 800a04e:	2004      	movs	r0, #4
 800a050:	e7fc      	b.n	800a04c <__fpclassifyd+0x34>
 800a052:	2003      	movs	r0, #3
 800a054:	e7fa      	b.n	800a04c <__fpclassifyd+0x34>
 800a056:	2000      	movs	r0, #0
 800a058:	e7f8      	b.n	800a04c <__fpclassifyd+0x34>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d1ee      	bne.n	800a03c <__fpclassifyd+0x24>
 800a05e:	2002      	movs	r0, #2
 800a060:	e7f4      	b.n	800a04c <__fpclassifyd+0x34>
 800a062:	bf00      	nop
 800a064:	7fdfffff 	.word	0x7fdfffff
 800a068:	7ff00000 	.word	0x7ff00000

0800a06c <round>:
 800a06c:	ec53 2b10 	vmov	r2, r3, d0
 800a070:	b570      	push	{r4, r5, r6, lr}
 800a072:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800a076:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800a07a:	2813      	cmp	r0, #19
 800a07c:	ee10 5a10 	vmov	r5, s0
 800a080:	4619      	mov	r1, r3
 800a082:	dc18      	bgt.n	800a0b6 <round+0x4a>
 800a084:	2800      	cmp	r0, #0
 800a086:	da09      	bge.n	800a09c <round+0x30>
 800a088:	3001      	adds	r0, #1
 800a08a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800a08e:	d103      	bne.n	800a098 <round+0x2c>
 800a090:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a094:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a098:	2300      	movs	r3, #0
 800a09a:	e02a      	b.n	800a0f2 <round+0x86>
 800a09c:	4c16      	ldr	r4, [pc, #88]	; (800a0f8 <round+0x8c>)
 800a09e:	4104      	asrs	r4, r0
 800a0a0:	ea03 0604 	and.w	r6, r3, r4
 800a0a4:	4316      	orrs	r6, r2
 800a0a6:	d011      	beq.n	800a0cc <round+0x60>
 800a0a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a0ac:	4103      	asrs	r3, r0
 800a0ae:	440b      	add	r3, r1
 800a0b0:	ea23 0104 	bic.w	r1, r3, r4
 800a0b4:	e7f0      	b.n	800a098 <round+0x2c>
 800a0b6:	2833      	cmp	r0, #51	; 0x33
 800a0b8:	dd0b      	ble.n	800a0d2 <round+0x66>
 800a0ba:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a0be:	d105      	bne.n	800a0cc <round+0x60>
 800a0c0:	ee10 0a10 	vmov	r0, s0
 800a0c4:	f7f6 f8f2 	bl	80002ac <__adddf3>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	ec43 2b10 	vmov	d0, r2, r3
 800a0d0:	bd70      	pop	{r4, r5, r6, pc}
 800a0d2:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800a0d6:	f04f 34ff 	mov.w	r4, #4294967295
 800a0da:	40f4      	lsrs	r4, r6
 800a0dc:	4214      	tst	r4, r2
 800a0de:	d0f5      	beq.n	800a0cc <round+0x60>
 800a0e0:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	4083      	lsls	r3, r0
 800a0e8:	195b      	adds	r3, r3, r5
 800a0ea:	bf28      	it	cs
 800a0ec:	3101      	addcs	r1, #1
 800a0ee:	ea23 0304 	bic.w	r3, r3, r4
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	e7e9      	b.n	800a0cc <round+0x60>
 800a0f8:	000fffff 	.word	0x000fffff

0800a0fc <_init>:
 800a0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0fe:	bf00      	nop
 800a100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a102:	bc08      	pop	{r3}
 800a104:	469e      	mov	lr, r3
 800a106:	4770      	bx	lr

0800a108 <_fini>:
 800a108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10a:	bf00      	nop
 800a10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a10e:	bc08      	pop	{r3}
 800a110:	469e      	mov	lr, r3
 800a112:	4770      	bx	lr
